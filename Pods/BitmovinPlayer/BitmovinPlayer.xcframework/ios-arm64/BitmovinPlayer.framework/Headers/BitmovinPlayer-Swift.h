#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef BITMOVINPLAYER_SWIFT_H
#define BITMOVINPLAYER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreFoundation;
@import CoreMedia;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)






enum BMPMetadataType : NSInteger;

SWIFT_PROTOCOL_NAMED("MetadataEntry")
@protocol BMPMetadataEntry
@property (nonatomic, readonly) enum BMPMetadataType metadataType;
@end


@interface AVMetadataItem (SWIFT_EXTENSION(BitmovinPlayer)) <BMPMetadataEntry>
@property (nonatomic, readonly) enum BMPMetadataType metadataType;
@end




@class NSString;

/// Base protocol for all event classes.
SWIFT_PROTOCOL_NAMED("Event")
@protocol BMPEvent <NSObject>
/// Name of the event.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Time when the event was emitted.
@property (nonatomic, readonly) NSTimeInterval timestamp;
@end


/// Base class for all <code>PlayerEvent</code> classes.
SWIFT_CLASS_NAMED("PlayerEvent")
@interface BMPPlayerEvent : NSObject <BMPEvent>
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BMPAdBreak;

/// Base class for ad break related event classes.
SWIFT_CLASS_NAMED("AdBreakEvent")
@interface BMPAdBreakEvent : BMPPlayerEvent
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nonnull adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdBreakFinishedEvent")
@interface BMPAdBreakFinishedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdBreakStartedEvent")
@interface BMPAdBreakStartedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdClickedEvent")
@interface BMPAdClickedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPAdItem;
@protocol BMPAdConfig;

/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdErrorEvent")
@interface BMPAdErrorEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAdItem * _Nullable adItem;
@property (nonatomic, readonly) NSInteger code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdItem:(BMPAdItem * _Nullable)adItem code:(NSInteger)code message:(NSString * _Nonnull)message adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol BMPAd;

/// Base class for ad related event classes.
SWIFT_CLASS_NAMED("AdEvent")
@interface BMPAdEvent : BMPPlayerEvent
/// The <code>Ad</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAd> _Nonnull ad;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdFinishedEvent")
@interface BMPAdFinishedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPAdSource;

/// Represents an ad break which can be scheduled for playback.
SWIFT_CLASS_NAMED("AdItem")
@interface BMPAdItem : NSObject
/// The <code>AdSource</code>s that make up this <code>AdItem</code>. The first ad source in this array is used as the main ad.
/// Subsequent ad sources act as a fallback, meaning that if the main ad source does not provide a valid response,
/// the subsequent ad sources will be utilized one after another.
@property (nonatomic, readonly, copy) NSArray<BMPAdSource *> * _Nonnull sources;
/// The playback position at which the ad break is scheduled to start. Will play as a pre-roll ad when set to <code>nil</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable position;
/// Creates a new <code>AdItem</code> with an array of <code>AdSource</code>s as pre-roll ads.
/// \param sources The <code>AdSource</code>s that make up this <code>AdItem</code>.
/// The first ad source in this array is used as the main ad.
/// Subsequent ad sources act as a fallback, meaning that if the main ad source does not provide a valid response,
/// the subsequent ad sources will be utilized one after another.
///
- (nonnull instancetype)initWithAdSources:(NSArray<BMPAdSource *> * _Nonnull)sources;
/// Creates a new <code>AdItem</code> with an array of <code>AdSource</code>s scheduled for the given position.
/// \param sources The <code>AdSource</code>s that make up this <code>AdItem</code>.
/// The first ad source in this array is used as the main ad.
/// Subsequent ad sources act as a fallback, meaning that if the main ad source does not provide
/// a valid response,
/// the subsequent ad sources will be utilized one after another.
///
/// \param position The playback position at which the ad break is scheduled to start.
/// Will play as a pre-roll ad when set to <code>nil</code>.
/// Value of position can be:
/// <ul>
///   <li>
///     <code>"pre"</code>: pre-roll ad, played before the main content starts
///   </li>
///   <li>
///     <code>"X%"</code>: mid-roll ad, played when reaching the X% of the main content duration, e.g. <code>"15%"</code>
///   </li>
///   <li>
///     <code>"post"</code>: post-roll ad, played after the main content has finished
///   </li>
/// </ul>
///
- (nonnull instancetype)initWithAdSources:(NSArray<BMPAdSource *> * _Nonnull)sources atPosition:(NSString * _Nullable)position OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPAdItem (SWIFT_EXTENSION(BitmovinPlayer)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadEvent")
@interface BMPAdManifestLoadEvent : BMPPlayerEvent
/// The <code>AdConfig</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// The <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdConfig:(id <BMPAdConfig> _Nullable)adConfig adBreak:(id <BMPAdBreak> _Nullable)adBreak OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadedEvent")
@interface BMPAdManifestLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// The <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDownloadTime:(NSTimeInterval)downloadTime adBreak:(id <BMPAdBreak> _Nullable)adBreak adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdQuartileEvent")
@interface BMPAdQuartileEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum BMPAdQuartile adQuartile;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithQuartile:(enum BMPAdQuartile)quartile OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdScheduledEvent")
@interface BMPAdScheduledEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSUInteger numberOfAds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithNumberOfAds:(NSUInteger)numberOfAds OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdSkippedEvent")
@interface BMPAdSkippedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end

enum BMPAdSourceType : NSInteger;

/// Represents an ad source which can be assigned to an AdItem.
/// An <code>AdItem</code> can have multiple <code>AdSource</code>s as a waterfalling option.
SWIFT_CLASS_NAMED("AdSource")
@interface BMPAdSource : NSObject
@property (nonatomic, readonly) enum BMPAdSourceType type;
@property (nonatomic, readonly, copy) NSURL * _Nonnull tag;
- (nonnull instancetype)initWithTag:(NSURL * _Nonnull)tag ofType:(enum BMPAdSourceType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPAdSource (SWIFT_EXTENSION(BitmovinPlayer)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

/// Type of the <code>AdSource</code>
typedef SWIFT_ENUM_NAMED(NSInteger, BMPAdSourceType, "AdSourceType", open) {
/// Missing advertising source type
  BMPAdSourceTypeNone = 0,
/// Interactive Media Ads
  BMPAdSourceTypeIma = 1,
/// Unknown advertising source type
  BMPAdSourceTypeUnknown = 2,
/// Progressive ad type
  BMPAdSourceTypeProgressive = 3,
};


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AdStartedEvent")
@interface BMPAdStartedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly) enum BMPAdSourceType clientType;
@property (nonatomic, readonly) NSUInteger indexInQueue;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) NSTimeInterval timeOffset;
@property (nonatomic, readonly) NSTimeInterval skipOffset;
@property (nonatomic, readonly, copy) NSString * _Nullable position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl clientType:(enum BMPAdSourceType)clientType indexInQueue:(NSUInteger)indexInQueue duration:(NSTimeInterval)duration timeOffset:(NSTimeInterval)timeOffset skipOffset:(NSTimeInterval)skipOffset position:(NSString * _Nullable)position ad:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad SWIFT_UNAVAILABLE;
@end


/// Contains config values regarding the behaviour of the bitrate adaptation.
SWIFT_CLASS_NAMED("AdaptationConfig")
@interface BMPAdaptationConfig : NSObject
/// The upper bitrate boundary in bits per second for network bandwidth consumption of the played source.
/// Can be set to 0 for no limitation.
/// Default value is <code>0</code>.
@property (nonatomic) NSUInteger maxSelectableBitrate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BMPImaAdsManager;
@class BMPImaSettings;
@class BMPImaAdvertisingConfig;

/// Contains config values regarding the ads which should be played back by the player.
SWIFT_CLASS_NAMED("AdvertisingConfig")
@interface BMPAdvertisingConfig : NSObject
/// Contains one or more <code>AdItem</code>(s). Each <code>AdItem</code> defines when the specified ad shall be played.
@property (nonatomic, copy) NSArray<BMPAdItem *> * _Nonnull schedule;
/// Provides access to the current <code>ImaAdsManager</code> once it becomes available.
@property (nonatomic, copy) void (^ _Nullable onAdsManagerAvailable)(id <BMPImaAdsManager> _Nonnull);
/// Callback that provides access to the <code>ImaSettings</code> before any initialization happens.
@property (nonatomic, copy) void (^ _Nullable beforeInitialization)(BMPImaSettings * _Nonnull);
/// Configuration to customize Google IMA SDK integration behavior.
@property (nonatomic, strong) BMPImaAdvertisingConfig * _Nonnull ima;
/// Creates a new <code>AdvertisingConfig</code> with empty ad schedule.
- (nonnull instancetype)init;
/// Creates a new <code>AdvertisingConfig</code> with the given ad schedule.
/// \param schedule The ad schedule which will be used within this <code>AdvertisingConfig</code>.
///
- (nonnull instancetype)initWithSchedule:(NSArray<BMPAdItem *> * _Nonnull)schedule OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AirPlayAvailableEvent")
@interface BMPAirPlayAvailableEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AirPlayChangedEvent")
@interface BMPAirPlayChangedEvent : BMPPlayerEvent
/// Indicates whether AirPlay is active.
@property (nonatomic, readonly) BOOL isAirPlayActive;
/// Current playback time in seconds.
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAirPlayActive:(BOOL)airPlayActive time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol for all <code>SourceEvent</code> classes.
SWIFT_PROTOCOL_NAMED("SourceEvent")
@protocol BMPSourceEvent <BMPEvent>
@end

@class BMPAudioTrack;

/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPAudioAddedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AudioChangedEvent")
@interface BMPAudioChangedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audioTrackOld;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrackNew;
- (nonnull instancetype)initWithNewAudioTrack:(BMPAudioTrack * _Nonnull)newAudioTrack oldAudioTrack:(BMPAudioTrack * _Nullable)oldAudioTrack OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPAudioChangedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("AudioRemovedEvent")
@interface BMPAudioRemovedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The time at which this event was fired
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// The removed <code>AudioTrack</code>
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
/// The playback time (in seconds) when the track was removed
@property (nonatomic, readonly) NSTimeInterval time;
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPAudioRemovedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

enum BMPTrackType : NSInteger;

/// Base class for all available tracks.
/// note:
/// This class acts as an abstract class.
SWIFT_CLASS_NAMED("Track")
@interface BMPTrack : NSObject
/// The URL to the timed file, e.g. WebVTT file.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// If set to <code>true</code>, this track would be considered as default.
@property (nonatomic, readonly) BOOL isDefaultTrack;
/// The label for this track.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// The unique identifier for this track.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The type for this track.
@property (nonatomic, readonly) enum BMPTrackType type;
/// :nodoc:
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url trackType:(enum BMPTrackType)trackType label:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)_updateLabelTo:(NSString * _Nonnull)label;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describes an audio track.
SWIFT_CLASS_NAMED("AudioTrack")
@interface BMPAudioTrack : BMPTrack
/// The IETF BCP 47 language tag associated with the audio track.
@property (nonatomic, readonly, copy) NSString * _Nullable language;
/// Creates a new audio track
/// \param label The label for this track.
///
/// \param identifier The unique identifier for this track.
///
/// \param isDefaultTrack If set to <code>true</code>, this track would be considered as default.
///
/// \param language The IETF BCP 47 language tag associated with this track
///
///
/// returns:
/// A new <code>AudioTrack</code> initialized with the provided metadata.
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack language:(NSString * _Nullable)language OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url trackType:(enum BMPTrackType)trackType label:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack SWIFT_UNAVAILABLE;
@end


/// Protocol for all <code>OfflineEvent</code> classes.
SWIFT_PROTOCOL_NAMED("OfflineEvent")
@protocol BMPOfflineEvent <BMPEvent>
@end

@class BMPOfflineTrackSelection;

/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("AvailableTracksFetchedEvent")
@protocol BMPAvailableTracksFetchedEvent <BMPOfflineEvent>
@property (nonatomic, readonly, strong) BMPOfflineTrackSelection * _Nonnull tracks;
@end

enum BMPCastDeviceDiscoveryMode : NSInteger;

/// The options to be used for initializing <code>BitmovinCastManager</code>
SWIFT_CLASS_NAMED("BitmovinCastManagerOptions")
@interface BMPBitmovinCastManagerOptions : NSObject
/// ID of receiver application
/// Using <code>nil</code> value will result in using the default application ID
@property (nonatomic, copy) NSString * _Nullable applicationId;
/// Custom namespace
/// Using <code>nil</code> value will result in using the default message namespace
@property (nonatomic, copy) NSString * _Nullable messageNamespace;
/// Whether sessions should be suspended when the sender application goes into the background
/// This flag should be used in case the cast session should stay connected to the application
/// when the application moves to background.
/// This enables actions on the active cast session like <code>play</code> and <code>pause</code> when the app is in background.
/// Default is <code>false</code>
@property (nonatomic) BOOL enableBackgroundSessions;
/// Specifies when cast devices discovery starts.
/// <ul>
///   <li>
///     Also specifies when the local network access permission prompt will be displayed.
///   </li>
///   <li>
///     See <code>CastDeviceDiscoveryMode</code> for possible values.
///   </li>
/// </ul>
/// Default is <code>.castManagerInitialization</code>
@property (nonatomic) enum BMPCastDeviceDiscoveryMode deviceDiscoveryMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("UserInterfaceConfig")
@interface BMPUserInterfaceConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPCustomMessageHandler;

/// Contains config values that can be used to alter the visual presentation and behaviour when the Bitmovin
/// Player Web UI is used.
SWIFT_CLASS_NAMED("BitmovinUserInterfaceConfig")
@interface BMPBitmovinUserInterfaceConfig : BMPUserInterfaceConfig
/// Handles the communication with the Bitmovin Web UI in both directions
@property (nonatomic, strong) BMPCustomMessageHandler * _Nullable customMessageHandler;
/// When set to <code>true</code> the first frame of the main content will not be rendered before playback starts
/// Default is <code>false</code>.
/// To reliably hide the first frame before a pre-roll ad, please ensure that you are using the
/// <code>AdvertisingConfig</code> to schedule ads and not the scheduleAd API call
@property (nonatomic) BOOL hideFirstFrame;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPBufferMediaTypeConfig;

/// Player buffer config object to configure buffering behavior.
SWIFT_CLASS_NAMED("BufferConfig")
@interface BMPBufferConfig : NSObject
/// Configures various settings for the audio and video buffer.
@property (nonatomic, strong) BMPBufferMediaTypeConfig * _Nonnull audioAndVideo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("BufferMediaTypeConfig")
@interface BMPBufferMediaTypeConfig : NSObject
/// The amount of data in seconds the player tries to buffer in advance.
/// If set to 0, the player will choose an appropriate forward buffer duration suitable for most use-cases.
/// Default value is <code>0</code>.
@property (nonatomic) NSTimeInterval forwardDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CastAvailableEvent")
@interface BMPCastAvailableEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Specifies when cast devices discovery starts.
typedef SWIFT_ENUM_NAMED(NSInteger, BMPCastDeviceDiscoveryMode, "CastDeviceDiscoveryMode", open) {
/// Discovery will start when the <code>BitmovinCastManager.initializeCasting</code>
/// is called for the first time.
  BMPCastDeviceDiscoveryModeCastManagerInitialization = 0,
/// Discovery will start when the <code>GCKUICastButton</code> is tapped for the first time.
/// Only use this option when you use a custom UI with a <code>GCKUICastButton</code>.
/// Using this option with our Bitmovin Player UI will result in no cast button being visible.
  BMPCastDeviceDiscoveryModeCastButtonInteraction = 1,
};


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CastPausedEvent")
@interface BMPCastPausedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class holding information for the <code>CastWaitingForDeviceEvent</code>.
SWIFT_CLASS_NAMED("CastPayload") SWIFT_AVAILABILITY(tvos,unavailable)
@interface BMPCastPayload : NSObject
/// The <code>currentTime</code> of the player at which <code>CastWaitingForDeviceEvent</code> was emitted.
@property (nonatomic, readonly) NSTimeInterval currentTime;
/// The time at which this event was fired
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// The device name
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceName;
/// The type of the casting
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithDeviceName:(NSString * _Nonnull)deviceName currentTime:(NSTimeInterval)currentTime timestamp:(NSTimeInterval)timestamp OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CastPlaybackFinishedEvent")
@interface BMPCastPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CastPlayingEvent")
@interface BMPCastPlayingEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CastStartEvent")
@interface BMPCastStartEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CastStartedEvent")
@interface BMPCastStartedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDeviceName:(NSString * _Nonnull)deviceName OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CastStoppedEvent")
@interface BMPCastStoppedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CastTimeUpdatedEvent")
@interface BMPCastTimeUpdatedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval currentTime;
@property (nonatomic, readonly) NSTimeInterval duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithCurrentTime:(NSTimeInterval)currentTime duration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CastWaitingForDeviceEvent") SWIFT_AVAILABILITY(tvos,unavailable)
@interface BMPCastWaitingForDeviceEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) BMPCastPayload * _Nonnull castPayload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDeviceName:(NSString * _Nonnull)deviceName currentTime:(NSTimeInterval)currentTime OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end

@class NSUUID;

/// Base class for all DRM configs.
/// note:
/// This class acts as an abstract class.
SWIFT_CLASS_NAMED("DrmConfig")
@interface BMPDrmConfig : NSObject
/// The DRM license acquisition URL.
@property (nonatomic, copy) NSURL * _Nullable licenseUrl;
/// The UUID for the respective DRM system. Possible values are defined in <code>DrmSystems</code>.
@property (nonatomic, copy) NSUUID * _Nonnull uuid;
/// :nodoc:
- (nonnull instancetype)initWithLicenseUrl:(NSURL * _Nullable)licenseUrl uuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithUUID:(NSUUID * _Nonnull)uuid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPDecryptionKey;

/// Represents a ClearKey config.
SWIFT_CLASS_NAMED("ClearKeyConfig")
@interface BMPClearKeyConfig : BMPDrmConfig
/// An array of objects representing the decryption keys.
@property (nonatomic, copy) NSArray<BMPDecryptionKey *> * _Nonnull decryptionKeys;
/// Creates a new <code>ClearKeyConfig</code> based on the given decryption keys.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     decryptionKeys: The decryption keys to use for the ClearKey config.
///   </li>
/// </ul>
///
/// returns:
/// A ClearKey config which contains the given decryption keys for content decryption.
- (nonnull instancetype)initWithDecryptionKeys:(NSArray<BMPDecryptionKey *> * _Nonnull)decryptionKeys OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLicenseUrl:(NSURL * _Nullable)licenseUrl uuid:(NSUUID * _Nonnull)uuid SWIFT_UNAVAILABLE;
@end


@class BMPRemoteControlConfig;
@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfig * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfig (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfig * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("ContentDownloadCanceledEvent")
@protocol BMPContentDownloadCanceledEvent <BMPOfflineEvent>
@end


/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("ContentDownloadFinishedEvent")
@protocol BMPContentDownloadFinishedEvent <BMPOfflineEvent>
@end


/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("ContentDownloadProgressChangedEvent")
@protocol BMPContentDownloadProgressChangedEvent <BMPOfflineEvent>
/// Current percentage progress for the download, represented as a value between 0 and 100
@property (nonatomic, readonly) double progress;
@end


/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("ContentDownloadResumedEvent")
@protocol BMPContentDownloadResumedEvent <BMPOfflineEvent>
/// Current percentage progress for the download, represented as a value between 0 and 100
@property (nonatomic, readonly) double progress;
@end


/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("ContentDownloadSuspendedEvent")
@protocol BMPContentDownloadSuspendedEvent <BMPOfflineEvent>
@end


/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("ContentUrlMigrationFinishedEvent")
@protocol BMPContentUrlMigrationFinishedEvent <BMPOfflineEvent>
/// Original remote asset URL before the migration
@property (nonatomic, readonly, copy) NSURL * _Nonnull from;
/// Target remote asset URL for the migration
@property (nonatomic, readonly, copy) NSURL * _Nonnull to;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS_NAMED("ControlsHideEvent")
@interface BMPControlsHideEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS_NAMED("ControlsShowEvent")
@interface BMPControlsShowEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@class BMPCuePosition;
@class BMPVttProperties;

/// Describes a subtitle cue.
SWIFT_CLASS_NAMED("Cue")
@interface BMPCue : NSObject <NSCopying>
/// The start time of the cue in seconds
@property (nonatomic) NSTimeInterval startTime;
/// The end time of the cue in seconds
@property (nonatomic) NSTimeInterval endTime;
/// The cue text as HTML
@property (nonatomic, copy) NSString * _Nullable html;
/// The cue text
@property (nonatomic, copy) NSString * _Nullable text;
/// The cue image
@property (nonatomic, strong) UIImage * _Nullable image;
/// The position of the cue. Only relevant for CEA-captions, provides information about where the cue should be
/// positioned on a grid of 15 character rows times 32 columns
@property (nonatomic, strong) BMPCuePosition * _Nullable position;
/// The region of the cue
@property (nonatomic, copy) NSString * _Nullable region;
/// The region style of the cue
@property (nonatomic, copy) NSString * _Nullable regionStyle;
/// The vtt  positioning properties for this cue
@property (nonatomic, strong) BMPVttProperties * _Nullable vtt;
/// \param startTime The start time of the cue in seconds
///
/// \param endTime The end time of the cue in seconds
///
/// \param html The cue text as HTML
///
/// \param text The cue text
///
/// \param image The cue image
///
/// \param position The position of the cue. Only relevant for CEA captions
///
/// \param region The region of the cue
///
/// \param regionStyle The region style of the cue
///
/// \param vttProperties The vtt  positioning properties for this cue
///
///
/// returns:
/// A new subtitle cue
- (nonnull instancetype)initWithStartTime:(NSTimeInterval)startTime endTime:(NSTimeInterval)endTime html:(NSString * _Nullable)html text:(NSString * _Nullable)text image:(UIImage * _Nullable)image position:(BMPCuePosition * _Nullable)position region:(NSString * _Nullable)region regionStyle:(NSString * _Nullable)regionStyle vttProperties:(BMPVttProperties * _Nullable)vttProperties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithStartTime:(NSTimeInterval)startTime endTime:(NSTimeInterval)endTime html:(NSString * _Nullable)html text:(NSString * _Nullable)text image:(UIImage * _Nullable)image position:(BMPCuePosition * _Nullable)position region:(NSString * _Nullable)region regionStyle:(NSString * _Nullable)regionStyle;
- (nonnull instancetype)initWithStartTime:(NSTimeInterval)startTime endTime:(NSTimeInterval)endTime text:(NSString * _Nonnull)text;
- (nonnull instancetype)initWithStartTime:(NSTimeInterval)startTime endTime:(NSTimeInterval)endTime text:(NSString * _Nonnull)text vttProperties:(BMPVttProperties * _Nullable)vttProperties;
- (nonnull instancetype)initWithStartTime:(NSTimeInterval)startTime endTime:(NSTimeInterval)endTime html:(NSString * _Nonnull)html;
- (nonnull instancetype)initWithStartTime:(NSTimeInterval)startTime endTime:(NSTimeInterval)endTime image:(UIImage * _Nonnull)image;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("CueEvent")
@protocol BMPCueEvent
/// The start time of the cue in seconds
@property (nonatomic, readonly) NSTimeInterval startTime;
/// The end time of the cue in seconds
@property (nonatomic, readonly) NSTimeInterval endTime;
/// The cue text
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// The cue text as HTML
@property (nonatomic, readonly, copy) NSString * _Nullable html;
/// The cue image
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// The position of the cue. Only relevant for CEA-captions, provides information about where the cue should be
/// positioned on a grid of 15 character rows times 32 columns
@property (nonatomic, readonly, strong) BMPCuePosition * _Nullable position;
/// The region of the cue
@property (nonatomic, readonly, copy) NSString * _Nullable region;
/// The region style of the cue
@property (nonatomic, readonly, copy) NSString * _Nullable regionStyle;
/// The VTT positioning properties for this cue
@property (nonatomic, readonly, strong) BMPVttProperties * _Nullable vtt;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CueEnterEvent")
@interface BMPCueEnterEvent : BMPPlayerEvent <BMPCueEvent>
@property (nonatomic, readonly) NSTimeInterval startTime;
@property (nonatomic, readonly) NSTimeInterval endTime;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable html;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, strong) BMPCuePosition * _Nullable position;
@property (nonatomic, readonly, copy) NSString * _Nullable region;
@property (nonatomic, readonly, copy) NSString * _Nullable regionStyle;
@property (nonatomic, readonly, strong) BMPVttProperties * _Nullable vtt;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CueExitEvent")
@interface BMPCueExitEvent : BMPPlayerEvent <BMPCueEvent>
@property (nonatomic, readonly) NSTimeInterval startTime;
@property (nonatomic, readonly) NSTimeInterval endTime;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable html;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, strong) BMPCuePosition * _Nullable position;
@property (nonatomic, readonly, copy) NSString * _Nullable region;
@property (nonatomic, readonly, copy) NSString * _Nullable regionStyle;
@property (nonatomic, readonly, strong) BMPVttProperties * _Nullable vtt;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("CueParsedEvent")
@interface BMPCueParsedEvent : NSObject <BMPCueEvent, BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) NSTimeInterval startTime;
@property (nonatomic, readonly) NSTimeInterval endTime;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable html;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, strong) BMPCuePosition * _Nullable position;
@property (nonatomic, readonly, copy) NSString * _Nullable region;
@property (nonatomic, readonly, copy) NSString * _Nullable regionStyle;
@property (nonatomic, readonly, strong) BMPVttProperties * _Nullable vtt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPCueParsedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
/// :nodoc:
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// Positioning information for CEA captions
SWIFT_CLASS_NAMED("CuePosition")
@interface BMPCuePosition : NSObject
/// Index of the column ranging from 0 to 31
@property (nonatomic, readonly) NSInteger column;
/// Index of the row ranging from 0 to 14
@property (nonatomic, readonly) NSInteger row;
/// \param column Index of the column ranging from 0 to 31
///
/// \param row Index of the row ranging from 0 to 14
///
///
/// returns:
/// A new cue position
- (nonnull instancetype)initWithColumn:(NSInteger)column row:(NSInteger)row OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPCuePosition (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end

@protocol BMPCustomMessageHandlerDelegate;

/// This class handles all communication between the native environment
/// and the Bitmovin Web UI environment in one place.
SWIFT_CLASS_NAMED("CustomMessageHandler")
@interface BMPCustomMessageHandler : NSObject
/// Delegate to handle communication from Bitmovin Web UI to native.
@property (nonatomic, weak) id <BMPCustomMessageHandlerDelegate> _Nullable delegate;
/// Calls the registered callback within the NativeCommunicationHandler in the Bitmovin Web UI
/// \param message Identifier for the callback which should be called.
///
- (void)sendMessage:(NSString * _Nonnull)message;
/// Calls the registered callback within the NativeCommunicationHandler in the Bitmovin Web UI
/// \param message Identifier for the callback which should be called.
///
/// \param data Payload for the callback.
///
- (void)sendMessage:(NSString * _Nonnull)message withData:(NSString * _Nullable)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Methods for handling received messages from Bitmovin Web UI.
SWIFT_PROTOCOL_NAMED("CustomMessageHandlerDelegate")
@protocol BMPCustomMessageHandlerDelegate
/// Gets called when a synchronous message was received from the Bitmovin Web UI.
/// \param message Identifier of the message.
///
/// \param data Optional data of the message as string (can be a serialized object).
///
///
/// returns:
/// Optional return value as string which will be propagates back to the JS counterpart.
- (NSString * _Nullable)receivedSynchronousMessage:(NSString * _Nonnull)message withData:(NSString * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
/// Gets called when a asynchronous message was received from the Bitmovin Web UI.
/// \param message Identifier of the message.
///
/// \param data Optional data of the message as string (can be a serialized object).
///
- (void)receivedAsynchronousMessage:(NSString * _Nonnull)message withData:(NSString * _Nullable)data;
@end

@class NSDate;

/// Represents in-playlist timed metadata.
SWIFT_CLASS_NAMED("DaterangeMetadata")
@interface BMPDaterangeMetadata : BMPMetadata
/// The unique identifier for the metadata.
/// Maps to the ‘ID’ property of the ‘EXT-X-DATERANGE’ spec.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The class associated with the metadata.
/// Maps to the ‘CLASS’ property of the ‘EXT-X-DATERANGE’ spec.
@property (nonatomic, readonly, copy) NSString * _Nullable classLabel;
/// The start date of the date range.
@property (nonatomic, readonly, copy) NSDate * _Nonnull startDate;
/// The end date of the date range. If the receiver is intended to represent information about an
/// instantaneous event, the value of <code>endDate</code> should be equal to the value of <code>startDate</code>.
/// A value of <code>nil</code> for <code>endDate</code> indicates that the <code>endDate</code> is indefinite.
@property (nonatomic, readonly, copy) NSDate * _Nullable endDate;
/// Initializes an instance of <code>DaterangeMetadata</code> with a collection of metadata entries.
/// \param entries An <code>Array</code> of <code>MetadataEntry</code> objects.
///
/// \param identifier The unique identifier for the metadata.
///
/// \param classLabel The class associated with the metadata.
///
/// \param startDate The start date of the date range.
///
/// \param endDate The end date of the date range. If the receiver is intended to represent information about an
/// instantaneous event, the value of <code>endDate</code> should be equal to the value of <code>startDate</code>.
/// A value of <code>nil</code> for <code>endDate</code> indicates that the <code>endDate</code> is indefinite.
///
- (nonnull instancetype)initWithEntries:(NSArray<id <BMPMetadataEntry>> * _Nonnull)entries identifier:(NSString * _Nonnull)identifier classLabel:(NSString * _Nullable)classLabel start:(NSDate * _Nonnull)startDate end:(NSDate * _Nullable)endDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntries:(NSArray<id <BMPMetadataEntry>> * _Nonnull)entries SWIFT_UNAVAILABLE;
@end



/// Represents a decryption key for a ClearKey DRM config
SWIFT_CLASS_NAMED("DecryptionKey")
@interface BMPDecryptionKey : NSObject <NSCopying>
/// The key identifier for the decryption key in hex string format.
@property (nonatomic, copy) NSString * _Nullable kid;
/// The decryption key in hex string format.
@property (nonatomic, copy) NSString * _Nonnull key;
/// Creates a new <code>DecryptionKey</code> based on the given key identifier (KID) and key.
/// \param kid The key identifier in hex string format.
///
/// \param key The decryption key in hex string format.
///
///
/// returns:
/// A new decryption key initialized with KID and key.
- (nonnull instancetype)initWithKid:(NSString * _Nullable)kid key:(NSString * _Nonnull)key OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface BMPDecryptionKey (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

/// Provides additional data about a deficiency
SWIFT_CLASS_NAMED("DeficiencyData")
@interface BMPDeficiencyData : NSObject
@property (nonatomic, readonly) NSInteger code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) NSError * _Nullable underlyingError;
- (nonnull instancetype)initWithCode:(NSInteger)code message:(NSString * _Nonnull)message underlyingError:(NSError * _Nullable)underlyingError OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPDeficiencyData (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;
@class BMPDownloadTweaksConfig;

/// Contains config options which can be used to alter the default behaviour of content downloads.
SWIFT_CLASS_NAMED("DownloadConfig")
@interface BMPDownloadConfig : NSObject
/// The lowest media bitrate greater than or equal to this value in bps will be selected for
/// download. If no suitable media bitrate is found or if set to <code>nil</code>, the highest media bitrate will be selected.
@property (nonatomic, strong) NSNumber * _Nullable minimumBitrate;
/// Indicates whether to scan for ClearKey decryption keys and store them for offline playback.
/// Default: <code>false</code>
/// To prevent issues with playback of offline content, make sure that the <code>EXT-X-PLAYLIST-TYPE:VOD</code> tag is
/// present in all variant playlists.
@property (nonatomic) BOOL supportClearKeyContent;
/// Contains tweaks which can be used to alter the default behaviour of a source download.
/// When using one of the tweaks, be aware that they could be removed or changed in behaviour even
/// with minor version updates of the Bitmovin Player SDK. Such changes will be stated in the release
/// notes.
@property (nonatomic, strong) BMPDownloadTweaksConfig * _Nonnull tweaksConfig;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) BMPHttpRequestType _Nonnull requestType;
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType SWIFT_DEPRECATED_MSG("Use requestType instead");
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
- (nonnull instancetype)initWithRequestType:(BMPHttpRequestType _Nonnull)requestType url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end


/// This config is used as an incubator for experimental features.
/// Tweaks are not officially supported and are not guaranteed to be stable, i.e.
/// their naming, functionality and API can change at any time within the tweaks
/// or when being promoted to an official feature and moved into its final
/// config namespace.
SWIFT_CLASS_NAMED("DownloadTweaksConfig")
@interface BMPDownloadTweaksConfig : NSObject
/// If enabled, tag <code>EXT-X-PLAYLIST-TYPE:VOD</code> will be inserted into downloaded playlists if <code>EXT-X-PLAYLIST-TYPE</code>
/// is missing.
/// Default: <code>false</code>
@property (nonatomic) BOOL shouldInsertPlaylistTypeTagIfMissing;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class NSData;
enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// The ‘DrmData’ representing the parsed DRM information.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
@end


/// Holds DRM licence information
SWIFT_CLASS_NAMED("DrmLicenseInformation")
@interface BMPDrmLicenseInformation : NSObject
/// The duration in seconds how long this DRM license is valid.
@property (nonatomic, readonly) NSTimeInterval licenseDuration;
/// The duration in seconds how long this DRM license is valid after playback was started for the first time.
@property (nonatomic, readonly) NSTimeInterval playbackDuration;
/// :nodoc:
- (nonnull instancetype)initWithLicenseDuration:(NSTimeInterval)licenseDuration playbackDuration:(NSTimeInterval)playbackDuration;
/// Returns the remaining license duration in seconds
///
/// returns:
/// The remaining license duration in seconds.
- (NSTimeInterval)remainingLicenseDuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// Provides access to DRM scheme UUIDs.
SWIFT_CLASS_NAMED("DrmSystems")
@interface BMPDrmSystems : NSObject
/// UUID for FairPlay Streaming protection system
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSUUID * _Nonnull fairplayUUID;)
+ (NSUUID * _Nonnull)fairplayUUID SWIFT_WARN_UNUSED_RESULT;
/// UUID for Widevine protection system
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSUUID * _Nonnull widevineUUID;)
+ (NSUUID * _Nonnull)widevineUUID SWIFT_WARN_UNUSED_RESULT;
/// UUID for PlayReady protection system
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSUUID * _Nonnull playReadyUUID;)
+ (NSUUID * _Nonnull)playReadyUUID SWIFT_WARN_UNUSED_RESULT;
/// UUID for ClearKey protection system
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSUUID * _Nonnull clearKeyUUID;)
+ (NSUUID * _Nonnull)clearKeyUUID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) NSTimeInterval duration;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration timestamp:(NSTimeInterval)timestamp OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPDurationChangedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("DvrWindowExceededEvent")
@interface BMPDvrWindowExceededEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Represents a FairPlay Streaming DRM config.
SWIFT_CLASS_NAMED("FairplayConfig")
@interface BMPFairplayConfig : BMPDrmConfig
/// The URL to the FairPlay Streaming certificate of the license server.
@property (nonatomic, copy) NSURL * _Nullable certificateUrl;
/// A dictionary to specify custom HTTP headers for the license request.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable licenseRequestHeaders;
/// A dictionary to specify custom HTTP headers for the certificate request.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable certificateRequestHeaders;
/// A block to prepare the data which is sent as the body of the POST license request. As many DRM providers
/// expect different, vendor-specific messages, this can be done using this user-defined block.
@property (nonatomic, copy) NSData * _Nonnull (^ _Nullable prepareMessage)(NSData * _Nonnull, NSString * _Nonnull);
/// A block to prepare the contentId, which is sent to the FairPlay Streaming license server as request body,
/// and which is used to build the SPC data. As many DRM providers expect different, vendor-specific messages, this
/// can be done using this user-defined block. The parameter is the skd:// URI extracted from the HLS manifest
/// (m3u8) and the return value should be the contentID as string.
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable prepareContentId)(NSString * _Nonnull);
/// A block to prepare the loaded certificate before building SPC data and passing it into the system. This is
/// needed if the server responds with anything else than the certificate, e.g. if the certificate is wrapped into a
/// JSON object. The server response for the certificate request is passed as parameter “as is”.
@property (nonatomic, copy) NSData * _Nonnull (^ _Nullable prepareCertificate)(NSData * _Nonnull);
/// A block to prepare the loaded CKC Data before passing it to the system. This is needed if the server responds
/// with anything else than the license, e.g. if the license is wrapped into a JSON object.
@property (nonatomic, copy) NSData * _Nonnull (^ _Nullable prepareLicense)(NSData * _Nonnull);
/// A block to prepare the URI (without the <code>skd://</code>) from the HLS manifest before passing it to the system.
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable prepareLicenseServerUrl)(NSString * _Nonnull);
/// A block to prepare the loaded CKC data received by the Sync SPC call to the respective Key Security Module
/// (KSM). This data may contain information about the expiration dates of a DRM license.
@property (nonatomic, copy) BMPDrmLicenseInformation * _Nonnull (^ _Nullable prepareOfflineDrmLicenseInformation)(NSData * _Nonnull);
/// A block to prepare the data which is sent as the body of the POST request for syncing the DRM license
/// information.
@property (nonatomic, copy) NSData * _Nonnull (^ _Nullable prepareSyncMessage)(NSData * _Nonnull, NSString * _Nonnull);
/// A block to provide the license for the given <code>assetId</code>.
/// This should only be used when the license is stored locally.
/// If the block returns <code>nil</code> we will try to fetch the license using the available information in the same
/// <code>FairplayConfig</code> instance. If no <code>certificateUrl</code> is present at this point we will emit a <code>SourceErrorEvent</code>.
/// Use this block for the following use-cases:
/// important:
/// In both use-cases, it’s required that the license is persistable on the device. Playback will fail
/// otherwise.
/// <ul>
///   <li>
///     License caching during playback or for future playback sessions.
///   </li>
///   <li>
///     Providing the license for an already locally available content which can be provided using the
///     <code>SourceType.movpkg</code>
///   </li>
/// </ul>
/// If the provided license is expired playback will fail. License duration handling has to be handled by the
/// application.
@property (nonatomic, copy) NSData * _Nullable (^ _Nullable provideLicenseData)(NSString * _Nonnull) SWIFT_AVAILABILITY(tvos,unavailable);
/// A block to enable custom persisting of license data for the given <code>assetId</code>.
/// Use this block for the following use-cases:
/// important:
/// In both use-cases, it’s required that the license is persistable on the device. Playback will fail
/// otherwise.
/// <ul>
///   <li>
///     To store the license data locally for future playback sessions.
///   </li>
///   <li>
///     To update the license during a playback session if the license requires updating.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable persistLicenseData)(NSString * _Nonnull, NSData * _Nonnull) SWIFT_AVAILABILITY(tvos,unavailable);
/// Creates a new FairPlay Streaming config based on the given license URL and certificate URL.
/// \param licenseUrl The URL to the license server.
///
/// \param certificateURL The URL to the FairPlay Streaming certificate of the license server.
///
///
/// returns:
/// A new FairPlay Streaming config initialized with the given licenseURL and certificateURL.
- (nonnull instancetype)initWithLicenseUrl:(NSURL * _Nullable)licenseUrl certificateURL:(NSURL * _Nonnull)certificateURL OBJC_DESIGNATED_INITIALIZER;
/// Creates a new FairPlay Streaming config based on the given certificate URL.
/// \param certificateUrl The URL to the FairPlay Streaming certificate of the license server.
///
///
/// returns:
/// A new FairPlay Streaming config initialized with the given certificateURL. The license URL defaults
/// to nil.
- (nonnull instancetype)initWithCertificateURL:(NSURL * _Nonnull)certificateUrl;
/// Creates a new FairPlay Streaming config based on the given <code>provideLicenseData</code> callback.
/// important:
/// It’s required that the license is persistable on the device. Playback will fail otherwise.
/// \param provideLicenseDataCallback A block to provide the license for the given <code>assetId</code>.
///
///
/// returns:
/// A new FairPlay Streaming config initialized with the given provideLicenseData callback. The license
/// and certificate URL are defaulting to nil.
- (nonnull instancetype)initWithProvideLicenseDataCallback:(NSData * _Nullable (^ _Nonnull)(NSString * _Nonnull))provideLicenseDataCallback OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(tvos,unavailable);
- (nonnull instancetype)initWithLicenseUrl:(NSURL * _Nullable)licenseUrl uuid:(NSUUID * _Nonnull)uuid SWIFT_UNAVAILABLE;
@end



@interface NSFileManager (SWIFT_EXTENSION(BitmovinPlayer))
- (NSArray<NSString *> * _Nonnull)_bmp_findPlaylistsAtContentLocation:(NSURL * _Nonnull)contentLocation SWIFT_WARN_UNUSED_RESULT;
@end



/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS_NAMED("FullscreenDisabledEvent")
@interface BMPFullscreenDisabledEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS_NAMED("FullscreenEnabledEvent")
@interface BMPFullscreenEnabledEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FullscreenEnterEvent")
@interface BMPFullscreenEnterEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FullscreenExitEvent")
@interface BMPFullscreenExitEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>FullscreenHandler</code> implementation can be set on a <code>PlayerView</code> using its <code>fullscreenHandler</code> property.
/// The <code>FullscreenHandler</code> acts as a delegate for handling the fullscreen related behaviour of the player view.
SWIFT_PROTOCOL_NAMED("FullscreenHandler")
@protocol BMPFullscreenHandler <NSObject>
/// Is called when the UI want’s to know the current fullscreen state of the UI.
/// Must return true if the UI is in fullscreen, otherwise false.
@property (nonatomic, readonly) BOOL isFullscreen;
/// Is called when the UI want’s to enter fullscreen. This can be the result of either calling <code>enterFullscreen</code>
/// on a <code>PlayerView</code> or tapping the fullscreen button in Bitmovin’s default UI. When a call to
/// <code>onFullscreenRequested</code> was successful, <code>FullscreenHandler#isFullscreen</code> must return
/// true after the method returned.
- (void)onFullscreenRequested;
/// Is called when the UI want’s to exit fullscreen. This can be the result of either calling <code>exitFullscreen</code> on a
/// <code>PlayerView</code> or tapping the fullscreen button in Bitmovin’s default UI. When a call to
/// <code>onFullscreenExitRequested</code> was successful, <code>FullscreenHandler#isFullscreen</code>
/// must return false after the method returned.
- (void)onFullscreenExitRequested;
@end


/// Represents an HTTP response.
SWIFT_CLASS_NAMED("HttpResponse")
@interface BMPHttpResponse : NSObject
/// Corresponding HTTP request object of the response.
@property (nonatomic, readonly, strong) BMPHttpRequest * _Nonnull request;
/// URL of the actual request. May differ from <code>request.url</code> when redirects have happened.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// HTTP status code of the response.
@property (nonatomic, readonly) NSInteger status;
/// HTTP headers of the response.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
/// HTTP response body.
@property (nonatomic, readonly, copy) NSData * _Nullable body;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines the IMA Ad attribution UI mode
SWIFT_CLASS_NAMED("ImaAdAttributionUiMode") SWIFT_AVAILABILITY(tvos,unavailable)
@interface BMPImaAdAttributionUiMode : NSObject
/// Default Google IMA SDK behavior, this might change between IMA SDK releases.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BMPImaAdAttributionUiMode * _Nonnull imaDefault;)
+ (BMPImaAdAttributionUiMode * _Nonnull)imaDefault SWIFT_WARN_UNUSED_RESULT;
/// No attribution element displayed
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BMPImaAdAttributionUiMode * _Nonnull noAttribution;)
+ (BMPImaAdAttributionUiMode * _Nonnull)noAttribution SWIFT_WARN_UNUSED_RESULT;
/// Attribution element displayed with optional Countdown element
+ (BMPImaAdAttributionUiMode * _Nonnull)attributionWithCountdown:(BOOL)countdown SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL _isDefault;
@property (nonatomic, readonly) BOOL _showAttribution;
@property (nonatomic, readonly) BOOL _showCountdown;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ImaAdsManager</code> protocol can be used to interact with the underlying Google IMA SDK during ad playback
SWIFT_PROTOCOL_NAMED("ImaAdsManager")
@protocol BMPImaAdsManager
/// List of content time offsets at which ad breaks are scheduled.
/// Array of values in seconds.
/// Empty <code>Array</code> for single ads or if no ad breaks are scheduled.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull adCuePoints;
/// If an ad break is currently playing, discard it and resume content.
/// Otherwise, ignore the next scheduled ad break.
- (void)discardAdBreak;
@end


/// Contains configuration options to customize behavior for Google IMA SDK.
SWIFT_CLASS_NAMED("ImaAdvertisingConfig")
@interface BMPImaAdvertisingConfig : NSObject
/// Defines ad attribution UI element (e.g. “Ad”) display mode.
/// This property may be ignored for AdSense/AdX ads. For valid values, see <code>ImaAdAttributionUiMode</code>.
/// Default value is <code>ImaAdAttributionUiMode.imaDefault</code>
/// important:
/// This field is ignored on tvOS, where UI elements are unavailable.
@property (nonatomic, strong) BMPImaAdAttributionUiMode * _Nonnull adAttributionUiMode SWIFT_AVAILABILITY(tvos,unavailable);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The ImaSettings class stores SDK wide settings.
SWIFT_CLASS_NAMED("ImaSettings")
@interface BMPImaSettings : NSObject <NSCopying>
/// Publisher Provided Identification (PPID) sent with ads request.
@property (nonatomic, copy) NSString * _Nullable ppid;
/// Language specification used for localization. Language must be formatted as
/// a canonicalized IETF BCP 47 language identifier such as would be returned by
/// <code>Locale.preferredLanguages</code>. Setting this property after it has been sent
/// to the IMAAdsLoader will be ignored and a warning will be logged.
@property (nonatomic, copy) NSString * _Nonnull language;
/// Specifies maximum number of redirects after which subsequent redirects will
/// be denied, and the ad load aborted. The number of redirects directly affects
/// latency and thus user experience. This applies to all VAST wrapper ads.
/// If the number of redirects exceeds |maxRedirects|, the ad request will fail with
/// error code 302. The default value is 4.
@property (nonatomic) NSUInteger maxRedirects;
/// Enable background audio playback for the SDK. The default value is <code>false</code>.
@property (nonatomic) BOOL enableBackgroundPlayback;
/// Specifies whether to update the <code>MPNowPlayingInfoCenter</code> content with the
/// title “Advertisement”. If disabled, <code>MPNowPlayingInfoCenter</code> is untouched.
/// The default value is <code>false</code>.
@property (nonatomic) BOOL disableNowPlayingInfo;
/// The partner specified player version that is integrating with the SDK.
@property (nonatomic, copy) NSString * _Nullable playerVersion;
/// The session ID to identify a single user session. This should be a UUID.
/// It is used exclusively for frequency capping across the user session.
@property (nonatomic, copy) NSString * _Nullable sessionId;
/// Controls whether Same App Key is enabled. The value set persists across app sessions.
/// The key is enabled by default. This property is not available on tvOS.
@property (nonatomic) BOOL sameAppKeyEnabled SWIFT_AVAILABILITY(tvos,unavailable);
/// :nodoc:
+ (BMPImaSettings * _Nonnull)_createWithPpid:(NSString * _Nullable)ppid language:(NSString * _Nonnull)language maxRedirects:(NSUInteger)maxRedirects enableBackgroundPlayback:(BOOL)enableBackgroundPlayback disableNowPlayingInfo:(BOOL)disableNowPlayingInfo playerVersion:(NSString * _Nullable)playerVersion sessionId:(NSString * _Nullable)sessionId sameAppKeyEnabled:(BOOL)sameAppKeyEnabled SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,unavailable);
/// :nodoc:
+ (BMPImaSettings * _Nonnull)_createWithPpid:(NSString * _Nullable)ppid language:(NSString * _Nonnull)language maxRedirects:(NSUInteger)maxRedirects enableBackgroundPlayback:(BOOL)enableBackgroundPlayback disableNowPlayingInfo:(BOOL)disableNowPlayingInfo playerVersion:(NSString * _Nullable)playerVersion sessionId:(NSString * _Nullable)sessionId SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(tvos,introduced=12) SWIFT_AVAILABILITY(ios,unavailable);
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPSubtitleTrack;

/// Provides the possibility to overwrite the labels which are automatically
/// assigned for different types of tracks.
SWIFT_CLASS_NAMED("LabelingConfig")
@interface BMPLabelingConfig : NSObject
/// An optional block which gets a <code>SubtitleTrack</code> as parameter and returns the desired label
/// which should be used for that track.
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable subtitleLabel)(BMPSubtitleTrack * _Nonnull);
/// An optional block which gets a <code>AudioTrack</code> as parameter and returns the desired label
/// which should be used for that track.
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable audioLabel)(BMPAudioTrack * _Nonnull);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Contains config values regarding the behaviour when playing live streams.
SWIFT_CLASS_NAMED("LiveConfig")
@interface BMPLiveConfig : NSObject
/// The minimum buffer depth of a stream needed to enable time shifting.
/// When the internal value for the maximal possible timeshift is lower than this value, timeshifting should be
/// disabled. That means Player.maxTimeShift returns 0 in that case.
/// This value should always be non-positive value, default value is -40
@property (nonatomic) NSTimeInterval minTimeshiftBufferDepth;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Contains the different loading states a <code>Source</code> can be in.
typedef SWIFT_ENUM_NAMED(NSInteger, BMPLoadingState, "LoadingState", open) {
/// The source is unloaded.
  BMPLoadingStateUnloaded = 0,
/// The source is currently loading.
  BMPLoadingStateLoading = 1,
/// The source is loaded.
  BMPLoadingStateLoaded = 2,
};



/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("MetadataEvent")
@interface BMPMetadataEvent : BMPPlayerEvent
/// The type of the associated Metadata
@property (nonatomic, readonly) enum BMPMetadataType metadataType;
/// The metadata object
/// To get the typed metadata object use a cast like:
/// \code
/// switch event.metadata {
/// case let metadata as DaterangeMetadata:
///     // Daterange Metadata
/// case let metadata as Id3Metadata:
///     // ID3 Metadata
/// case let metadata as ScteMetadata:
///     // Scte Metadata
/// }
///
/// \endcodePossible types are:
/// <ul>
///   <li>
///     <code>DaterangeMetadata</code>
///   </li>
///   <li>
///     <code>ScteMetadata</code>
///   </li>
///   <li>
///     <code>Id3Metadata</code>
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) BMPMetadata * _Nonnull metadata;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithMetadata:(BMPMetadata * _Nonnull)metadata type:(enum BMPMetadataType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("MetadataParsedEvent")
@interface BMPMetadataParsedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The type of the associated Metadata
@property (nonatomic, readonly) enum BMPMetadataType metadataType;
/// The metadata object
/// To get the typed metadata object use a cast like:
/// \code
/// switch event.metadata {
/// case let metadata as DaterangeMetadata:
///     // Daterange Metadata
/// case let metadata as Id3Metadata:
///     // ID3 Metadata
/// case let metadata as ScteMetadata:
///     // Scte Metadata
/// }
///
/// \endcodePossible types are:
/// <ul>
///   <li>
///     <code>DaterangeMetadata</code>
///   </li>
///   <li>
///     <code>ScteMetadata</code>
///   </li>
///   <li>
///     <code>Id3Metadata</code>
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) BMPMetadata * _Nonnull metadata;
- (nonnull instancetype)initWithMetadata:(BMPMetadata * _Nonnull)metadata type:(enum BMPMetadataType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPMetadataType, "MetadataType", open) {
  BMPMetadataTypeNone = 0,
  BMPMetadataTypeID3 = 1,
  BMPMetadataTypeEMSG = 2,
  BMPMetadataTypeDaterange = 3,
  BMPMetadataTypeScte = 4,
};


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("MutedEvent")
@interface BMPMutedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSString (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, strong) NSString * _Nonnull bmp_md5;
@end




enum BMPSourceType : NSInteger;

@interface NSURL (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) BOOL _bmp_isHlsUrl;
@property (nonatomic, readonly) BOOL _bmp_isProgressiveUrl;
@property (nonatomic, readonly) BOOL _bmp_isDashUrl;
@property (nonatomic, readonly) BOOL _bmp_isMovpkgUrl;
@property (nonatomic, readonly) enum BMPSourceType _bmp_sourceType;
@end


@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end

@protocol BMPPreprocessHttpRequestDelegate;

/// The network config gives the ability to influence network requests.
/// At the moment only changing DRM and HLS Playlist requests are supported.
/// Processing responses or influencing the retry behaviour is not supported.
SWIFT_CLASS_NAMED("NetworkConfig")
@interface BMPNetworkConfig : NSObject
/// Called before a HTTP request is made.
/// Only changing DRM and HLS Playlist requests are currently supported.
@property (nonatomic, weak) id <BMPPreprocessHttpRequestDelegate> _Nullable preprocessHttpRequestDelegate;
/// Called when an HLS playlist request has failed. Will override the default retry behaviour.
/// If a custom <code>retryHttpRequest</code> handler is set, no internal retry handling is done at all. The custom handler
/// needs to take care of all retries. Some things to consider when implementing an own handler are:
/// <ul>
///   <li>
///     Make sure to have a maximum number of allowed retries to not retry unreasonable amount of times.
///   </li>
///   <li>
///     There is an underlying <code>AVFoundation</code> limit of about 20 seconds for doing retries. If a failed request is not
///     retried successfully within that time, there will be an error. Within that time frame, the amount of
///     retries that can be done is unlimited.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable retryHttpRequest)(BMPHttpRequestType _Nonnull, NSInteger, BMPHttpResponse * _Nonnull, void (^ _Nonnull)(NSTimeInterval, BMPHttpRequest * _Nonnull), void (^ _Nonnull)(void));
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BMPOfflineTrackAction : NSInteger;

/// Superclass of tracks which can be selected to download for offline playback
SWIFT_CLASS_NAMED("OfflineTrack")
@interface BMPOfflineTrack : NSObject
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum BMPOfflineTrackAction _defaultAction;)
+ (enum BMPOfflineTrackAction)_defaultAction SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull _identifier;
/// Represents the action for this OfflineTrack. See <code>OfflineTrackAction</code> for available values.
@property (nonatomic) enum BMPOfflineTrackAction action;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("OfflineAudioTrack")
@interface BMPOfflineAudioTrack : BMPOfflineTrack
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum BMPOfflineTrackAction _defaultAction;)
+ (enum BMPOfflineTrackAction)_defaultAction SWIFT_WARN_UNUSED_RESULT;
/// The label for this track.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// The IETF BCP 47 language tag associated with the text track.
@property (nonatomic, readonly, copy) NSString * _Nullable language;
/// If set to <code>true</code>, this track would be considered as default,
/// i.e. it will be enabled automatically once the source has loaded.
@property (nonatomic, readonly) BOOL isDefault;
/// :nodoc:
+ (BMPOfflineAudioTrack * _Nonnull)_createWithIdentifier:(NSString * _Nonnull)identifier label:(NSString * _Nonnull)label language:(NSString * _Nonnull)language isDefault:(BOOL)isDefault SWIFT_WARN_UNUSED_RESULT;
@end


/// Configures the offline functionality
SWIFT_CLASS_NAMED("OfflineConfig")
@interface BMPOfflineConfig : NSObject
/// Specifies if an active WiFi connection is required for downloading media for offline playback
/// Default value is <code>false</code>
@property (nonatomic, readonly) BOOL restrictMediaDownloadsToWiFi;
- (nonnull instancetype)init;
/// Initialize a new OfflineConfig instance.
/// \param restrictMediaDownloadsToWiFi specifies if an active WiFi connection is required
/// for downloading media for offline playback.
///
- (nonnull instancetype)initWithRestrictMediaDownloadsToWiFi:(BOOL)restrictMediaDownloadsToWiFi OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("OfflineContentLicenseExpiredEvent")
@protocol BMPOfflineContentLicenseExpiredEvent <BMPOfflineEvent>
@end


/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("OfflineContentLicenseRenewedEvent")
@protocol BMPOfflineContentLicenseRenewedEvent <BMPOfflineEvent>
@end

@protocol BMPOfflineErrorEvent;
@protocol BMPOfflineContentManager;

/// Protocol for listeners for the <code>OfflineContentManager</code>.
SWIFT_PROTOCOL_NAMED("OfflineContentManagerListener")
@protocol BMPOfflineContentManagerListener <NSObject>
@optional
/// Is called when the download of the media content failed. Downloaded content may have been stored to disk.
/// It is possible to retry the download by first checking the state of the source config
/// using <code>OfflineContentManager.offlineState</code> and then taking one of the actions allowed in
/// the current state as documented in OfflineContentManager.h
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onOfflineError:(id <BMPOfflineErrorEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called when the download of the media content was successful.
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onContentDownloadFinished:(id <BMPContentDownloadFinishedEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called when the download of the media content progressed to a new percentage value.
/// The method is only called when the according <code>SourceConfig</code> is in state <code>OfflineStateDownloading</code>.
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onContentDownloadProgressChanged:(id <BMPContentDownloadProgressChangedEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called when the download of the media content was suspended. This could be the result of a call to
/// <code>OfflineContentManager.suspendDownload()</code> or if the app was terminated by the user while downloads were running.
/// In the latter case, this listener method is called upon first application startup after termination.
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onContentDownloadSuspended:(id <BMPContentDownloadSuspendedEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called when the download of the media content was resumed after it was suspended.
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onContentDownloadResumed:(id <BMPContentDownloadResumedEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called when the download of the media content was cancelled by the user
/// and all partially downloaded content has been deleted from disk.
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onContentDownloadCanceled:(id <BMPContentDownloadCanceledEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called when the offline license was successfully renewed and written to disk.
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onOfflineContentLicenseRenewed:(id <BMPOfflineContentLicenseRenewedEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called on every call to <code>OfflineContentManager.createOfflineSourceConfig(restrictedToAssetCache:)</code>
/// if it is DRM protected
/// and the offline DRM license has expired.
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onOfflineContentLicenseExpired:(id <BMPOfflineContentLicenseExpiredEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called when information on available tracks is available.
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onAvailableTracksFetched:(id <BMPAvailableTracksFetchedEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called when content migration triggered via
/// <code>OfflineContentManager.tweaks.migrateDownload(remoteAssetUrl:resourceIdentifierCallback:)</code> has finished.
/// \param event An object holding specific event data.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event
///
- (void)onContentUrlMigrationFinished:(id <BMPContentUrlMigrationFinishedEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
/// Is called for each occurring offline event.
/// \param event The offline event. Use <code>event.name</code> or <code>event.isKind(of:)</code> to check the specific event type.
///
/// \param offlineContentManager The <code>OfflineContentManager</code> which is associated with the emitted event.
///
- (void)onEvent:(id <BMPOfflineEvent> _Nonnull)event offlineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager;
@end


/// This API is used as an incubator for experimental features.
/// Tweaks are not officially supported and are not guaranteed to be stable, i.e.
/// their naming, functionality and API can change at any time within the tweaks
/// or when being promoted to an official feature and moved into its final
/// configuration namespace.
SWIFT_PROTOCOL_NAMED("OfflineContentManagerTweaksApi")
@protocol BMPOfflineContentManagerTweaksApi
/// Migrates <code>OfflineContentManager</code> to use a new remote asset URL for downloads.
/// Affects completed, ongoing and future downloads.
/// A <code>ContentUrlMigrationFinishedEvent</code> will be emitted once the migration has finished
/// or an <code>OfflineErrorEvent</code> in case of any error.
/// Calling this method when content is not downloaded affects future downloads
/// and results in <code>ContentUrlMigrationFinishedEvent</code> being emitted.
/// Resuming download after migration will continue using the new remote asset URL.
/// In case the download is in-progress at the time this method is called, it will be suspended.
/// Suspension just happens if a <code>remoteAssetUrl</code> other than the currently downloading one is passed.
/// Passing the same <code>remoteAssetUrl</code> as the one which is currently used, does not have any effect.
/// Suspended downloads have to be resumed explicitly.
/// Subsequent downloads will use the URL provided here.
/// note:
/// <code>id</code> parameter must be passed to <code>OfflineManager.offlineContentManager</code>
/// in order to enable this feature. Using it without may result in unexpected behavior.
/// \param remoteAssetUrl new remote asset URL for the download
///
/// \param resourceIdentifierCallback A callback used to provide an identifier for a resource located at a given URL.
/// Resource in this case refers to all downloaded objects of the source, including e.g. the manifest or segments.
/// The returned identifier has to be unique within the current source and must not change throughout
/// the lifecycle of the downloaded content.
/// This callback has to be provided to ensure resources stay available even if the URL of the asset
/// and URLs within the manifest of the asset change.
///
- (void)migrateDownloadWithRemoteAssetUrl:(NSURL * _Nonnull)remoteAssetUrl resourceIdentifierCallback:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))resourceIdentifierCallback;
@end


/// See <code>OfflineContentManagerListener</code> for more information on this event.
SWIFT_PROTOCOL_NAMED("OfflineErrorEvent")
@protocol BMPOfflineErrorEvent <BMPOfflineEvent>
/// Code for the error
@property (nonatomic, readonly) enum BMPOfflineErrorCode code;
/// Message associated with the error event
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Additional deficiency data if any
@property (nonatomic, readonly, strong) BMPDeficiencyData * _Nullable data;
@end


@class BMPOfflineManager;

/// Protocol for delegate for the OfflineManager.
SWIFT_PROTOCOL_NAMED("OfflineManagerDelegate")
@protocol BMPOfflineManagerDelegate <NSObject>
@optional
/// Is called when the <code>OfflineManager</code> finishes restoring all suspended downloads.
/// Restoring is triggered when initializing the <code>OfflineManager</code> in case some downloads are still pending.
/// warning:
/// Any <code>resume</code> or <code>cancel</code> actions triggered before this method gets called are not
/// guaranteed and might result in unexpected behaviour.
/// \param offlineManager The <code>OfflineManager</code> calling the delegate.
///
- (void)offlineManagerDidRestoreSuspendedDownloads:(BMPOfflineManager * _Nonnull)offlineManager;
@end


/// Protocol for listeners for the OfflineManager.
SWIFT_PROTOCOL_NAMED("OfflineManagerListener") SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener instead")
@protocol BMPOfflineManagerListener <NSObject>
@optional
/// Is called when the download of the media content failed. Downloaded content may have been stored to disk.
/// It is possible to retry the download by first checking the state of the source config
/// using <code>OfflineManager.offlineState(for:)</code> and then taking one of the actions allowed in
/// the current state as documented in OfflineManager.h
/// \param offlineManager The <code>OfflineManager</code> calling the listener.
///
/// \param error An optional error object describing the cause of the failure.
///
- (void)offlineManager:(BMPOfflineManager * _Nonnull)offlineManager didFailWithError:(NSError * _Nullable)error SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener.onOfflineError(_:offlineContentManager:) instead");
/// Is called when the download of the media content was successful.
/// \param offlineManager The <code>OfflineManager</code> calling the listener.
///
- (void)offlineManagerDidFinishDownload:(BMPOfflineManager * _Nonnull)offlineManager SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener.onContentDownloadFinished(_:offlineContentManager:) instead");
/// Is called when the download of the media content progressed to a new percentage value.
/// The method is only called when the according SourceConfig is in state <code>OfflineStateDownloading</code>.
/// \param offlineManager The <code>OfflineManager</code> calling the listener.
///
/// \param progress The percentage of completion for the current download task.
///
- (void)offlineManager:(BMPOfflineManager * _Nonnull)offlineManager didProgressTo:(double)progress SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener.onContentDownloadProgressChanged(_:offlineContentManager:) instead");
/// Is called when the download of the media content was suspended. This could be the result of a call to
/// <code>OfflineManager.suspendDownloadForSourceConfig:</code> or if the app was terminated by the
/// user while downloads were running.
/// In the latter case, this listener method is called upon first application startup after termination.
/// \param offlineManager The <code>OfflineManager</code> calling the listener.
///
- (void)offlineManagerDidSuspendDownload:(BMPOfflineManager * _Nonnull)offlineManager SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener.onContentDownloadSuspended(_:offlineContentManager:) instead");
/// Is called when the download of the media content was resumed after it was suspended.
/// \param offlineManager The <code>OfflineManager</code> calling the listener.
///
/// \param progress The percentage of completion for the current download task.
///
- (void)offlineManager:(BMPOfflineManager * _Nonnull)offlineManager didResumeDownloadWithProgress:(double)progress SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener.onContentDownloadResumed(_:offlineContentManager:) instead");
/// Is called when the download of the media content was cancelled by the user
/// and all partially downloaded content has been deleted from disk.
/// \param offlineManager The <code>OfflineManager</code> calling the listener.
///
- (void)offlineManagerDidCancelDownload:(BMPOfflineManager * _Nonnull)offlineManager SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener.onContentDownloadCanceled(_:offlineContentManager:) instead");
/// Is called when the offline license was successfully renewed and written to disk.
/// \param offlineManager The <code>OfflineManager</code> calling the listener.
///
- (void)offlineManagerDidRenewOfflineLicense:(BMPOfflineManager * _Nonnull)offlineManager SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener.onOfflineContentLicenseRenewed(_:offlineContentManager:) instead");
/// Is called on every call to <code>OfflineManager.createOfflineSourceConfig(restrictedToAssetCache:)</code>
/// if it is DRM protected
/// and the offline DRM license has expired.
/// \param offlineManager The <code>OfflineManager</code> calling the listener.
///
- (void)offlineManagerOfflineLicenseDidExpire:(BMPOfflineManager * _Nonnull)offlineManager SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener.onOfflineContentLicenseExpired(_:offlineContentManager:) instead");
/// Is called when information on available tracks is available.
/// \param offlineManager The <code>OfflineManager</code> calling the listener.
///
/// \param tracks The available <code>OfflineTrackSelection</code>.
///
- (void)offlineManager:(BMPOfflineManager * _Nonnull)offlineManager didFetchAvailableTracks:(BMPOfflineTrackSelection * _Nonnull)tracks SWIFT_DEPRECATED_MSG("Use OfflineContentManagerListener.onAvailableTracksFetched(_:offlineContentManager:) instead");
@end

@class BMPThumbnailTrack;
@class BMPSourceOptions;

/// Represents a source config which can be played back in a player instance.
SWIFT_CLASS_NAMED("SourceConfig")
@interface BMPSourceConfig : NSObject
/// The url for this source config.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The <code>SourceType</code> for this config
@property (nonatomic, readonly) enum BMPSourceType type;
/// The title of the video source.
@property (nonatomic, copy) NSString * _Nullable title;
/// The description of the video source.
@property (nonatomic, copy) NSString * _Nullable sourceDescription;
/// The URL to a preview image displayed until the video starts.
@property (nonatomic, copy) NSURL * _Nullable posterSource;
/// Indicates whether to show the poster image during playback.
/// Useful, for example, for audio-only streams.
/// Default is false.
@property (nonatomic) BOOL isPosterPersistent;
/// Config for audio and subtitle track labels.
@property (nonatomic, strong) BMPLabelingConfig * _Nonnull labelingConfig;
/// The DRM config for the source.
@property (nonatomic, strong) BMPDrmConfig * _Nullable drmConfig;
/// An array of track data, such as subtitle tracks.
@property (nonatomic, readonly, copy) NSArray<BMPTrack *> * _Nonnull tracks;
/// The thumbnail track for this source config.
@property (nonatomic, strong) BMPThumbnailTrack * _Nullable thumbnailTrack;
/// An object specifying advanced source specific options.
@property (nonatomic, strong) BMPSourceOptions * _Nonnull options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a new <code>SourceConfig</code> based on the given source URL.
/// \param url The URL for the media source.
///
///
/// returns:
/// A new source config initialized with the given URL, or nil on failure.
- (nullable instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Creates a new <code>SourceConfig</code> based on the given source URL for the provide <code>SourceType</code>.
/// Passing <code>SourceType.none</code> to this initializer is not supported.
/// \param url The URL for the media source.
///
/// \param type The <code>SourceType</code> for the media source.
///
///
/// returns:
/// A new source config initialized with the given URL.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url type:(enum BMPSourceType)type;
/// Can be used to add external subtitles to this source config.
/// Subtitles which are added using this method are only supported
/// in combination with our Bitmovin UI or for source configs
/// which are loaded into a Chromecast session.
/// \param subtitleTrack The subtitle track to add.
///
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
@end

@class AVURLAsset;
@protocol _BMPOfflineFairplayLicenseStorage;

/// Represents a <code>SourceConfig</code> which references already downloaded or currently downloading offline content. It can
/// passed to a <code>Player</code> instance for playback. Do not create instances of this class on your own, instead
/// use <code>OfflineContentManager.createOfflineSourceConfig(restrictedToAssetCache:)</code>.
SWIFT_CLASS_NAMED("OfflineSourceConfig")
@interface BMPOfflineSourceConfig : BMPSourceConfig
/// Defines if the player is restricted to the usage of completely offline stored media renditions.
@property (nonatomic, readonly) BOOL isRestrictedToAssetCache;
/// :nodoc:
+ (BMPOfflineSourceConfig * _Nonnull)_createWithUrlAsset:(AVURLAsset * _Nonnull)urlAsset sourceConfig:(BMPSourceConfig * _Nonnull)sourceConfig restrictedToAssetCache:(BOOL)restrictedToAssetCache fairplayLicenseStorage:(id <_BMPOfflineFairplayLicenseStorage> _Nullable)fairplayLicenseStorage SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a text track which can be selected to download for offline playback
SWIFT_CLASS_NAMED("OfflineTextTrack")
@interface BMPOfflineTextTrack : BMPOfflineTrack
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum BMPOfflineTrackAction _defaultAction;)
+ (enum BMPOfflineTrackAction)_defaultAction SWIFT_WARN_UNUSED_RESULT;
/// The label for this track.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// The IETF BCP 47 language tag associated with the text track.
@property (nonatomic, readonly, copy) NSString * _Nullable language;
/// Tells if a text track is forced. If set to true it means that the player should automatically select and switch
/// this text track according to the selected audio language.
@property (nonatomic, readonly) BOOL isForced;
/// If set to <code>true</code>, this track would be considered as default,
/// i.e. it will be enabled automatically once the source has loaded.
@property (nonatomic, readonly) BOOL isDefault;
/// :nodoc:
+ (BMPOfflineTextTrack * _Nonnull)_createWithIdentifier:(NSString * _Nonnull)identifier language:(NSString * _Nullable)language label:(NSString * _Nonnull)label isForced:(BOOL)isForced isDefault:(BOOL)isDefault SWIFT_WARN_UNUSED_RESULT;
@end


/// Represenets the desired action of an OfflineTrack
typedef SWIFT_ENUM_NAMED(NSInteger, BMPOfflineTrackAction, "OfflineTrackAction", open) {
/// The track will not be selected for downloading
/// If already downloaded the track will not be modified
  BMPOfflineTrackActionNone = 0,
/// The track will be selected for downloading
  BMPOfflineTrackActionDownload = 1,
};


/// Represents the information which tracks to download for offline playback
SWIFT_CLASS_NAMED("OfflineTrackSelection")
@interface BMPOfflineTrackSelection : NSObject
/// Specifies which text tracks to download for offline playback
@property (nonatomic, readonly, copy) NSArray<BMPOfflineTextTrack *> * _Nonnull textTracks;
/// Specifies which audio tracks to download for offline playback
@property (nonatomic, readonly, copy) NSArray<BMPOfflineAudioTrack *> * _Nonnull audioTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// :nodoc:
+ (BMPOfflineTrackSelection * _Nonnull)_createWithTextTracks:(NSArray<BMPOfflineTextTrack *> * _Nonnull)textTracks audioTracks:(NSArray<BMPOfflineAudioTrack *> * _Nonnull)audioTracks SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("OutputObscuredEvent")
@interface BMPOutputObscuredEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("OutputUnobscuredEvent")
@interface BMPOutputUnobscuredEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PausedEvent")
@interface BMPPausedEvent : BMPPlayerEvent
/// Current playback time in seconds.
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>PictureInPictureApi</code> for interactions regarding picture in picture feature.
SWIFT_PROTOCOL_NAMED("PictureInPictureApi")
@protocol BMPPictureInPictureApi
/// Defines whether the skip-backward and skip-forward buttons should be visible when Picture in Picture is active.
@property (nonatomic) BOOL showSkipControls SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(ios,introduced=14.0);
@end


/// Provides options to configure Picture in Picture playback.
SWIFT_CLASS_NAMED("PictureInPictureConfig")
@interface BMPPictureInPictureConfig : NSObject
/// Whether Picture in Picture feature is enabled or not.
/// Default is <code>false</code>.
@property (nonatomic) BOOL isEnabled;
/// Defines whether the skip-backward and skip-forward buttons should be visible when Picture in Picture is active.
/// Default is <code>true</code>.
@property (nonatomic) BOOL showSkipControls SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(ios,introduced=14.0);
/// Defines whether Picture in Picture should start automatically when the app transitions to background.
/// Does not have any affect when Picture in Picture is disabled.
/// Default is <code>false</code>.
@property (nonatomic) BOOL shouldEnterOnBackground SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(ios,introduced=14.2);
/// Closure which will be called just before Picture in Picture stops.
/// Can be used to restore the user interface. Call the completion handler once done.
/// he system will wait up to one second for the completion handler before Picture in Picture is stopped.
/// If the completion handler is not called in time, Picture in Picture will be stopped regardless.
@property (nonatomic, copy) void (^ _Nullable restoreUserInterfaceHandler)(void (^ _Nonnull)(BOOL));
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer26PictureInPictureEnterEvent")
@interface PictureInPictureEnterEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer28PictureInPictureEnteredEvent")
@interface PictureInPictureEnteredEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer25PictureInPictureExitEvent")
@interface PictureInPictureExitEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer27PictureInPictureExitedEvent")
@interface PictureInPictureExitedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a PlayReady DRM config.
SWIFT_CLASS_NAMED("PlayReadyConfig")
@interface BMPPlayReadyConfig : BMPDrmConfig
/// A dictionary to specify custom HTTP headers for the license request.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull licenseRequestHeaders;
/// Specifies how long in milliseconds should be waited before a license request should be retried. Default is 0.
@property (nonatomic) NSUInteger licenseRequestRetryDelay;
/// Specifies how often a license request should be retried
/// if it was not successful (e.g. the license server was not reachable).
/// Default is 1. Assigning 0 disables retries.
@property (nonatomic) NSUInteger maxLicenseRequestRetries;
/// A JSON string which allows to specify config options of the DRM key system, such as
/// distinctiveIdentifier or persistentState.
@property (nonatomic, copy) NSString * _Nullable mediaKeySystemConfig;
/// Creates a new <code>PlayReadyConfig</code> based on the given license URL.
/// \param licenseUrl The URL to the license server.
///
///
/// returns:
/// A new PlayReady config initialized with the given license URL.
- (nonnull instancetype)initWithLicenseUrl:(NSURL * _Nullable)licenseUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLicenseUrl:(NSURL * _Nullable)licenseUrl uuid:(NSUUID * _Nonnull)uuid SWIFT_UNAVAILABLE;
@end



@interface BMPPlayReadyConfig (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfig * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// Contains config values that can be used to alter the playback behaviour of the player.
SWIFT_CLASS_NAMED("PlaybackConfig")
@interface BMPPlaybackConfig : NSObject
/// Whether the player starts playing automatically after loading a source or not.
/// Default value is <code>false</code>.
@property (nonatomic) BOOL isAutoplayEnabled;
/// Whether the sound is muted on startup or not.
/// Default value is <code>false</code>.
@property (nonatomic) BOOL isMuted;
/// Whether time shift / DVR for live streams is enabled or not.
/// Default is <code>true</code>.
@property (nonatomic) BOOL isTimeShiftEnabled;
/// Whether background playback is enabled or not.
/// Default is <code>false</code>.
/// When set to <code>true</code>, playback is not automatically paused
/// anymore when the app moves to the background.
/// When set to <code>true</code>, also make sure to properly configure your app to allow
/// background playback.
/// On tvOS, background playback is only supported for audio-only content.
@property (nonatomic) BOOL isBackgroundPlaybackEnabled;
/// Whether Picture-In-Picture option is enabled or not.
/// Default is <code>false</code>.
@property (nonatomic) BOOL isPictureInPictureEnabled SWIFT_DEPRECATED_MSG("Use `PlayerViewConfig.PictureInPictureConfig.isEnabled` instead");
/// Determines if the subtitle should be selected by the player per default and
/// kept in sync with the selected audio language.
/// The subtitle will not appear in availableSubtitles and can’t be deactivated or activated through the API.
/// In case of HLS these are subtitles with the attribute <code>FORCED=YES</code>.
@property (nonatomic, copy) BOOL (^ _Nullable isForcedSubtitleCallback)(BMPSubtitleTrack * _Nonnull);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PlaybackSpeedChangedEvent")
@interface BMPPlaybackSpeedChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The playback speed before the change happened.
@property (nonatomic, readonly) float from;
/// The playback speed after the change happened.
@property (nonatomic, readonly) float to;
- (nonnull instancetype)initFrom:(float)from to:(float)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Specifies the player behaviour when <code>Player.play</code> is called.
typedef SWIFT_ENUM_NAMED(NSUInteger, BMPPlaybackStartBehaviour, "PlaybackStartBehaviour", open) {
/// Starts playback when enough media data is buffered and continuous playback without stalling can be ensured.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourRelaxed = 0,
/// When the buffer is not empty, this setting will cause the player to start playback of
/// available media immediately.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourAggressive = 1,
};


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PlayerActiveEvent")
@interface BMPPlayerActiveEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPStyleConfig;
@class BMPTweaksConfig;

/// Configures a new <code>Player</code> instance.
/// Must not be modified after it was used to create a <code>Player</code> instance.
SWIFT_CLASS_NAMED("PlayerConfig")
@interface BMPPlayerConfig : NSObject
/// A Bitmovin license key that can be found in the Bitmovin portal. If a license key is set here, it will be used
/// instead of the license key found in the Info.plist
@property (nonatomic, copy) NSString * _Nullable key;
/// Configures visual presentation and behaviour of the Player UI.
/// A default <code>StyleConfig</code> is set initially
@property (nonatomic, strong) BMPStyleConfig * _Nonnull styleConfig;
/// Configures playback behaviour.
/// A default <code>PlaybackConfig</code> is set initially
@property (nonatomic, strong) BMPPlaybackConfig * _Nonnull playbackConfig;
/// Configures advertising functionality.
/// A default <code>PlaybackConfig</code> is set initially
@property (nonatomic, strong) BMPAdvertisingConfig * _Nonnull advertisingConfig;
/// Configures remote playback functionality.
/// A default <code>RemoteControlConfig</code> is set initially
@property (nonatomic, strong) BMPRemoteControlConfig * _Nonnull remoteControlConfig SWIFT_AVAILABILITY(tvos,unavailable);
/// Configures adaptation logic.
/// A default <code>AdaptationConfig</code> is set initially
@property (nonatomic, strong) BMPAdaptationConfig * _Nonnull adaptationConfig;
/// Configures network request manipulation functionality.
/// A default <code>NetworkConfig</code> is set initially
@property (nonatomic, strong) BMPNetworkConfig * _Nonnull networkConfig;
/// Configures experimental features.
/// A default <code>TweaksConfig</code> is set initially
@property (nonatomic, strong) BMPTweaksConfig * _Nonnull tweaksConfig;
/// Configures buffer settings.
/// A default <code>BufferConfig</code> is set initially
@property (nonatomic, strong) BMPBufferConfig * _Nonnull bufferConfig;
/// Configures behaviour when playing live content.
/// A default <code>LiveConfig</code> is set initially
@property (nonatomic, strong) BMPLiveConfig * _Nonnull liveConfig;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PlayerErrorEvent")
@interface BMPPlayerErrorEvent : BMPPlayerEvent
@property (nonatomic, readonly) enum BMPPlayerErrorCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) BMPDeficiencyData * _Nullable data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithCode:(enum BMPPlayerErrorCode)code message:(NSString * _Nonnull)message data:(BMPDeficiencyData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface BMPPlayerEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PlayerInactiveEvent")
@interface BMPPlayerInactiveEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPReadyEvent;
@protocol BMPPlayer;
@class BMPPlayingEvent;
@class BMPTimeChangedEvent;
@class BMPSeekEvent;
@class BMPSeekedEvent;
@class BMPTimeShiftEvent;
@class BMPTimeShiftedEvent;
@class BMPStallStartedEvent;
@class BMPStallEndedEvent;
@class BMPVideoSizeChangedEvent;
@class BMPSourceErrorEvent;
@class BMPPlayerWarningEvent;
@class BMPSourceWarningEvent;
@class BMPSourceLoadEvent;
@class BMPSourceLoadedEvent;
@class BMPSourceUnloadEvent;
@class BMPSourceUnloadedEvent;
@class BMPSubtitleAddedEvent;
@class BMPSubtitleRemovedEvent;
@class BMPSubtitleChangedEvent;
@class BMPUnmutedEvent;
@class BMPVideoDownloadQualityChangedEvent;
@class BMPVideoPlaybackQualityChangedEvent;
@class BMPSourceMetadataChangedEvent;
@class BMPPlaylistTransitionEvent;
@class BMPSourceAddedEvent;
@class BMPSourceRemovedEvent;
@class BMPSharePlayStartedEvent;
@class BMPSharePlayEndedEvent;
@class BMPSharePlaySuspensionStartedEvent;
@class BMPSharePlaySuspensionEndedEvent;

/// Defines listener methods for all events available for the Player.
SWIFT_PROTOCOL_NAMED("PlayerListener")
@protocol BMPPlayerListener <NSObject>
@optional
/// Called when the player is ready for immediate playback, because initial audio/video has been downloaded.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onReady:(BMPReadyEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player received an intention to start/resume playback.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPlay:(BMPPlayEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when playback has been started.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPlaying:(BMPPlayingEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player enters the pause state.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPaused:(BMPPausedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the current playback time has changed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onTimeChanged:(BMPTimeChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the duration of the current played media has changed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onDurationChanged:(BMPDurationChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player is about to seek to a new position.
/// Only applies to VoD streams.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSeek:(BMPSeekEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when seeking has been finished and data is available to continue playback.
/// Only applies to VoD streams.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSeeked:(BMPSeekedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player is about to time-shift to a new position.
/// Only applies to Live streams.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onTimeShift:(BMPTimeShiftEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when time shifting has been finished and data is available to continue playback.
/// Only applies to live streams, please refer to onSeeked for VoD streams.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onTimeShifted:(BMPTimeShiftedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player is paused or in buffering state and the timeShift offset
/// has exceeded the available timeShift window.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onDvrWindowExceeded:(BMPDvrWindowExceededEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player begins to stall and to buffer due to an empty buffer.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onStallStarted:(BMPStallStartedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player ends stalling, due to enough data in the buffer.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onStallEnded:(BMPStallEndedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the current size of the video content has been changed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onVideoSizeChanged:(BMPVideoSizeChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the playback of the current media has finished.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPlaybackFinished:(BMPPlaybackFinishedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a player error is encountered.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPlayerError:(BMPPlayerErrorEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a source error is encountered.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSourceError:(BMPSourceErrorEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a player warning occurs.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPlayerWarning:(BMPPlayerWarningEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a source warning occurs.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSourceWarning:(BMPSourceWarningEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when loading of a new source started.
/// This does not mean that loading of the new manifest has been finished.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSourceLoad:(BMPSourceLoadEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a new source is loaded. This does not mean that loading of the new manifest has been finished.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the current source will be unloaded.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSourceUnload:(BMPSourceUnloadEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the current source has been unloaded.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player was destroyed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onDestroy:(BMPDestroyEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when metadata (i.e. ID3 tags in HLS and EMSG in DASH) are encountered.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onMetadata:(BMPMetadataEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when metadata is parsed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onMetadataParsed:(BMPMetadataParsedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when casting to another device, such as a ChromeCast, is available.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCastAvailable:(BMPCastAvailableEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the playback on a cast device has been paused.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCastPaused:(BMPCastPausedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the playback on a cast device has been finished.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCastPlaybackFinished:(BMPCastPlaybackFinishedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when playback on a cast device has been started.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCastPlaying:(BMPCastPlayingEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the cast app is launched successfully.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCastStarted:(BMPCastStartedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when casting is initiated, but the user still needs to choose which device should be used.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCastStart:(BMPCastStartEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when casting to a device is stopped.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCastStopped:(BMPCastStoppedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the time update from the currently used cast device is received.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCastTimeUpdated:(BMPCastTimeUpdatedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a cast device has been chosen and player is waiting for the device to get ready for playback.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCastWaitingForDevice:(BMPCastWaitingForDeviceEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player SWIFT_AVAILABILITY(tvos,unavailable);
/// Called when a sideloaded subtitle cue has been parsed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCueParsed:(BMPCueParsedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a subtitle entry transitions into the active status.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCueEnter:(BMPCueEnterEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when an active subtitle entry transitions into the inactive status.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onCueExit:(BMPCueExitEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a new <code>SubtitleTrack</code> is added.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSubtitleAdded:(BMPSubtitleAddedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when an external <code>SubtitleTrack</code> has been removed so it is possible to update the controls accordingly.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSubtitleRemoved:(BMPSubtitleRemovedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the active <code>SubtitleTrack</code> is changed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSubtitleChanged:(BMPSubtitleChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player is muted.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onMuted:(BMPMutedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player is unmuted.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onUnmuted:(BMPUnmutedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when an audio track is added.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAudioAdded:(BMPAudioAddedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when an audio track is removed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAudioRemoved:(BMPAudioRemovedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the audio track is changed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAudioChanged:(BMPAudioChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the playback of an ad has been started.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdStarted:(BMPAdStartedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the playback of an ad has been finished.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdFinished:(BMPAdFinishedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the playback of an ad has progressed over a quartile boundary.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdQuartile:(BMPAdQuartileEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the playback of an ad break has been started.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdBreakStarted:(BMPAdBreakStartedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the playback of an ad break has been finished.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdBreakFinished:(BMPAdBreakFinishedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when an ad manifest was successfully downloaded and parsed and the ad has been added onto the queue.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdScheduled:(BMPAdScheduledEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when an ad has been skipped.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdSkipped:(BMPAdSkippedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the user clicks on the ad.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdClicked:(BMPAdClickedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when ad playback fails.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdError:(BMPAdErrorEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the download of an ad manifest is starting.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdManifestLoad:(BMPAdManifestLoadEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the ad manifest has been successfully loaded.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAdManifestLoaded:(BMPAdManifestLoadedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the current video download quality has changed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onVideoDownloadQualityChanged:(BMPVideoDownloadQualityChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the current video playback quality has changed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onVideoPlaybackQualityChanged:(BMPVideoPlaybackQualityChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a web download request has finished.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onDownloadFinished:(BMPDownloadFinishedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when AirPlay playback starts or stops.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAirPlayChanged:(BMPAirPlayChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when AirPlay is available.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onAirPlayAvailable:(BMPAirPlayAvailableEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a source config is loaded which has metadata attached
/// or when <code>metadata</code> is set on the active <code>Source</code>.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSourceMetadataChanged:(BMPSourceMetadataChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a source was loaded into the <code>Player</code>.
/// Seeking and time shifting is allowed as soon as this event is seen.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPlayerActive:(BMPPlayerActiveEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when DRM data is found in a downloaded manifest file.
/// TweaksConfig.nativeHlsParsingEnabled needs to be set to <code>true</code> to receive those events.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onDrmDataParsed:(BMPDrmDataParsedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the <code>Player</code> was unloaded.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPlayerInactive:(BMPPlayerInactiveEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player transitions between two sources in a playlist.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPlaylistTransition:(BMPPlaylistTransitionEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player transitions from one playback speed to another.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onPlaybackSpeedChanged:(BMPPlaybackSpeedChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a new <code>Source</code> was added to a playlist.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSourceAdded:(BMPSourceAddedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a <code>Source</code> was removed from a playlist.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onSourceRemoved:(BMPSourceRemovedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a SharePlay session is started.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event
///
- (void)onSharePlayStarted:(BMPSharePlayStartedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player SWIFT_AVAILABILITY(tvos,introduced=15) SWIFT_AVAILABILITY(ios,introduced=15);
/// Called when a SharePlay session is ended.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event
///
- (void)onSharePlayEnded:(BMPSharePlayEndedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player SWIFT_AVAILABILITY(tvos,introduced=15) SWIFT_AVAILABILITY(ios,introduced=15);
/// Called when a <code>SharePlaySuspension</code> is started.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event
///
- (void)onSharePlaySuspensionStarted:(BMPSharePlaySuspensionStartedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player SWIFT_AVAILABILITY(tvos,introduced=15) SWIFT_AVAILABILITY(ios,introduced=15);
/// Called when a <code>SharePlaySuspension</code> is ended.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event
///
- (void)onSharePlaySuspensionEnded:(BMPSharePlaySuspensionEndedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player SWIFT_AVAILABILITY(tvos,introduced=15) SWIFT_AVAILABILITY(ios,introduced=15);
/// Called for each occurring player event.
/// \param event The player event. Use <code>event.name</code> or <code>event is</code> to check the specific event type.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onEvent:(id <BMPEvent> _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when visual output is obscured by the <code>Player</code> due to insufficient external protection provided by the
/// current device configuration.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onOutputObscured:(BMPOutputObscuredEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when visual output is no longer obscured by the <code>Player</code> due to sufficient
/// external protection provided by the current device configuration.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onOutputUnobscured:(BMPOutputUnobscuredEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
@end

@protocol BMPSystemUiApi;
@class BMPPlayerViewConfig;
@class NSCoder;

/// A view that provides the Bitmovin Player UI and default UI handling to an attached <code>Player</code> instance.
/// This view needs a <code>Player</code> instance to work properly. This Player can be passed to the initializer.
/// If a custom UI is preferred, an <code>AVPlayerLayer</code> or an <code>AVPlayerViewController</code> can be registered via
/// <code>registerPlayerLayer</code> / <code>registerPlayerViewController</code>. See <code>PlayerView</code> for more details.
/// \code
/// // Create a subclass of UIView
/// class CustomView: UIView {
///     init(player: Player, frame: CGRect) {
///         super.init(frame: frame)
///
///         // register the AVPlayerLayer of this view to the Player
///         player.register(playerLayer)
///     }
///
///     var playerLayer: AVPlayerLayer {
///         layer as! AVPlayerLayer
///     }
///
///     override class var layerClass: AnyClass {
///         AVPlayerLayer.self
///     }
/// }
///
/// \endcode
SWIFT_CLASS_NAMED("PlayerView")
@interface BMPPlayerView : UIView
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <BMPPlayer> _Nullable player;
/// Get/set a fullscreen handler for this <code>PlayerView</code>. See the documentation of the <code>FullscreenHandler</code> for
/// more information.
@property (nonatomic, weak) id <BMPFullscreenHandler> _Nullable fullscreenHandler;
/// The <code>SystemUiApi</code> for interactions regarding the system UI. Using this API just has an effect if
/// <code>userInterfaceType</code> in <code>StyleConfig</code> is set to <code>.system</code>. This is the default value on tvOS, on iOS it has to be
/// set specifically.
@property (nonatomic, readonly, strong) id <BMPSystemUiApi> _Nullable systemUi;
/// The <code>PictureInPictureApi</code> for interactions regarding picture in picture feature.
/// Using this API just has an effect if <code>pictureInPicture</code> is enabled.
/// Is <code>nil</code> if <code>pictureInPicture</code> is not enabled.
@property (nonatomic, readonly, strong) id <BMPPictureInPictureApi> _Nullable pictureInPicture;
/// Creates a new instance of the <code>PlayerView</code>.
/// \param player The <code>Player</code> instance which will be associated with this <code>PlayerView</code> instance
///
/// \param frame The <code>CGRect</code> which will be passed to the <code>UIView</code> initializer
///
- (nonnull instancetype)initWithPlayer:(id <BMPPlayer> _Nonnull)player frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of the <code>PlayerView</code>.
/// \param player The <code>Player</code> instance which will be associated with this <code>PlayerView</code> instance
///
/// \param frame The <code>CGRect</code> which will be passed to the <code>UIView</code> initializer
///
/// \param playerViewConfig A configuration object for the <code>PlayerView</code> instance
///
- (nonnull instancetype)initWithPlayer:(id <BMPPlayer> _Nonnull)player frame:(CGRect)frame playerViewConfig:(BMPPlayerViewConfig * _Nonnull)playerViewConfig OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)didMoveToSuperview;
/// When the hosting App supports more <code>UIDeviceOrientation</code>s this
/// method should be called before the view will rotate.
/// This can be implemented inside the <code>viewWillTransition</code> method.
/// \code
/// override func viewWillTransition(
///     to size: CGSize,
///     with coordinator: UIViewControllerTransitionCoordinator
/// ) {
///     playerView.willRotate()
///     coordinator.animate(
///         alongsideTransition: { _ in
///             // ...
///         },
///         completion: { _ in
///             playerView.didRotate()
///         }
///     )
///
///     super.viewWillTransition(to: size, with: coordinator)
/// }
///
/// \endcode
- (void)willRotate;
/// When the hosting App supports more <code>UIDeviceOrientation</code>s this method should be called after the view rotated.
/// This can be implemented inside the <code>viewWillTransition</code> method.
/// \code
/// override func viewWillTransition(
///     to size: CGSize,
///     with coordinator: UIViewControllerTransitionCoordinator
/// ) {
///     playerView.willRotate()
///     coordinator.animate(
///         alongsideTransition: { _ in
///             // ...
///         },
///         completion: { _ in
///             playerView.didRotate()
///         }
///     )
///
///     super.viewWillTransition(to: size, with: coordinator)
/// }
///
/// \endcode
- (void)didRotate;
@end

@protocol BMPUserInterfaceListener;

/// Handles adding and removing of event listeners.
SWIFT_PROTOCOL_NAMED("UserInterfaceEventHandler")
@protocol BMPUserInterfaceEventHandler <NSObject>
/// Adds an event listener.
/// \param listener The event listener to be added.
///
- (void)addUserInterfaceListener:(id <BMPUserInterfaceListener> _Nonnull)listener;
/// Removes an event listener.
/// \param listener The event listener to be removed.
///
- (void)removeUserInterfaceListener:(id <BMPUserInterfaceListener> _Nonnull)listener;
@end


@interface BMPPlayerView (SWIFT_EXTENSION(BitmovinPlayer)) <BMPUserInterfaceEventHandler>
- (void)addUserInterfaceListener:(id <BMPUserInterfaceListener> _Nonnull)listener;
- (void)removeUserInterfaceListener:(id <BMPUserInterfaceListener> _Nonnull)listener;
@end

@class UIScrollView;

@interface BMPPlayerView (SWIFT_EXTENSION(BitmovinPlayer)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)scrollViewShouldScrollToTop:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end


@class _BMPInternalMasterPlaylistLoadedEvent;
@class _BMPInternalVariantPlaylistLoadedEvent;
@class _BMPInternalTimeChangedEvent;
@class _BMPInternalReadyEvent;
@class _BMPInternalPlaybackInitiatedEvent;
@class _BMPInternalPlaybackIntentionEvent;
@class _BMPInternalTimeShiftEvent;
@class _BMPInternalTimeShiftedEvent;
@class _BMPInternalActiveSourceChangedEvent;
@class _BMPInternalCastReadyEvent;
@class _BMPInternalCastActiveSourceChangedEvent;
@class _BMPInternalCastStopEvent;
@class _BMPInternalBufferLevelChangedEvent;
@class _BMPInternalPlaylistTransitionEvent;
@class _BMPInternalCastPlaylistTransitionEvent;
@class _BMPInternalPlayingEvent;
@class _BMPInternalPlayerLoadEvent;
@class _BMPInternalPlayerUnloadEvent;
@class _BMPInternalSourcePlaybackFinishedEvent;
@class _BMPInternalSourceAddedEvent;
@class _BMPInternalCastSourceAddedEvent;
@class _BMPInternalSourceRemovedEvent;
@class _BMPInternalCastSourceRemovedEvent;
@class _BMPInternalAdPlaybackDidRequestContentPauseEvent;
@class _BMPInternalAdPlaybackDidRequestContentResumeEvent;
@class _BMPInternalSeekEvent;
@class _BMPInternalSeekedEvent;
@class _BMPInternalCanStartPlaybackImmediatelyEvent;
@class _BMPInternalStallStartedEvent;
@class _BMPInternalStallEndedEvent;
@class _BMPInternalSharePlayStartedEvent;
@class _BMPInternalSharePlayEndedEvent;

/// Private protocol for internal events
SWIFT_PROTOCOL_NAMED("_PlayerListenerInternal")
@protocol _BMPPlayerListenerInternal <BMPPlayerListener>
@optional
/// Is called once after a new <code>PlayerListener</code> was added to the event system.
/// \param unseenEvents Contains all events which were already fired prior to adding the listener.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onUnseen:(NSArray<id <BMPEvent>> * _Nonnull)unseenEvents player:(id <BMPPlayer> _Nonnull)player;
/// Is called when master playlist data has been loaded.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalMasterPlaylistLoaded:(_BMPInternalMasterPlaylistLoadedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is called when variant playlist data has been loaded.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalVariantPlaylistLoaded:(_BMPInternalVariantPlaylistLoadedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is called when the current playback time has changed. Will be fired every 0.2 seconds.
/// Public config of the firing interval for time changed events is not affecting this event.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalTimeChanged:(_BMPInternalTimeChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is fired as soon as the <code>AVPlayerItem</code> enters the <code>AVPlayerItemStatusReadyToPlay</code> state
/// for the first time after the source was loaded. This event is always fired before <code>onReady</code>.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalReady:(_BMPInternalReadyEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is fired when start/resume of playback is initiated for main content (non-ad)
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalPlaybackInitiated:(_BMPInternalPlaybackInitiatedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is fired on intention to start/resume playback for main content (non-ad)
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalPlaybackIntention:(_BMPInternalPlaybackIntentionEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is called periodically during time shifting.
/// Only applies to live streams, please refer to <code>onSeek</code> for VoD streams.
/// This event is always triggered even for internal TimeShifts e.g. when applying a startOffset.
/// \param event An object holding specific event data.
///
- (void)onInternalTimeShift:(_BMPInternalTimeShiftEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is called when time shifting has been finished and data is available to continue playback.
/// Only applies to live streams, please refer to onSeeked for VoD streams.
/// This event is always triggered even for internal TimeShifts e.g. when applying a startOffset.
/// \param event An object holding specific event data.
///
- (void)onInternalTimeShifted:(_BMPInternalTimeShiftedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is called when the active source of the player changed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalActiveSourceChanged:(_BMPInternalActiveSourceChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is called when the cast receiver is ready for immediate playback.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalCastReady:(_BMPInternalCastReadyEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is called when the active source of the player changed while casting.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalCastActiveSourceChanged:(_BMPInternalCastActiveSourceChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Is called when casting to a device is stopping.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalCastStop:(_BMPInternalCastStopEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the <code>BufferLevel</code> changed.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalBufferLevelChanged:(_BMPInternalBufferLevelChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when internal PlaylistTransition of the local player finished.
/// It will be called after all listeners of the <code>onInternalActiveSourceChanged</code> returned.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalPlaylistTransition:(_BMPInternalPlaylistTransitionEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when internal PlaylistTransition of the cast player finished.
/// It will be called after all listeners of the <code>onInternalCastActiveSourceChanged</code> returned.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalCastPlaylistTransition:(_BMPInternalCastPlaylistTransitionEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when player status changed to playing.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalPlaying:(_BMPInternalPlayingEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when sources are about to be loaded into the player.
/// This event is fired before <code>onPlayerActive</code> is fired.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalPlayerLoad:(_BMPInternalPlayerLoadEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player is about to be unloaded.
/// This event is fired before <code>onPlayerInactive</code> is fired.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalPlayerUnload:(_BMPInternalPlayerUnloadEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the playback of the current source has finished.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalSourcePlaybackFinished:(_BMPInternalSourcePlaybackFinishedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a new source has been added to the player.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalSourceAdded:(_BMPInternalSourceAddedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a new source has been added to the cast player.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalCastSourceAdded:(_BMPInternalCastSourceAddedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a <code>Source</code> was removed from the player.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalSourceRemoved:(_BMPInternalSourceRemovedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a <code>Source</code> was removed from the cast player.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalCastSourceRemoved:(_BMPInternalCastSourceRemovedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when ad playback requests main content to be paused
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalAdPlaybackDidRequestContentPause:(_BMPInternalAdPlaybackDidRequestContentPauseEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when ad playback requests main content to be resumed
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalAdPlaybackDidRequestContentResume:(_BMPInternalAdPlaybackDidRequestContentResumeEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player is about to seek to a new position.
/// Only applies to VoD streams.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalSeek:(_BMPInternalSeekEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when seeking has been finished and data is available to continue playback.
/// Only applies to VoD streams.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalSeeked:(_BMPInternalSeekedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when playback can start immediately without buffering or stalling
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalCanStartPlaybackImmediately:(_BMPInternalCanStartPlaybackImmediatelyEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player begins to stall and to buffer due to an empty buffer.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalStallStarted:(_BMPInternalStallStartedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when the player ends stalling, due to enough data in the buffer.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalStallEnded:(_BMPInternalStallEndedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
/// Called when a SharePlay session is started.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalSharePlayStarted:(_BMPInternalSharePlayStartedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player SWIFT_AVAILABILITY(tvos,introduced=15) SWIFT_AVAILABILITY(ios,introduced=15);
/// Called when a SharePlay session is ended.
/// \param event An object holding specific event data.
///
/// \param player The player instance which is associated with the emitted event.
///
- (void)onInternalSharePlayEnded:(_BMPInternalSharePlayEndedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player SWIFT_AVAILABILITY(tvos,introduced=15) SWIFT_AVAILABILITY(ios,introduced=15);
@end


@interface BMPPlayerView (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onCastWaitingForDevice:(BMPCastWaitingForDeviceEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
- (void)onInternalAdPlaybackDidRequestContentPause:(_BMPInternalAdPlaybackDidRequestContentPauseEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
- (void)onInternalAdPlaybackDidRequestContentResume:(_BMPInternalAdPlaybackDidRequestContentResumeEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
@end



@class AVTextStyleRule;

/// API methods related to the user interface.
SWIFT_PROTOCOL_NAMED("UserInterfaceApi")
@protocol BMPUserInterfaceApi <NSObject>
/// Returns true if the player is currently in fullscreen mode.
@property (nonatomic, readonly) BOOL isFullscreen;
/// Returns true if the players playback controls are currently shown, false if they are hidden.
@property (nonatomic, readonly) BOOL areControlsShown;
/// Returns if Picture-In-Picture is available.
/// Picture-In-Picture is available in the following use-cases:
/// <ul>
///   <li>
///     on iPhone using iOS 14.2 and above. (We disabled PiP on iOS 14.0 and 14.1 due to an underlying iOS bug)
///   </li>
///   <li>
///     on iPads using iOS 9 and above.
///   </li>
///   <li>
///     if not explicitly disabled through <code>PlaybackConfiguration#isPictureInPictureEnabled</code> (default is disabled)
///   </li>
/// </ul>
///
/// returns:
/// true if Picture-In-Picture is available.
@property (nonatomic, readonly) BOOL isPictureInPictureAvailable;
/// Returns true if player is currently in Picture-in-Picture (PiP) mode.
@property (nonatomic, readonly) BOOL isPictureInPicture;
/// A value defining how the video is displayed within the parent container’s bounds.
/// Possible values are defined in <code>ScalingMode</code>.
/// When a value was set before the <code>Player</code> was added to the view,
/// it will have precedence over the value configured in <code>StyleConfig.scalingMode</code>.
@property (nonatomic) enum BMPScalingMode scalingMode;
/// The player enters Picture-In-Picture mode. Has no effects if already in picture in picture.
/// <ul>
///   <li>
///     Starting Picture-In-Picture during casting is not supported and will result in a no-op.
///   </li>
///   <li>
///     This has no effect when using system UI.
///   </li>
/// </ul>
- (void)enterPictureInPicture;
/// The player exits Picture-In-Picture mode. Has no effect if not in Picture-In-Picture mode.
/// This has no effect when using system UI.
- (void)exitPictureInPicture;
/// The player enters fullscreen mode. Has no effect if in fullscreen.
- (void)enterFullscreen;
/// The player exits fullscreen mode. Has no effect if not in fullscreen.
- (void)exitFullscreen;
/// Sets a poster image which will be displayed before playback starts.
/// \param url The URL to the poster image.
///
/// \param keepPersistent Flag to set the poster image persistent so it is also displayed during playback.
///
- (void)setPosterImage:(NSURL * _Nonnull)url keepPersistent:(BOOL)keepPersistent;
/// Set the subtitle styles which should be applied to WebVTT subtitles and other legible text.
/// Setting subtitle styles using this method completely replaces all previously set subtitle styles.
/// Setting subtitle styles is only supported when the <code>userInterfaceType</code> in the <code>StyleConfig</code> is set to
/// <code>.system</code> or <code>.subtitle</code>.
/// \param subtitleStyles The subtitle styles which should be applied.
///
- (void)setSubtitleStyles:(NSArray<AVTextStyleRule *> * _Nullable)subtitleStyles;
@end


@interface BMPPlayerView (SWIFT_EXTENSION(BitmovinPlayer)) <BMPUserInterfaceApi>
@property (nonatomic, readonly) BOOL isFullscreen;
@property (nonatomic, readonly) BOOL areControlsShown;
@property (nonatomic, readonly) BOOL isPictureInPictureAvailable;
@property (nonatomic, readonly) BOOL isPictureInPicture;
@property (nonatomic) enum BMPScalingMode scalingMode;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (void)enterFullscreen;
- (void)exitFullscreen;
- (void)setPosterImage:(NSURL * _Nonnull)url keepPersistent:(BOOL)keepPersistent;
- (void)setSubtitleStyles:(NSArray<AVTextStyleRule *> * _Nullable)subtitleStyles;
@end


/// Configures a new <code>PlayerView</code> instance.
SWIFT_CLASS_NAMED("PlayerViewConfig")
@interface BMPPlayerViewConfig : NSObject
/// Provides options to configure Picture in Picture playback.
@property (nonatomic, strong) BMPPictureInPictureConfig * _Nonnull pictureInPictureConfig;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PlayerWarningEvent")
@interface BMPPlayerWarningEvent : BMPPlayerEvent
@property (nonatomic, readonly) enum BMPPlayerWarningCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) BMPDeficiencyData * _Nullable data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithCode:(enum BMPPlayerWarningCode)code message:(NSString * _Nonnull)message data:(BMPDeficiencyData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PlayingEvent")
@interface BMPPlayingEvent : BMPPlayerEvent
/// Current playback time in seconds.
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol BMPSource;

/// Provides the means to manage the playlist.
/// When the player transitions from one source in the playlist to another (either by normal playback or by
/// seeking), a <code>PlaylistTransition</code> event is emitted and the new <code>Source</code> becomes active while the old
/// one becomes inactive.
/// Accessible through <code>Player.playlist</code>.
SWIFT_PROTOCOL_NAMED("PlaylistApi")
@protocol BMPPlaylistApi
/// The list of <code>Source</code>s currently in the playlist. Exactly one source is always active in a
/// playlist.
@property (nonatomic, readonly, copy) NSArray<id <BMPSource>> * _Nonnull sources;
/// Seeks to the specified time in the specified Source. The <code>Source</code> must be part of the playlist.
/// Calling this method to seek to another source while casting
/// will start playback automatically after the seek operation finished even if the player was paused previously.
/// This is due to limitations on the CAF receiver.
- (void)seekWithSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
/// Adds the given <code>Source</code> to the playlist at the specified index.
/// The <code>Source</code> is added before the <code>Source</code> that currently resides at the specified index.
/// Limitations:
/// <ul>
///   <li>
///     Adding the same <code>Source</code> instance more than once is not supported and will result in a no-op.
///   </li>
///   <li>
///     Adding a <code>Source</code> before a <code>load</code> or after an <code>unload</code> call will result in a no-op.
///   </li>
///   <li>
///     Adding a <code>Source</code> after playback has finished will result in a no-op.
///   </li>
/// </ul>
/// \param source The <code>Source</code> that will be added to the playlist.
///
/// \param index The index at which to add the new <code>Source</code>.
/// <code>index</code> must be greater than or equal to zero and must not exceed the
/// number of <code>Source</code>s in the playlist.
///
- (void)addWithSource:(id <BMPSource> _Nonnull)source at:(NSInteger)index;
/// Adds the given <code>Source</code> to the end of the playlist
/// Limitations:
/// <ul>
///   <li>
///     Adding the same <code>Source</code> instance more than once is not supported and will result in a no-op.
///   </li>
///   <li>
///     Adding a <code>Source</code> before a <code>load</code> or after an <code>unload</code> call will result in a no-op.
///   </li>
///   <li>
///     Adding a <code>Source</code> after playback has finished will result in a no-op.
///   </li>
/// </ul>
/// \param source The <code>Source</code> that will be added to the playlist.
///
- (void)addWithSource:(id <BMPSource> _Nonnull)source;
/// Removes a <code>Source</code> from the playlist at the specified index.
/// Limitations:
/// <ul>
///   <li>
///     Removing the currently active <code>Source</code> is not possible. If the index that
///     corresponds to the active source’s index is passed it will result in a no-op.
///   </li>
/// </ul>
/// \param index The index from which to remove the <code>Source</code>.
/// <code>index</code> must be greater than or equal to zero and must be less than
/// the number of <code>Source</code>s in the playlist.
///
- (void)removeWithSourceAt:(NSInteger)index;
@end

@class BMPPlaylistOptions;

/// Configures a playlist that can be loaded into a <code>Player</code>.
SWIFT_CLASS_NAMED("PlaylistConfig")
@interface BMPPlaylistConfig : NSObject
/// The <code>Source</code>s that are part of the configured playlist.
@property (nonatomic, readonly, copy) NSArray<id <BMPSource>> * _Nonnull sources;
/// Additional configuration options for the playlist.
@property (nonatomic, readonly, strong) BMPPlaylistOptions * _Nonnull options;
/// Configures a playlist that can be loaded into a <code>Player</code>.
/// Will use default <code>PlaylistOptions</code>.
/// \param sources The <code>Source</code>s that are part of the configured playlist.
///
- (nonnull instancetype)initWithSources:(NSArray<id <BMPSource>> * _Nonnull)sources;
/// Configures a playlist that can be loaded into a <code>Player</code>.
/// \param sources The <code>Source</code>s that are part of the configured playlist.
///
/// \param options Additional configuration options for the playlist.
///
- (nonnull instancetype)initWithSources:(NSArray<id <BMPSource>> * _Nonnull)sources options:(BMPPlaylistOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum BMPReplayMode : NSInteger;

/// Contains additional configuration options for setting up a playlist.
SWIFT_CLASS_NAMED("PlaylistOptions")
@interface BMPPlaylistOptions : NSObject
/// Specifies whether all <code>Source</code>s in the playlist immediately start preloading when the playlist is loaded into a
/// <code>Player</code>.
/// Default value is <code>false</code>.
/// Progressive sources can not be preloaded as part of this setting, although they will naturally be preloaded
/// before a playlist transition.
@property (nonatomic, readonly) BOOL preloadAllSources;
/// Defines whether replay starts at the beginning of the playlist or at the beginning of the last source.
/// Default value is <code>ReplayMode.playlist</code>.
/// note:
/// the value of this property is ignored when the System UI is used. The System UI
/// always replays the last source.
@property (nonatomic, readonly) enum BMPReplayMode replayMode;
/// Contains additional configuration options for setting up a playlist.
/// \param preloadAllSources Specifies whether all <code>Source</code>s in the playlist immediately start
/// preloading when the playlist is loaded into a <code>Player</code>.
///
/// \param replayMode Specifies the replay behaviour of a playlist.
///
- (nonnull instancetype)initWithPreloadAllSources:(BOOL)preloadAllSources replayMode:(enum BMPReplayMode)replayMode OBJC_DESIGNATED_INITIALIZER;
/// Inits the class with default values.
- (nonnull instancetype)init;
/// Contains additional configuration options for setting up a playlist.
/// \param preloadAllSources Specifies whether all <code>Source</code>s in the playlist immediately start
/// preloading when the playlist is loaded into a <code>Player</code>.
///
- (nonnull instancetype)initWithPreloadAllSources:(BOOL)preloadAllSources;
/// Contains additional configuration options for setting up a playlist.
/// \param replayMode Specifies the replay behaviour of a playlist.
///
- (nonnull instancetype)initWithReplayMode:(enum BMPReplayMode)replayMode;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("PlaylistTransitionEvent")
@interface BMPPlaylistTransitionEvent : BMPPlayerEvent
/// The <code>Source</code> from which a transition happened.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull from;
/// The <code>Source</code> to which a transition happened.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initFrom:(id <BMPSource> _Nonnull)from to:(id <BMPSource> _Nonnull)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Can be used to change request parameters before a request is made.
/// Only changing DRM and HLS Playlist requests are currently supported.
SWIFT_PROTOCOL_NAMED("PreprocessHttpRequestDelegate")
@protocol BMPPreprocessHttpRequestDelegate
/// Can be used to change request parameters before a request is made.
/// Only changing DRM and HLS Playlist requests are currently supported.
/// \param type Type of the request to be made. Possible values are defined in BMPHttpRequestTypes.h.
///
/// \param httpRequest Config object of the request.
///
/// \param completionHandler Completion handler which must be called with the modified BMPHttpRequest. Not calling
/// the completion handler prevents the HTTP request from being sent at all and blocks the player.
///
- (void)preprocessHttpRequest:(NSString * _Nonnull)type httpRequest:(BMPHttpRequest * _Nonnull)httpRequest completionHandler:(void (^ _Nonnull)(BMPHttpRequest * _Nonnull))completionHandler;
@end


/// Quality definition of a media representation.
/// Note: This class acts as an abstract class.
SWIFT_CLASS_NAMED("Quality")
@interface BMPQuality : NSObject
/// The unique identifier of the media representation.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The label of the media representation that should be exposed to the user (e.g. in the UI).
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// The bitrate of the media representation in bits per second (bps).
@property (nonatomic, readonly) NSUInteger bitrate;
/// The codec of the media representation.
@property (nonatomic, readonly, copy) NSString * _Nullable codec;
/// :nodoc:
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier label:(NSString * _Nonnull)label bitrate:(NSUInteger)bitrate codec:(NSString * _Nullable)codec OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPQuality (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BMPRemoteControlType : NSInteger;

/// Contains config values which can be used to alter the behaviour of the player when it comes to remote playback.
SWIFT_CLASS_NAMED("RemoteControlConfig")
@interface BMPRemoteControlConfig : NSObject
/// A URL to a CSS file the Chromecast receiver app loads. Can be used to style the receiver app.
@property (nonatomic, copy) NSURL * _Nullable receiverStylesheetUrl;
/// Arbitrary config values that are sent to the remote control receiver.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customReceiverConfig;
/// This block can be used to prepare a different BMPSourceConfig to be used for remote playback that for local
/// playback. This can be useful when the remote playback
/// device supports different streaming formats,  DRM systems, etc. than the local device.
@property (nonatomic, copy) BMPSourceConfig * _Nullable (^ _Nullable prepareSource)(enum BMPRemoteControlType, BMPSourceConfig * _Nonnull);
/// Indicates whether the player should automatically switch to “external playback” mode while the “external
/// screen” mode is active in order to play video content and switch back to “external screen” mode as soon
/// as playback is done.
/// Brief transition may be visible on the external display when automatically switching between the two modes.
/// Default value is <code>false</code>.
/// note:
/// This is only supported with AirPlay.
@property (nonatomic) BOOL usesExternalPlaybackWhileExternalScreenIsActive;
/// Indicates whether cookies and credentials will be sent along manifest requests on the Cast receiver
/// Default value is <code>false</code>.
/// note:
/// This is only supported with CAF (v3) receivers.
@property (nonatomic) BOOL sendManifestRequestsWithCredentials;
/// Indicates whether cookies and credentials will be sent along segment requests on the Cast receiver
/// Default value is <code>false</code>.
/// note:
/// This is only supported with CAF (v3) receivers.
@property (nonatomic) BOOL sendSegmentRequestsWithCredentials;
/// Indicates whether cookies and credentials will be sent along DRM licence requests on the Cast receiver
/// Default value is <code>false</code>.
/// note:
/// This is only supported with CAF (v3) receivers.
@property (nonatomic) BOOL sendDrmLicenseRequestsWithCredentials;
/// Whether the AirPlay option is enabled or not.
/// Default value is <code>true</code>.
/// note:
/// Calling <code>showAirPlayTargetPicker</code> when the value is <code>false</code> will not have any effect.
@property (nonatomic) BOOL isAirPlayEnabled;
/// Whether casting is enabled.
/// Default value is <code>true</code>.
/// Has no effect if the <code>BitmovinCastManager</code> is not initialized.
@property (nonatomic) BOOL isCastEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enumerates the different available remote device types.
typedef SWIFT_ENUM_NAMED(NSInteger, BMPRemoteControlType, "RemoteControlType", open) {
/// The remote device is a GoogleCast compatible device.
  BMPRemoteControlTypeCast = 0,
};

/// Defines the replay behaviour of a playlist.
typedef SWIFT_ENUM_NAMED(NSInteger, BMPReplayMode, "ReplayMode", open) {
/// Replays only the last source.
  BMPReplayModeLastSource = 0,
/// Replays the whole playlist.
  BMPReplayModePlaylist = 1,
};


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS_NAMED("ScalingModeChangedEvent")
@interface BMPScalingModeChangedEvent : BMPPlayerEvent
/// The old scaling mode value
@property (nonatomic, readonly) enum BMPScalingMode from;
/// The new scaling mode value
@property (nonatomic, readonly) enum BMPScalingMode to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initFrom:(enum BMPScalingMode)from to:(enum BMPScalingMode)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describes default properties of the custom SCTE35 tag from the playlist.
SWIFT_CLASS_NAMED("ScteMetadataEntry")
@interface BMPScteMetadataEntry : NSObject <BMPMetadataEntry>
/// Key of the SCTE35 attribute.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// Value of the SCTE35 attribute.
@property (nonatomic, readonly, copy) NSString * _Nullable value;
@property (nonatomic, readonly) enum BMPMetadataType metadataType;
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPSeekPosition;

/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The current position.
@property (nonatomic, readonly, strong) BMPSeekPosition * _Nonnull from;
/// The target position.
@property (nonatomic, readonly, strong) BMPSeekPosition * _Nonnull to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithFrom:(BMPSeekPosition * _Nonnull)from to:(BMPSeekPosition * _Nonnull)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class represent seeking position
SWIFT_CLASS_NAMED("SeekPosition")
@interface BMPSeekPosition : NSObject
/// The relevant <code>Source</code>.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
/// The position within the <code>source</code> in seconds.
@property (nonatomic, readonly) NSTimeInterval time;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The Obj-C version of the SharePlay API. It is empty on purpose as SharePlay can only be used from Swift
SWIFT_CLASS_NAMED("SharePlayApi")
@interface BMPSharePlayApi : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SharePlayEndedEvent") SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface BMPSharePlayEndedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SharePlayStartedEvent") SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface BMPSharePlayStartedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A representation of a temporary break in participation.
/// See <code>SharePlayApi.beginSuspension(for:)</code> method for details on use.
SWIFT_PROTOCOL_NAMED("SharePlaySuspension") SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@protocol BMPSharePlaySuspension
/// The reason for the suspension. This will be communicated to other participants while coordination is suspended.
@property (nonatomic, readonly) AVCoordinatedPlaybackSuspensionReason _Nonnull reason;
/// The begin date of the suspension.
@property (nonatomic, readonly, copy) NSDate * _Nonnull beginDate;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SharePlaySuspensionEndedEvent") SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface BMPSharePlaySuspensionEndedEvent : BMPPlayerEvent
/// The suspension that was ended.
@property (nonatomic, readonly, strong) id <BMPSharePlaySuspension> _Nonnull suspension;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SharePlaySuspensionStartedEvent") SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface BMPSharePlaySuspensionStartedEvent : BMPPlayerEvent
/// The suspension that was started.
@property (nonatomic, readonly, strong) id <BMPSharePlaySuspension> _Nonnull suspension;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol BMPSourceListener;

/// Manages listeners to specific <code>SourceEvent</code> and notifies those listeners when such an event is being
/// emitted.
/// Listeners need to conform to the <code>SourceListener</code> protocol.
/// See <code>SourceListener</code> about possible event method implementations.
SWIFT_PROTOCOL_NAMED("SourceEventHandler")
@protocol BMPSourceEventHandler
/// Adds a <code>SourceListener</code> to a handler.
/// \param listener A instance to a class conforming to <code>SourceListener</code> protocol.
///
- (void)addListener:(id <BMPSourceListener> _Nonnull)listener;
/// Removes a <code>SourceListener</code> to handle <code>SourceEvents</code>.
/// \param listener A instance to a class conforming to <code>SourceListener</code> protocol.
///
- (void)removeListener:(id <BMPSourceListener> _Nonnull)listener;
@end

@class BMPThumbnail;

/// Represents audio and video content that can be loaded into a <code>Player</code>. A Source instance can be created via the
/// <code>SourceFactory.create</code> function and will idle until it is loaded into a player. After loading the source
/// into a player, <code>isAttachedToPlayer</code> is <code>true</code> and the same source can not be loaded into a different player until
/// unloaded.
/// Multiple sources can be loaded into a player as part of a <code>PlaylistConfig</code>, where the first source in the playlist
/// immediately becomes active. When the player transitions to another source in the playlist, that source
/// becomes active. More information on how to manage multiple sources can be found on the <code>PlaylistApi</code>.
/// The source starts out <code>LoadingState.unloaded</code>, transitions to <code>LoadingState.loading</code> once the source starts
/// loading and finally transitions to <code>LoadingState.loaded</code> when it finished loading. When unloaded from a player, the
/// source reverts to being <code>LoadingState.unloaded</code> and detached. After this, the source can be loaded again
/// into a (different) player.
/// The source emits events while it is attached to a player. See <code>SourceEventHandler</code> on how to subscribe to events.
/// The source only emits events of type <code>SourceEvent</code>, and events that are emitted while the source is active
/// are also emitted through the player it is attached to.
/// <h3>Current event-related limitations</h3>
/// Only a few events are currently emitted from the source. This is a temporary limitation until
/// all source events are emitted correctly from the source.
/// See <code>SourceListener</code> for more information about events emitted from the source.
SWIFT_PROTOCOL_NAMED("Source")
@protocol BMPSource <BMPSourceEventHandler>
/// The SourceConfig that was used to configure the source.
@property (nonatomic, readonly, strong) BMPSourceConfig * _Nonnull sourceConfig;
/// Whether the source is currently attached to a player instance (i.e if the source was loaded into a player or
/// it is part of a <code>PlaylistConfig</code> that was loaded into a player).
@property (nonatomic, readonly) BOOL isAttachedToPlayer;
/// Whether the source is currently active in a <code>Player</code> (i.e. playing back or paused).
/// Only one source can be active in the same player instance at any time.
@property (nonatomic, readonly) BOOL isActive;
/// The duration of the source in seconds if it’s a VoD or <code>Double.infinity</code> if it’s a live stream.
/// Default value is <code>0</code> if the duration is not available or not known.
@property (nonatomic, readonly) NSTimeInterval duration;
/// The current <code>LoadingState</code> of the source.
@property (nonatomic, readonly) enum BMPLoadingState loadingState;
/// Metadata for the currently loaded source. All existing metadata will be completely replaced by the provided
/// metadata when the setter is called. For example, if sourceMetadata is an empty object, all existing source
/// metadata will be deleted.
/// Setting new metadata results in a <code>SourceMetadataChanged</code> event to be emitted.
/// The initial value can be set via <code>SourceConfig.metadata</code>.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable metadata;
/// Returns the thumbnail image for a certain time.
/// Requires a configured <code>ThumbnailTrack</code> in the corresponding <code>SourceConfig</code>.
/// note:
/// This function returns <code>nil</code>
/// <ul>
///   <li>
///     If the thumbnails were not loaded yet
///   </li>
///   <li>
///     If there are no <code>ThumbnailTrack</code> provided in the corresponding <code>SourceConfig</code>
///   </li>
///   <li>
///     If there is no thumbnail available at the provided time
///   </li>
/// </ul>
/// \param time The time for which the thumbnail should be returned.
///
///
/// returns:
/// An instance of <code>Thumbnail</code> for the given time, or <code>nil</code>.
- (BMPThumbnail * _Nullable)thumbnailForTime:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SourceAddedEvent")
@interface BMPSourceAddedEvent : BMPPlayerEvent
/// The <code>Source</code> that was added to the playlist.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
/// The index at which the <code>Source</code> was added to the playlist.
/// The value is greater than or equal to zero and does not exceed the
/// number of <code>Source</code>s in the playlist before addition.
@property (nonatomic, readonly) NSInteger index;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSMutableDictionary;

@interface BMPSourceConfig (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, strong) NSMutableDictionary * _Nonnull metadata;
@end



@interface BMPSourceConfig (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, copy) NSString * _Nullable _bmp_uniqueIdentifier;
@property (nonatomic, readonly, copy) NSURL * _Nullable _bmp_sourceUrlForDownload;
@property (nonatomic, readonly) BOOL _bmp_canBeDownloaded;
@property (nonatomic, readonly, copy) NSString * _Nullable _bmp_legacyUniqueIdentifier;
@end


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SourceErrorEvent")
@interface BMPSourceErrorEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum BMPSourceErrorCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) BMPDeficiencyData * _Nullable data;
- (nonnull instancetype)initWithCode:(enum BMPSourceErrorCode)code message:(NSString * _Nonnull)message data:(BMPDeficiencyData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPSourceErrorEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end




/// Factory to create <code>Source</code>s which can be loaded into a Player.
SWIFT_CLASS_NAMED("SourceFactory")
@interface BMPSourceFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a source configured via the provided SourceConfig.
+ (id <BMPSource> _Nonnull)createFrom:(BMPSourceConfig * _Nonnull)sourceConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// Includes all possible methods that an implementation of this protocol can implement.
/// The corresponding method will be called when an event is emitted (if implemented).
SWIFT_PROTOCOL_NAMED("SourceListener")
@protocol BMPSourceListener <NSObject>
@optional
/// Called when the source duration has changed. Not emitted for the initial duration.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onDurationChanged:(BMPDurationChangedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when the <code>Source</code> that started loading.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onSourceLoad:(BMPSourceLoadEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when a <code>Source</code> was loaded. This does not mean that the source is immediately ready for playback.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when the <code>Source</code> started unloading.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onSourceUnload:(BMPSourceUnloadEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when a <code>Source</code> was unloaded.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when a source warning occurred.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onSourceWarning:(BMPSourceWarningEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when a source error occurred.
/// Faulty <code>Source</code>s in a playlist can be removed from this event listener using
/// <code>Player.playlist.remove(sourceAt:)</code>.
/// Limitation: The active <code>Source</code> cannot be removed.
/// Important: The <code>Source</code> has to be removed synchronously.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onSourceError:(BMPSourceErrorEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when metadata is parsed.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onMetadataParsed:(BMPMetadataParsedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called for each occurring player event.
/// \param event An event object holding specific event data.
/// Use <code>event.name</code> or <code>event is Type</code> to check the specific event type.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onEvent:(id <BMPSourceEvent> _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when the drm data was parsed for the specific source.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onDrmDataParsed:(BMPDrmDataParsedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when an audio track is added.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onAudioAdded:(BMPAudioAddedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when an audio track is removed.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onAudioRemoved:(BMPAudioRemovedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when the audio track is changed.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onAudioChanged:(BMPAudioChangedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when a sideloaded subtitle cue has been parsed.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onCueParsed:(BMPCueParsedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when a new <code>SubtitleTrack</code> is added, for example using the <code>Player.addSubtitle()</code> call.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onSubtitleAdded:(BMPSubtitleAddedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when an external <code>SubtitleTrack</code> has been removed so it is possible to update the controls accordingly.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onSubtitleRemoved:(BMPSubtitleRemovedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when the active <code>SubtitleTrack</code> is changed.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onSubtitleChanged:(BMPSubtitleChangedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when the current video download quality has changed.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onVideoDownloadQualityChanged:(BMPVideoDownloadQualityChangedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
/// Called when the current video playback quality has changed.
/// \param event An object holding specific event data.
///
/// \param source The source instance which is associated with the emitted event.
///
- (void)onVideoPlaybackQualityChanged:(BMPVideoPlaybackQualityChangedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
@end


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadEvent")
@interface BMPSourceLoadEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadedEvent")
@interface BMPSourceLoadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPSourceLoadedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SourceMetadataChangedEvent")
@interface BMPSourceMetadataChangedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// Contains metadata which was removed
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable from;
/// Contains metadata which was added
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable to;
- (nonnull instancetype)initWithOldMetadata:(NSDictionary<NSString *, id> * _Nullable)oldMetadata newMetadata:(NSDictionary<NSString *, id> * _Nullable)newMetadata;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SourceRemovedEvent")
@interface BMPSourceRemovedEvent : BMPPlayerEvent
/// The <code>Source</code> that was removed from the playlist.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
/// The index at which the <code>Source</code> was removed from the playlist.
/// The value is greater than or equal to zero and is less than
/// the number of <code>Source</code>s in the playlist before removal.
@property (nonatomic, readonly) NSInteger index;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Types of media which can be handled by the Bitmovin Player.
typedef SWIFT_ENUM_NAMED(NSInteger, BMPSourceType, "SourceType", open) {
/// Indicates a missing source type.
  BMPSourceTypeNone = 0,
/// Indicates media of type HLS.
  BMPSourceTypeHls = 1,
/// Indicates media of type DASH.
  BMPSourceTypeDash = 2,
/// Indicates media of type Progressive MP4.
  BMPSourceTypeProgressive = 3,
/// Indicates already downloaded media in Apple’s <code>movpkg</code> format.
/// This type could be used to playback a locally stored asset.
/// E.g. an asset that was not downloaded using our <code>OfflineManager</code>.
/// The <code>url</code> provided to the <code>SourceConfig</code> has to be a file url starting with <code>file://</code>.
/// Serving a <code>movpkg</code> via HTTP is not supported. If a HTTP url (starting with <code>http(s)://</code>)
/// is provided the initializer will fail and throw an exception.
/// AirPlay of a movpkg is supported when the device has an active network connection.
/// Limitations:
/// <ul>
///   <li>
///     Casting a source of type <code>movpkg</code> is not supported.
///   </li>
///   <li>
///     Playback of a partially downloaded <code>movpkg</code>, e.g. playback while still downloading, is not supported.
///   </li>
/// </ul>
  BMPSourceTypeMovpkg = 4,
};


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadEvent")
@interface BMPSourceUnloadEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadedEvent")
@interface BMPSourceUnloadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SourceWarningEvent")
@interface BMPSourceWarningEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) enum BMPSourceWarningCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) BMPDeficiencyData * _Nullable data;
- (nonnull instancetype)initWithCode:(enum BMPSourceWarningCode)code message:(NSString * _Nonnull)message data:(BMPDeficiencyData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPSourceWarningEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("StallEndedEvent")
@interface BMPStallEndedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("StallStartedEvent")
@interface BMPStallStartedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BMPUserInterfaceType : NSInteger;

/// Contains config values which can be used to alter the visual presentation and behaviour of the player UI.
SWIFT_CLASS_NAMED("StyleConfig")
@interface BMPStyleConfig : NSObject
/// Sets if the the UI should be enabled or not.
/// Default value is <code>true</code>.
@property (nonatomic) BOOL isUiEnabled;
/// Set which user interface type should be used. Default value is <code>UserInterfaceType.bitmovin</code> on <code>iOS</code> and
/// <code>UserInterfaceType.system</code> on <code>tvOS</code>. This setting only applies if <code>StyleConfig#isUiEnabled</code> is set to <code>true</code>.
@property (nonatomic) enum BMPUserInterfaceType userInterfaceType;
/// Set the CSS file that will be used for the UI. The default CSS file will be completely replaced by the CSS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Set a CSS file which contains supplemental styles for the player UI.
/// These styles will be added to the default CSS
/// file or the CSS file set with StyleConfig#playerUiCss.
@property (nonatomic, copy) NSURL * _Nullable supplementalPlayerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Sets the JS file that will be used for the UI. The default JS file will be completely replaced by the JS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiJs SWIFT_AVAILABILITY(tvos,unavailable);
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode.
/// Default value is <code>ScalingMode.fit</code>.
@property (nonatomic) enum BMPScalingMode scalingMode;
/// An optional config object, containing config values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When <code>UserInterfaceType.system</code> is selected, a <code>SystemUserInterfaceConfig</code> can be set.
///   </li>
///   <li>
///     When <code>UserInterfaceType.subtitle</code> is selected, a <code>SubtitleUserInterfaceConfig</code> can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfig * _Nullable userInterfaceConfig;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SubtitleAddedEvent")
@interface BMPSubtitleAddedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// The track that has been added.
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nonnull subtitleTrack;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack OBJC_DESIGNATED_INITIALIZER;
@end


@interface BMPSubtitleAddedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
/// :nodoc:
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SubtitleChangedEvent")
@interface BMPSubtitleChangedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// The track that was previously selected.
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable subtitleTrackOld;
/// The track that is selected now
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable subtitleTrackNew;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithNewSubtitleTrack:(BMPSubtitleTrack * _Nullable)newSubtitleTrack oldSubtitleTrack:(BMPSubtitleTrack * _Nullable)oldSubtitleTrack OBJC_DESIGNATED_INITIALIZER;
@end


@interface BMPSubtitleChangedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
/// :nodoc:
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end

/// The format of a subtitle file
typedef SWIFT_ENUM_NAMED(NSInteger, BMPSubtitleFormat, "SubtitleFormat", open) {
  BMPSubtitleFormatWebVtt = 0,
  BMPSubtitleFormatTtml = 1,
  BMPSubtitleFormatCea = 2,
};


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("SubtitleRemovedEvent")
@interface BMPSubtitleRemovedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// The track that has been removed.
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nonnull subtitleTrack;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack OBJC_DESIGNATED_INITIALIZER;
@end


@interface BMPSubtitleRemovedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
/// :nodoc:
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end

@protocol BMPSubtitleTrackController;

/// Describes a subtitle track.
SWIFT_CLASS_NAMED("SubtitleTrack")
@interface BMPSubtitleTrack : BMPTrack
/// Type of the SubtitleTrack.
/// Default is WebVTT.
@property (nonatomic, readonly) enum BMPSubtitleFormat format;
/// The IETF BCP 47 language tag associated with the subtitle track.
@property (nonatomic, readonly, copy) NSString * _Nullable language;
/// The subtitle track controller for this track.
@property (nonatomic, readonly, strong) id <BMPSubtitleTrackController> _Nonnull controller;
/// Tells if a subtitle track is forced. If set to true it means that the player should automatically select
/// and switch this subtitle according to the selected audio language.
/// Forced subtitles do not appear in <code>BitmovinPlayer.getAvailableSubtitles</code>.
@property (nonatomic, readonly) BOOL isForced;
/// Creates a new subtitle track based on the given URL and provided metadata.
/// \param url The URL to the timed file, e.g. WebVTT file.
///
/// \param format Type of the subtitle track file, WebVTT or TTML.
///
/// \param label The label for this track.
///
/// \param identifier The unique identifier for this track.
///
/// \param isDefaultTrack If set to <code>true</code>, this track would be considered as default.
///
/// \param language The IETF BCP 47 language tag associated with this track
///
/// \param forced If set to <code>true</code>, this track would be considered as forced subtitle track.
///
///
/// returns:
/// A new subtitle track initialized with the given subtitle URL and the provided metadata.
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url format:(enum BMPSubtitleFormat)format label:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack language:(NSString * _Nullable)language forced:(BOOL)forced OBJC_DESIGNATED_INITIALIZER;
/// Creates a new subtitle track based on the given URL and provided metadata.
/// \param url The URL to the timed file, e.g. WebVTT file.
///
/// \param label The label for this track.
///
/// \param identifier The unique identifier for this track.
///
/// \param isDefaultTrack If set to <code>true</code>, this track would be considered as default.
///
/// \param language The IETF BCP 47 language tag associated with this track
///
///
/// returns:
/// A new subtitle track initialized with the given subtitle URL and the provided metadata.
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url label:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack language:(NSString * _Nullable)language;
/// Creates a new subtitle track based on the given URL and provided metadata.
/// \param url The URL to the timed file, e.g. WebVTT file.
///
/// \param format Type of the subtitle track file, WebVTT or TTML.
///
/// \param label The label for this track.
///
/// \param identifier The unique identifier for this track.
///
/// \param isDefaultTrack If set to <code>true</code>, this track would be considered as default.
///
/// \param language The IETF BCP 47 language tag associated with this track
///
///
/// returns:
/// A new subtitle track initialized with the given subtitle URL and the provided metadata.
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url format:(enum BMPSubtitleFormat)format label:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack language:(NSString * _Nullable)language;
/// Creates a new subtitle track based on the given URL and provided metadata.
/// \param url The URL to the timed file, e.g. WebVTT file.
///
/// \param label The label for this track.
///
/// \param identifier The unique identifier for this track.
///
/// \param isDefaultTrack If set to <code>true</code>, this track would be considered as default.
///
/// \param language The IETF BCP 47 language tag associated with this track
///
/// \param forced If set to <code>true</code>, this track would be considered as forced subtitle track.
///
///
/// returns:
/// A new subtitle track initialized with the given subtitle URL and the provided metadata.
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url label:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack language:(NSString * _Nullable)language forced:(BOOL)forced;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url trackType:(enum BMPTrackType)trackType label:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack SWIFT_UNAVAILABLE;
@end



/// Enables external control over the associated BMPSubtitleTrack
SWIFT_PROTOCOL_NAMED("SubtitleTrackController")
@protocol BMPSubtitleTrackController <NSObject>
/// Triggers a <code>CueEnterEvent</code>.
/// <ul>
///   <li>
///     Parameters
///   </li>
///   <li>
///     cue: The <code>Cue</code> that should enter.
///   </li>
/// </ul>
- (void)cueEnter:(BMPCue * _Nonnull)cue;
/// Triggers a <code>CueExitEvent</code>.
/// <ul>
///   <li>
///     Parameters
///   </li>
///   <li>
///     cue: The <code>Cue</code> that should exit.
///   </li>
/// </ul>
- (void)cueExit:(BMPCue * _Nonnull)cue;
@end


/// Contains config values that can be used to alter the visual presentation and behaviour when the subtitle
/// only UI is used.
SWIFT_CLASS_NAMED("SubtitleUserInterfaceConfig")
@interface BMPSubtitleUserInterfaceConfig : BMPUserInterfaceConfig
/// An array of text style rules to apply to WebVTT subtitles and other legible text.
@property (nonatomic, copy) NSArray<AVTextStyleRule *> * _Nullable subtitleStyles;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIMenuElement;
@class UIAction;
@class UIViewController;

/// The <code>SystemUiApi</code> for interactions regarding the system UI. Using this API just has an effect if <code>userInterfaceType</code>
/// in <code>StyleConfig</code> is set to <code>.system</code>. This is the default value on tvOS, on iOS it has to be set specifically.
SWIFT_PROTOCOL_NAMED("SystemUiApi")
@protocol BMPSystemUiApi
/// An array of actions and menus to display with the default player controls.
/// Contains the currently displayed items. Items can be added and removed dynamically at any time.
/// The initial state can be configured using <code>SystemUserInterfaceConfig.transportBarCustomMenuItems</code>
/// Use this property to display custom pop-up menus in transport bar. This property only supports menu elements of
/// type <code>UIAction</code> and <code>UIMenu</code>, and supports displaying inline one level of submenus.
@property (nonatomic, copy) NSArray<UIMenuElement *> * _Nonnull transportBarCustomMenuItems SWIFT_AVAILABILITY(ios,introduced=13.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,unavailable);
/// An array of actions to present in the Info content view.
/// Default value is a single action that plays the current media from the beginning when tapped.
/// The Info content view can display up to two custom action controls along its trailing edge.
/// Contains the currently presented actions.
/// The default value (if present) can be replaced, an additional action can be added, or set this property
/// value to an empty array to display no actions.
@property (nonatomic, copy) NSArray<UIAction *> * _Nonnull infoViewActions SWIFT_AVAILABILITY(ios,introduced=13.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,unavailable);
/// An array of view controllers to display as content tabs in the player user interface.
/// A default Info tab is displayed as the first content tab if <code>SourceConfig.title</code>
/// and <code>SourceConfig.sourceDescription</code> are not <code>nil</code>. This default tab cannot be modified.
/// If <code>SystemUserInterfaceConfig.showInfoViews</code> is set to <code>false</code>, no content tabs are displayed.
/// Custom tabs can be defined by creating subclasses of <code>UIViewController</code> and appending them to this array.
/// important:
/// Initialize the custom view controller’s <code>title</code> property value before setting it on this property.
/// The system uses the custom view controller’s <code>title</code> as the tab title.
/// important:
/// The view controller whose view has the greatest height determines the height for all
/// tab’s content views. Set the height of content views consistently using <code>preferredContentSize</code> to
/// simplify layout, or define appropriate auto layout constraints on their views.
@property (nonatomic, copy) NSArray<UIViewController *> * _Nonnull customInfoViewControllers SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,unavailable);
@end


/// Contains config values that can be used to alter the visual presentation and behaviour when the System
/// UI is used.
SWIFT_CLASS_NAMED("SystemUserInterfaceConfig")
@interface BMPSystemUserInterfaceConfig : BMPUserInterfaceConfig
/// An array of text style rules to apply to WebVTT subtitles and other legible text.
@property (nonatomic, copy) NSArray<AVTextStyleRule *> * _Nullable subtitleStyles;
/// When set to true the first frame of the main content will not be rendered before playback starts.
/// Default is <code>false</code>.
/// To reliably hide the first frame before a pre-roll ad, please ensure that you are using the
/// <code>AdvertisingConfiguration</code> to schedule ads and not the scheduleAd API call.
@property (nonatomic) BOOL hideFirstFrame;
/// Indicates whether to show the ‘Auto’ option when choosing subtitles or not.
/// Defaults to <code>true</code>.
/// This property is only available on tvOS.
@property (nonatomic) BOOL showAutoSubtitleOption SWIFT_AVAILABILITY(tvos,introduced=12) SWIFT_AVAILABILITY(ios,unavailable);
/// Indicates whether to show the seek bar and related controls during user interaction.
/// Default is <code>true</code>.
/// Depending on the tvOS version this property has a different behaviour:
/// <ul>
///   <li>
///     On tvOS 14 and below it controls the seek bar visibility.
///     Set this property to <code>false</code> to selectively prevent the seek bar from being displayed during user interaction.
///   </li>
///   <li>
///     On tvOS 15 and above it controls the seek bar and audio/subtitle track selection views visibility.
///     Set this property to <code>false</code> to selectively prevent the seek bar and audio/subtitle track selection views from
///     being displayed during user interaction.
///   </li>
/// </ul>
/// This property is only available on tvOS.
/// The new tvOS 15 System UI is only used when the app is built using Xcode 13.
@property (nonatomic) BOOL showSeekBar SWIFT_AVAILABILITY(tvos,introduced=12) SWIFT_AVAILABILITY(ios,unavailable);
/// Indicates whether to show the views for video metadata, navigation markers and playback settings when requested
/// by the user.
/// Default is <code>true</code>.
/// Depending on the tvOS version this property has a different behaviour:
/// <ul>
///   <li>
///     On tvOS 14 and below it controls the visibility of the info views which contains the media information and
///     audio/subtitle track selection.
///     If no <code>AVNavigationMarkersGroup</code>s or <code>AVMetadataItem</code>s are set, only the audio/subtitle selection view is shown.
///   </li>
///   <li>
///     On tvOS 15 and above it controls the visibility of the info views which contains the media information and
///     chapters if <code>AVNavigationMarkersGroup</code>s are configured. (The audio/subtitle selected was removed
///     from the info view)
///     If no <code>AVNavigationMarkersGroup</code>s or <code>AVMetadataItem</code>s are set, the info view isn’t shown.
///   </li>
/// </ul>
/// Set this property to <code>false</code> to selectively prevent the info views from being displayed during user interaction.
/// This property is only available on tvOS.
/// The new tvOS 15 System UI is only used when the app is built using Xcode 13.
@property (nonatomic) BOOL showInfoViews SWIFT_AVAILABILITY(tvos,introduced=12.0) SWIFT_AVAILABILITY(ios,unavailable);
/// Indicates whether the title is shown above the seek bar.
/// Default is <code>true</code>.
/// Set this property to <code>false</code> to selectively prevent the title from being displayed.
/// If <code>showSeekBar</code> is <code>false</code>, this property won’t have an effect.
/// This property is only available on tvOS 15 and above.
@property (nonatomic) BOOL showTitleInSeekBar SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,unavailable);
/// An array of actions and menus to display with the default player controls.
/// Empty by default.
/// Use this property to display custom pop-up menus in transport bar. This property only supports menu elements of
/// type <code>UIAction</code> and <code>UIMenu</code>, and supports displaying inline one level of submenus.
@property (nonatomic, copy) NSArray<UIMenuElement *> * _Nonnull transportBarCustomMenuItems SWIFT_AVAILABILITY(ios,introduced=13.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,unavailable);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Describes a thumbnail track.
SWIFT_CLASS_NAMED("ThumbnailTrack")
@interface BMPThumbnailTrack : BMPTrack
/// Creates a new thumbnail track based on the given URL and provided metadata.
/// \param url The URL to the timed file, i.e. WebVTT file.
///
/// \param label The label for this track.
///
/// \param identifier The unique identifier for this track.
///
/// \param isDefaultTrack If set to <code>true</code>, this track would be considered as default.
///
///
/// returns:
/// A new <code>ThumbnailTrack</code> initialized with the given thumbnail URL and the provided metadata.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url label:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url trackType:(enum BMPTrackType)trackType label:(NSString * _Nonnull)label identifier:(NSString * _Nonnull)identifier isDefaultTrack:(BOOL)isDefaultTrack SWIFT_UNAVAILABLE;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("TimeChangedEvent")
@interface BMPTimeChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The <code>currentTime</code> of the player at which this event was emitted.
@property (nonatomic, readonly) NSTimeInterval currentTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithCurrentTime:(NSTimeInterval)currentTime OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface BMPTrack (SWIFT_EXTENSION(BitmovinPlayer)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPTrack (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

/// The type of a track object.
typedef SWIFT_ENUM_NAMED(NSInteger, BMPTrackType, "TrackType", open) {
/// Indicates a missing type
  BMPTrackTypeNone = 0,
/// Indicates a track containing textual data like the <code>SubtitleTrack</code>
  BMPTrackTypeText = 1,
/// Indicates a track containing thumbnail data like the <code>ThumbnailTrack</code>
  BMPTrackTypeThumbnail = 2,
/// Indicates a track containing audio data like the <code>AudioTrack</code>
  BMPTrackTypeAudio = 3,
};

enum BMPUnstallingBehaviour : NSUInteger;

/// This configuration is used as an incubator for experimental features.
/// Tweaks are not officially supported and are not guaranteed to be stable, i.e.
/// their naming, functionality and API can change at any time within the tweaks
/// or when being promoted to an official feature and moved into its final
/// configuration namespace.
SWIFT_CLASS_NAMED("TweaksConfig")
@interface BMPTweaksConfig : NSObject
/// If enabled, HLS playlists will be parsed and additional features and events are enabled.
/// This includes:
/// <ul>
///   <li>
///     <code>MetadataEvent</code>s carrying segment-specific metadata for custom HLS tags, like <code>#EXT-X-SCTE35</code>
///   </li>
///   <li>
///     <code>MetadataParsedEvent</code>s carrying segment-specific metadata for custom HLS tags, like <code>#EXT-X-SCTE35</code>
///   </li>
///   <li>
///     <code>DrmDataParsedEvent</code>s when a #EXT-X-KEY is found
///   </li>
///   <li>
///     <code>Player.availableVideoQualities</code> includes additional information
///   </li>
///   <li>
///     Automatic retries when HLS playlist requests failed with non-2xx HTTP status code
///   </li>
/// </ul>
/// Default is <code>false</code>.
@property (nonatomic) BOOL isNativeHlsParsingEnabled;
/// If enabled, playlists will be downloaded by the Bitmovin Player SDK instead of <code>AVFoundation</code>.
/// This enables additional features and events, like:
/// <ul>
///   <li>
///     <code>DownloadFinishedEvent</code>s for playlist downloads
///   </li>
///   <li>
///     <code>SourceWarningEvent</code>s when no <code>#EXT-X-PLAYLIST-TYPE</code> is found
///   </li>
/// </ul>
/// If set to <code>false</code>, enabling <code>nativeHlsParsingEnabled</code> won’t have any effect.
/// Default is <code>true</code>.
@property (nonatomic) BOOL isCustomHlsLoadingEnabled;
/// The frequency in seconds <code>PlayerListener#onTimeChanged</code> is called with <code>TimeChangedEvents</code>.
/// Default is 1. Minimum is 0.025.
@property (nonatomic) NSTimeInterval timeChangedInterval;
/// When duration for subtitle tracks mismatch between
/// the HLS manifest and the subtitle track, this can cause the player to get stalled or prevent it from
/// rendering subtitles after seeking. This can be avoided by deselecting subtitles during seeking and reselecting
/// them afterwards.
/// If set to <code>true</code>, active subtitle track will be deselected before seeking and reselected when seeking finished.
/// No subtitle change related events will be fired.
/// If set to false, no changes are applied to subtitle selection on seeking.
/// Default is <code>false</code>.
@property (nonatomic) BOOL disableSubtitleTracksWhileSeeking SWIFT_DEPRECATED_MSG("\n                 This tweak is deprecated and will be removed without replacement in an upcoming minor version!\n                 ");
/// The threshold which will be applied when seeking to the end in seconds.
/// This value will be used to calculate the maximum seekable time when calling <code>player.seek(time:)</code> or
/// <code>player.playlist.seek(source:time:)</code>, so the maximum value will be <code>duration - seekToEndThreshold</code>.
/// This is useful if the duration of the segments does not match the duration specified in the manifest.
/// In this case, if we try to seek to the end, <code>AVPlayer</code> could get stuck and might stall forever
/// Therefore increasing this value could help.
/// Default is <code>0.5</code>.
@property (nonatomic) NSTimeInterval seekToEndThreshold;
/// Specifies the player behaviour when <code>Player.play</code> is called.
/// Default is <code>PlaybackStartBehaviour.relaxed</code>.
@property (nonatomic) enum BMPPlaybackStartBehaviour playbackStartBehaviour;
/// Specifies the player behaviour when stalling should be exited.
/// Default is <code>UnstallingBehaviour.relaxed</code>.
@property (nonatomic) enum BMPUnstallingBehaviour unstallingBehaviour;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("UnmutedEvent")
@interface BMPUnmutedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Specifies the player behaviour when stalling should be exited.
typedef SWIFT_ENUM_NAMED(NSUInteger, BMPUnstallingBehaviour, "UnstallingBehaviour", open) {
/// The player will wait until the buffer is filled that it can, most likely,
/// ensure continuous playback without another stalling right after playback continued.
  BMPUnstallingBehaviourRelaxed = 0,
/// The player will try to unstall as soon as some media data became available and will
/// start playback of this media immediately.
  BMPUnstallingBehaviourAggressive = 1,
};





/// Indicates which type of UI should be used.
typedef SWIFT_ENUM_NAMED(NSInteger, BMPUserInterfaceType, "UserInterfaceType", open) {
/// Indicates that Bitmovin’s customizable UI should be used.
  BMPUserInterfaceTypeBitmovin = 0,
/// Indicates that the system UI should be used.
  BMPUserInterfaceTypeSystem = 1,
/// Indicates that only subtitles should be displayed along with the video content
  BMPUserInterfaceTypeSubtitle = 2,
};

@class BMPVideoQuality;

/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("VideoDownloadQualityChangedEvent")
@interface BMPVideoDownloadQualityChangedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// Previous video quality
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQualityOld;
/// New video quality
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQualityNew;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithNewVideoQuality:(BMPVideoQuality * _Nullable)newVideoQuality oldVideoQuality:(BMPVideoQuality * _Nullable)oldVideoQuality OBJC_DESIGNATED_INITIALIZER;
@end


@interface BMPVideoDownloadQualityChangedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>SourceListener</code> for more information on this event.
SWIFT_CLASS_NAMED("VideoPlaybackQualityChangedEvent")
@interface BMPVideoPlaybackQualityChangedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// Previous video quality. It is <code>nil</code> when the event is fired for the initial change to a video quality.
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQualityOld;
/// New video quality.
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nonnull videoQualityNew;
- (nonnull instancetype)initWithVideoQualityOld:(BMPVideoQuality * _Nullable)videoQualityOld videoQualityNew:(BMPVideoQuality * _Nonnull)videoQualityNew OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Quality definition of a video representation.
SWIFT_CLASS_NAMED("VideoQuality")
@interface BMPVideoQuality : BMPQuality
/// The width of the video representation.
@property (nonatomic, readonly) NSUInteger width;
/// The height of the video representation.
@property (nonatomic, readonly) NSUInteger height;
/// Creates a quality definition for a video representation based on the provided data.
/// \param identifier The unique identifier of the video representation.
///
/// \param label The label of the video representation that should be exposed to the user (e.g. in the UI).
///
/// \param bitrate The bitrate of the video representation.
///
/// \param codec The codec of the video representation.
///
/// \param width The width of the video representation.
///
/// \param height The height of the video representation.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier label:(NSString * _Nonnull)label bitrate:(NSUInteger)bitrate codec:(NSString * _Nullable)codec width:(NSUInteger)width height:(NSUInteger)height OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier label:(NSString * _Nonnull)label bitrate:(NSUInteger)bitrate codec:(NSString * _Nullable)codec SWIFT_UNAVAILABLE;
@end


@interface BMPVideoQuality (SWIFT_EXTENSION(BitmovinPlayer))
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("VideoSizeChangedEvent")
@interface BMPVideoSizeChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("VttLine")
@interface BMPVttLine : NSObject
/// Defines the type of the <code>VttLine</code> value, set to auto or to an actual numeric value
/// Default: VttLineValueTypeAuto
@property (nonatomic, readonly) enum BMPVttLineValueType type;
/// The actual value for the line property
/// note:
/// When type is set to <code>VttLineValueTypeAuto</code> the value should be ignored
@property (nonatomic, readonly) double value;
/// :nodoc:
+ (BMPVttLine * _Nonnull)_createWithType:(enum BMPVttLineValueType)type value:(double)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPVttLine (SWIFT_EXTENSION(BitmovinPlayer)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("VttPosition")
@interface BMPVttPosition : NSObject
/// Defines the type of the <code>VttPosition</code> value, set to auto or to an actual numeric value
/// Default: VttPositionValueTypeAuto
@property (nonatomic, readonly) enum BMPVttPositionValueType type;
/// The actual value for the position property
/// note:
/// When type is set to <code>VttPositionValueTypeAuto</code> the value should be ignored
@property (nonatomic, readonly) double value;
/// :nodoc:
+ (BMPVttPosition * _Nonnull)_createWithType:(enum BMPVttPositionValueType)type value:(double)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPVttPosition (SWIFT_EXTENSION(BitmovinPlayer)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("VttProperties")
@interface BMPVttProperties : NSObject
/// Returns the writing direction
/// Default: VttVerticalUnset
/// note:
/// <code>VttVerticalUnset</code> means the writing direction should be horizontal
@property (nonatomic, readonly) BMPVttVertical _Nonnull vertical;
/// Returns the vertical position of the cue box
@property (nonatomic, readonly, strong) BMPVttLine * _Nonnull line;
/// Returns the alignment of the line property
/// note:
/// See <code>VttLineAlign</code> for more information
@property (nonatomic, readonly) BMPVttLineAlign _Nonnull lineAlign;
/// Returns whether the line attribute should be interpreted as absolute line number or as relative position
@property (nonatomic, readonly) BOOL snapToLines;
/// Returns the size of the cue box relative to the video dimensions
/// Default: 100
/// note:
/// If the writing direction is horizontal, then the size percentages are relative
/// to the width of the video, otherwise to the height of the video
@property (nonatomic, readonly) double size;
/// Returns the text alignment inside the cue box
@property (nonatomic, readonly) BMPVttAlign _Nonnull align;
/// Returns the horizontal position of the cue box
@property (nonatomic, readonly, strong) BMPVttPosition * _Nonnull position;
/// Returns the alignment of the line property
/// Default: VttPositionAlignAuto
/// note:
/// See <code>VttPositionAlign</code> for more information
@property (nonatomic, readonly) BMPVttPositionAlign _Nonnull positionAlign;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// :nodoc:
+ (BMPVttProperties * _Nonnull)_createWithVertical:(BMPVttVertical _Nonnull)vertical line:(BMPVttLine * _Nonnull)line lineAlign:(BMPVttLineAlign _Nonnull)lineAlign snapToLines:(BOOL)snapToLines size:(double)size align:(BMPVttAlign _Nonnull)align position:(BMPVttPosition * _Nonnull)position positionAlign:(BMPVttPositionAlign _Nonnull)positionAlign SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPVttProperties (SWIFT_EXTENSION(BitmovinPlayer)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPVttProperties (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a Widevine DRM config.
SWIFT_CLASS_NAMED("WidevineConfig")
@interface BMPWidevineConfig : BMPDrmConfig
/// A dictionary to specify custom HTTP headers for the license request.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull licenseRequestHeaders;
/// Specifies how long in milliseconds should be waited before a license request should be retried. Default is 0.
@property (nonatomic) NSUInteger licenseRequestRetryDelay;
/// Specifies how often a license request should be retried
/// if it was not successful (e.g. the license server was not reachable).
/// Default is 1. Assigning 0 disables retries.
@property (nonatomic) NSUInteger maxLicenseRequestRetries;
/// A JSON string which allows to specify config options of the DRM key system, such as
/// distinctiveIdentifier or persistentState.
@property (nonatomic, copy) NSString * _Nullable mediaKeySystemConfig;
/// Creates a new <code>WidevineConfig</code> based on the given license URL.
/// \param licenseUrl The URL to the license server.
///
///
/// returns:
/// A new Widevine config initialized with the given license URL.
- (nonnull instancetype)initWithLicenseUrl:(NSURL * _Nullable)licenseUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLicenseUrl:(NSURL * _Nullable)licenseUrl uuid:(NSUUID * _Nonnull)uuid SWIFT_UNAVAILABLE;
@end



@interface BMPWidevineConfig (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfig * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end

@class AVPlayerViewController;

SWIFT_PROTOCOL_NAMED("_AVPlayerViewControllerListener")
@protocol _BMPAVPlayerViewControllerListener
@optional
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerFailedToStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController willTransitionToVisibilityOfTransportBar:(BOOL)visible;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController didChangeVideoGravity:(AVLayerVideoGravity _Nonnull)oldVideoGravity newVideoGravity:(AVLayerVideoGravity _Nonnull)newVideoGravity;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
@end

@class _BMPPersistentArchive;

/// Handles the interaction with the archive where we store metadata about the offline content.
/// In addition it provides URLs which are needed from time to time.
SWIFT_PROTOCOL_NAMED("_ArchiveHelper")
@protocol _BMPArchiveHelper
/// Unique identifier of the source
@property (nonatomic, readonly, copy) NSString * _Nullable sourceIdentifier;
/// The archive storing all offline related custom metadata
@property (nonatomic, readonly, strong) _BMPPersistentArchive * _Nullable archive;
/// The URL to the directory where the archive / plist file is stored
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentDirectoryUrl;
/// The URL to the MOVPKG aka the downloaded video / content
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentUrl;
/// Convenience method to check if we have stored content
@property (nonatomic, readonly) BOOL isStored;
@end

@class _BMPHashedIdentifier;
@protocol _BMPLogger;

SWIFT_CLASS_NAMED("_ArchiveHelperFactory")
@interface _BMPArchiveHelperFactory : NSObject
+ (id <_BMPArchiveHelper> _Nonnull)createForSourceConfig:(BMPSourceConfig * _Nonnull)sourceConfig withIdentifier:(_BMPHashedIdentifier * _Nonnull)id logger:(id <_BMPLogger> _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class _BMPAVPlayerItem;
@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVQueuePlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToDate:(NSDate * _Nonnull)date completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToDate:(NSDate * _Nonnull)date;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)cancelPendingSeeks;
- (nonnull instancetype)initWithItems:(NSArray<AVPlayerItem *> * _Nonnull)items SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end


@interface _BMPAVPlayerItem (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) float timebaseEffectiveRate;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
- (void)logWithPrefix:(NSString * _Nonnull)prefix message:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
- (void)logWithPrefix:(NSString * _Nonnull)prefix message:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end

@protocol _BMPViewHierarchyHandler;
@protocol _BMPUserInterfaceEventEmitter;

SWIFT_CLASS_NAMED("_BitmovinPlayerUIController")
@interface _BMPBitmovinPlayerUIController : NSObject
@property (nonatomic, weak) id <BMPPlayer> _Nullable player;
@property (nonatomic) BOOL areControlsShown;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayer> _Nonnull)player playerView:(BMPPlayerView * _Nonnull)playerView viewHierarchyHandler:(id <_BMPViewHierarchyHandler> _Nonnull)viewHierarchyHandler uiEventEmitter:(id <_BMPUserInterfaceEventEmitter> _Nonnull)uiEventEmitter userInterfaceConfig:(BMPBitmovinUserInterfaceConfig * _Nullable)userInterfaceConfig pictureInPictureConfig:(BMPPictureInPictureConfig * _Nonnull)pictureInPictureConfig logger:(id <_BMPLogger> _Nonnull)logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
@class WKFrameInfo;

@interface _BMPBitmovinPlayerUIController (SWIFT_EXTENSION(BitmovinPlayer)) <WKUIDelegate>
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptTextInputPanelWithPrompt:(NSString * _Nonnull)prompt defaultText:(NSString * _Nullable)defaultText initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
@end


@interface _BMPBitmovinPlayerUIController (SWIFT_EXTENSION(BitmovinPlayer))
- (void)uiReady;
- (void)controlsWillShow;
- (void)controlsWillHide;
@end


SWIFT_PROTOCOL_NAMED("_PlayerUIController")
@protocol _BMPPlayerUIController <NSObject>
@property (nonatomic, weak) id <BMPPlayer> _Nullable player;
@property (nonatomic, readonly) BOOL areControlsShown;
@property (nonatomic, readonly) BOOL hasOwnPlayerLayer;
@property (nonatomic, readonly) BOOL isPictureInPicture;
@property (nonatomic) enum BMPScalingMode scalingMode;
@property (nonatomic, readonly, strong) UIView * _Nullable rootView;
@property (nonatomic) BOOL showSkipControlsInPictureInPicture SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (void)destroy;
@optional
- (void)willRotate;
- (void)didRotate;
@end


@interface _BMPBitmovinPlayerUIController (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerUIController>
@property (nonatomic) enum BMPScalingMode scalingMode;
@property (nonatomic, readonly) BOOL hasOwnPlayerLayer;
@property (nonatomic, readonly) BOOL isPictureInPicture;
@property (nonatomic, readonly, strong) UIView * _Nullable rootView;
@property (nonatomic) BOOL showSkipControlsInPictureInPicture SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (void)destroy;
- (void)willRotate;
- (void)didRotate;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferApi_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferApi_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <_BMPService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPCafDrmConfig (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPJsonEncodable>
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS_NAMED("_CafSourceOptions")
@interface _BMPCafSourceOptions : NSObject <_BMPJsonEncodable>
- (nonnull instancetype)initWithSendManifestRequestsWithCredentials:(BOOL)sendManifestRequestsWithCredentials sendSegmentRequestsWithCredentials:(BOOL)sendSegmentRequestsWithCredentials OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_ConfigService")
@protocol _BMPConfigService
/// The Bitmovin Player license key, as defined in PlayerConfig.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// Holds a reference to the current player config.
@property (nonatomic, readonly, strong) BMPPlayerConfig * _Nonnull playerConfig;
/// Returns <code>true</code> if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If <code>false</code> is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
@end

@protocol _BMPLegacySourceInternal;

/// Provides the current active <code>Source</code> within the configured playlist
SWIFT_PROTOCOL_NAMED("_CurrentSourceProvider")
@protocol _BMPCurrentSourceProvider
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable currentSource;
@end


/// Purpose of this protocol is to abstract away the query of current date,
/// and discourage the usage of <code>Date()</code>
/// Benefit of this that by employing this protocol, any current date specific
/// functionality can be unit tested effortlessly
SWIFT_PROTOCOL_NAMED("_DateTimeProvider")
@protocol _BMPDateTimeProvider
@property (nonatomic, readonly, copy) NSDate * _Nonnull currentDate;
@end


SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithCurrentSourceProvider:(id <_BMPCurrentSourceProvider> _Nonnull)currentSourceProvider OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end


SWIFT_CLASS_NAMED("_DefaultAvailableTracksFetchedEvent")
@interface _BMPDefaultAvailableTracksFetchedEvent : NSObject <BMPAvailableTracksFetchedEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) BMPOfflineTrackSelection * _Nonnull tracks;
- (nonnull instancetype)initWithTracks:(BMPOfflineTrackSelection * _Nonnull)tracks OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol _BMPPlayerEventEmitter;
@protocol _BMPPlaylistSourcesProvider;

SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter configService:(id <_BMPConfigService> _Nonnull)configService playlistSourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)playlistSourcesProvider currentSourceProvider:(id <_BMPCurrentSourceProvider> _Nonnull)currentSourceProvider OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalSourceAdded:(_BMPInternalSourceAddedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
- (void)onInternalPlayerUnload:(_BMPInternalPlayerUnloadEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
@end


SWIFT_CLASS_NAMED("_DefaultContentDownloadCanceledEvent")
@interface _BMPDefaultContentDownloadCanceledEvent : NSObject <BMPContentDownloadCanceledEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_DefaultContentDownloadFinishedEvent")
@interface _BMPDefaultContentDownloadFinishedEvent : NSObject <BMPContentDownloadFinishedEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_DefaultContentDownloadProgressChangedEvent")
@interface _BMPDefaultContentDownloadProgressChangedEvent : NSObject <BMPContentDownloadProgressChangedEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) double progress;
- (nonnull instancetype)initWithProgress:(double)progress OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_DefaultContentDownloadResumedEvent")
@interface _BMPDefaultContentDownloadResumedEvent : NSObject <BMPContentDownloadResumedEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) double progress;
- (nonnull instancetype)initWithProgress:(double)progress OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_DefaultContentDownloadSuspendedEvent")
@interface _BMPDefaultContentDownloadSuspendedEvent : NSObject <BMPContentDownloadSuspendedEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_DefaultContentUrlMigrationFinishedEvent")
@interface _BMPDefaultContentUrlMigrationFinishedEvent : NSObject <BMPContentUrlMigrationFinishedEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSURL * _Nonnull from;
@property (nonatomic, readonly, copy) NSURL * _Nonnull to;
- (nonnull instancetype)initFrom:(NSURL * _Nonnull)from to:(NSURL * _Nonnull)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(enum BMPPlayerErrorCode)code data:(BMPDeficiencyData * _Nullable)data;
- (void)throwErrorWithCode:(enum BMPPlayerErrorCode)code message:(NSString * _Nonnull)message data:(BMPDeficiencyData * _Nullable)data;
- (void)throwError:(enum BMPPlayerErrorCode)code replacements:(NSArray<NSString *> * _Nullable)replacements data:(BMPDeficiencyData * _Nullable)data;
- (void)throwWarning:(enum BMPPlayerWarningCode)code data:(BMPDeficiencyData * _Nullable)data;
- (void)throwWarning:(enum BMPPlayerWarningCode)code replacements:(NSArray<NSString *> * _Nullable)replacements data:(BMPDeficiencyData * _Nullable)data;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter logger:(id <_BMPLogger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(enum BMPPlayerErrorCode)code data:(BMPDeficiencyData * _Nullable)data;
- (void)throwErrorWithCode:(enum BMPPlayerErrorCode)code message:(NSString * _Nonnull)message data:(BMPDeficiencyData * _Nullable)data;
- (void)throwError:(enum BMPPlayerErrorCode)code replacements:(NSArray<NSString *> * _Nullable)replacements data:(BMPDeficiencyData * _Nullable)data;
- (void)throwWarning:(enum BMPPlayerWarningCode)code data:(BMPDeficiencyData * _Nullable)data;
- (void)throwWarning:(enum BMPPlayerWarningCode)code replacements:(NSArray<NSString *> * _Nullable)replacements data:(BMPDeficiencyData * _Nullable)data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol _BMPEventSuppressor;

SWIFT_PROTOCOL_NAMED("_PlayerEventEmitter")
@protocol _BMPPlayerEventEmitter <BMPPlayerEventHandler, _BMPService>
@property (nonatomic, readonly, strong) id <_BMPEventSuppressor> _Nonnull eventSuppressor;
- (void)emitPlayerEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPPlayerEventEmitter>
@property (nonatomic, readonly, strong) id <_BMPEventSuppressor> _Nonnull eventSuppressor;
@property (nonatomic, readonly) _BMPServiceType type;
- (void)emitPlayerEvent:(BMPPlayerEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_SourceEventEmitter")
@protocol _BMPSourceEventEmitter
- (void)emitWithEvent:(id <BMPSourceEvent> _Nonnull)event isInternal:(BOOL)isInternal;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPSourceEventEmitter>
- (void)emitWithEvent:(id <BMPSourceEvent> _Nonnull)event isInternal:(BOOL)isInternal;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end


/// Component to suppress public events
SWIFT_PROTOCOL_NAMED("_EventSuppressor")
@protocol _BMPEventSuppressor
/// Registers the given event type to the suppressed event collection
/// This will produce an exception when an internal event type is passed
- (void)suppressWithEventType:(Class <BMPEvent> _Nonnull)eventType;
/// Unregisters the given event type from the suppressed event collection
- (void)removeSuppressionWithEventType:(Class <BMPEvent> _Nonnull)eventType;
/// Checks if the given event type should currently be suppressed.
- (BOOL)isSuppressedWithEventType:(Class <BMPEvent> _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultEventSuppressor")
@interface _BMPDefaultEventSuppressor : NSObject <_BMPEventSuppressor>
- (void)suppressWithEventType:(Class <BMPEvent> _Nonnull)eventType;
- (void)removeSuppressionWithEventType:(Class <BMPEvent> _Nonnull)eventType;
- (BOOL)isSuppressedWithEventType:(Class <BMPEvent> _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol _BMPFairplayHandler;

SWIFT_PROTOCOL_NAMED("_FairplayHandlerFactory")
@protocol _BMPFairplayHandlerFactory
- (id <_BMPFairplayHandler> _Nonnull)createWithFairplayConfig:(BMPFairplayConfig * _Nonnull)fairplayConfig networkConfig:(BMPNetworkConfig * _Nullable)networkConfig offlineLicenseStorage:(id <_BMPOfflineFairplayLicenseStorage> _Nullable)offlineLicenseStorage logger:(id <_BMPLogger> _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultFairplayHandlerFactory")
@interface _BMPDefaultFairplayHandlerFactory : NSObject <_BMPFairplayHandlerFactory>
- (id <_BMPFairplayHandler> _Nonnull)createWithFairplayConfig:(BMPFairplayConfig * _Nonnull)fairplayConfig networkConfig:(BMPNetworkConfig * _Nullable)networkConfig offlineLicenseStorage:(id <_BMPOfflineFairplayLicenseStorage> _Nullable)offlineLicenseStorage logger:(id <_BMPLogger> _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Helper to access the file system
SWIFT_PROTOCOL_NAMED("_FileSystemHelper")
@protocol _BMPFileSystemHelper
/// Returns the total size of the folder at given path in bytes
/// \param path path to the folder
///
///
/// returns:
/// the total size in bytes, wrapped in <code>NSNumber</code> in order to support Objective-C interop
- (NSNumber * _Nullable)calculateTotalSizeOfFolderAt:(NSURL * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultFileSystemHelper")
@interface _BMPDefaultFileSystemHelper : NSObject <_BMPFileSystemHelper>
- (nonnull instancetype)init;
- (NSNumber * _Nullable)calculateTotalSizeOfFolderAt:(NSURL * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSHTTPURLResponse;

SWIFT_PROTOCOL_NAMED("_HttpResponseFactory")
@protocol _BMPHttpResponseFactory
- (BMPHttpResponse * _Nonnull)createWithResponse:(NSHTTPURLResponse * _Nonnull)response request:(BMPHttpRequest * _Nonnull)request body:(NSData * _Nullable)body SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultHttpResponseFactory")
@interface _BMPDefaultHttpResponseFactory : NSObject <_BMPHttpResponseFactory>
- (BMPHttpResponse * _Nonnull)createWithResponse:(NSHTTPURLResponse * _Nonnull)response request:(BMPHttpRequest * _Nonnull)request body:(NSData * _Nullable)body SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
- (void)setup:(BMPPlayerConfig * _Nonnull)playerConfig;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
- (nonnull instancetype)initWithPlayer:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)setup:(BMPPlayerConfig * _Nonnull)playerConfig;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
@end

@class AVMediaSelectionOption;
@class AVMediaSelection;

SWIFT_PROTOCOL_NAMED("_MediaSelectionHelper")
@protocol _BMPMediaSelectionHelper
- (NSArray<AVMediaSelectionOption *> * _Nonnull)optionsToDownloadFrom:(NSArray<AVMediaSelectionOption *> * _Nonnull)options using:(BMPOfflineTrackSelection * _Nullable)trackSelection SWIFT_WARN_UNUSED_RESULT;
- (NSArray<AVMediaSelection *> * _Nonnull)mediaSelectionsToDownloadForAsset:(AVURLAsset * _Nonnull)asset usingTrackSelection:(BMPOfflineTrackSelection * _Nullable)trackSelection SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultMediaSelectionHelper")
@interface _BMPDefaultMediaSelectionHelper : NSObject <_BMPMediaSelectionHelper>
- (NSArray<AVMediaSelectionOption *> * _Nonnull)optionsToDownloadFrom:(NSArray<AVMediaSelectionOption *> * _Nonnull)options using:(BMPOfflineTrackSelection * _Nullable)trackSelection SWIFT_WARN_UNUSED_RESULT;
- (NSArray<AVMediaSelection *> * _Nonnull)mediaSelectionsToDownloadForAsset:(AVURLAsset * _Nonnull)asset usingTrackSelection:(BMPOfflineTrackSelection * _Nullable)trackSelection SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Provides API to migrate MOVPKG resources
SWIFT_PROTOCOL_NAMED("_MovPkgResourceMigrator")
@protocol _BMPMovPkgResourceMigrator
- (BOOL)needsMigrationAtLocation:(NSURL * _Nonnull)contentLocation toSourceUrl:(NSURL * _Nonnull)sourceUrl SWIFT_WARN_UNUSED_RESULT;
- (void)prepareOfflineContentMigrationAtLocation:(NSURL * _Nonnull)contentLocation toSourceUrl:(NSURL * _Nonnull)sourceUrl using:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))resourceIdentifierCallback;
- (BOOL)migrateAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


SWIFT_CLASS_NAMED("_DefaultMovPkgResourceMigrator")
@interface _BMPDefaultMovPkgResourceMigrator : NSObject <_BMPMovPkgResourceMigrator>
- (nonnull instancetype)initWithLogger:(id <_BMPLogger> _Nonnull)logger;
- (BOOL)needsMigrationAtLocation:(NSURL * _Nonnull)contentLocation toSourceUrl:(NSURL * _Nonnull)sourceUrl SWIFT_WARN_UNUSED_RESULT;
- (void)prepareOfflineContentMigrationAtLocation:(NSURL * _Nonnull)contentLocation toSourceUrl:(NSURL * _Nonnull)sourceUrl using:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))resourceIdentifierCallback;
- (BOOL)migrateAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_DefaultOfflineContentLicenseExpiredEvent")
@interface _BMPDefaultOfflineContentLicenseExpiredEvent : NSObject <BMPOfflineContentLicenseExpiredEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_DefaultOfflineContentLicenseRenewedEvent")
@interface _BMPDefaultOfflineContentLicenseRenewedEvent : NSObject <BMPOfflineContentLicenseRenewedEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This protocol emits <code>OfflineEvent</code>s to <code>OfflineContentManagerListener</code>s
SWIFT_PROTOCOL_NAMED("_OfflineContentManagerEventEmitter")
@protocol _BMPOfflineContentManagerEventEmitter <BMPOfflineContentManagerEventHandler>
- (void)emitOfflineEvent:(id <BMPOfflineEvent> _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultOfflineContentManagerEventEmitter")
@interface _BMPDefaultOfflineContentManagerEventEmitter : NSObject <_BMPOfflineContentManagerEventEmitter>
- (nonnull instancetype)initWithOfflineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager OBJC_DESIGNATED_INITIALIZER;
- (void)emitOfflineEvent:(id <BMPOfflineEvent> _Nonnull)event;
- (void)addListener:(id <BMPOfflineContentManagerListener> _Nonnull)listener;
- (void)removeListener:(id <BMPOfflineContentManagerListener> _Nonnull)listener;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_OfflineContentManagerEventEmitterFactory")
@protocol _BMPOfflineContentManagerEventEmitterFactory
- (id <_BMPOfflineContentManagerEventEmitter> _Nonnull)createWithOfflineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultOfflineContentManagerEventEmitterFactory")
@interface _BMPDefaultOfflineContentManagerEventEmitterFactory : NSObject <_BMPOfflineContentManagerEventEmitterFactory>
- (id <_BMPOfflineContentManagerEventEmitter> _Nonnull)createWithOfflineContentManager:(id <BMPOfflineContentManager> _Nonnull)offlineContentManager SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol _BMPOfflineContentManagerTweaksApiDelegate;

SWIFT_CLASS_NAMED("_DefaultOfflineContentManagerTweaksApi")
@interface _BMPDefaultOfflineContentManagerTweaksApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPOfflineContentManagerTweaksApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultOfflineContentManagerTweaksApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPOfflineContentManagerTweaksApi>
- (void)migrateDownloadWithRemoteAssetUrl:(NSURL * _Nonnull)remoteAssetUrl resourceIdentifierCallback:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))resourceIdentifierCallback;
@end

@protocol _BMPOfflineContentUrlMigrationHandlerDelegate;

SWIFT_CLASS_NAMED("_DefaultOfflineContentUrlMigrationHandler")
@interface _BMPDefaultOfflineContentUrlMigrationHandler : NSObject
@property (nonatomic, weak) id <_BMPOfflineContentUrlMigrationHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)initWithMigrator:(id <_BMPMovPkgResourceMigrator> _Nonnull)migrator archiveHelper:(id <_BMPArchiveHelper> _Nonnull)archiveHelper OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol _BMPDownloadTask;

/// Provides API to handle Offline Content URL migration
SWIFT_PROTOCOL_NAMED("_OfflineContentUrlMigrationHandler")
@protocol _BMPOfflineContentUrlMigrationHandler
@property (nonatomic, strong) id <_BMPOfflineContentUrlMigrationHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly) BOOL isMigrationInProgress;
- (void)migrateFromUrl:(NSURL * _Nonnull)originalRemoteAssetUrl toUrl:(NSURL * _Nonnull)targetRemoteAssetUrl activeDownloadTask:(id <_BMPDownloadTask> _Nullable)activeDownloadTask resourceIdentifierCallback:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))resourceIdentifierCallback;
- (void)handleRestorationOfDownloadTask:(id <_BMPDownloadTask> _Nonnull)downloadTask;
- (void)maybeFinishMigration;
@end


@interface _BMPDefaultOfflineContentUrlMigrationHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPOfflineContentUrlMigrationHandler>
@property (nonatomic, readonly) BOOL isMigrationInProgress;
- (void)migrateFromUrl:(NSURL * _Nonnull)originalRemoteAssetUrl toUrl:(NSURL * _Nonnull)targetRemoteAssetUrl activeDownloadTask:(id <_BMPDownloadTask> _Nullable)activeDownloadTask resourceIdentifierCallback:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))resourceIdentifierCallback;
- (void)handleRestorationOfDownloadTask:(id <_BMPDownloadTask> _Nonnull)downloadTask;
- (void)maybeFinishMigration;
@end


SWIFT_CLASS_NAMED("_DefaultOfflineErrorEvent")
@interface _BMPDefaultOfflineErrorEvent : NSObject <BMPOfflineErrorEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) enum BMPOfflineErrorCode code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) BMPDeficiencyData * _Nullable data;
- (nonnull instancetype)initWithCode:(enum BMPOfflineErrorCode)code message:(NSString * _Nonnull)message data:(BMPDeficiencyData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_DefaultOfflineFairplayLicenseStorage")
@interface _BMPDefaultOfflineFairplayLicenseStorage : NSObject
- (nonnull instancetype)initWithSourceConfigArchiveHelper:(id <_BMPArchiveHelper> _Nonnull)sourceConfigArchiveHelper logger:(id <_BMPLogger> _Nonnull)logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Provides API for underlying storage providing offline FairPlay licenses
SWIFT_PROTOCOL_NAMED("_OfflineFairplayLicenseStorage")
@protocol _BMPOfflineFairplayLicenseStorage
/// Provides license data for given identifier
/// \param assetId identifier for the license
///
///
/// returns:
/// data for license when found
- (NSData * _Nullable)licenseForAssetId:(NSString * _Nonnull)assetId SWIFT_WARN_UNUSED_RESULT;
/// Stores license data for given identifier
/// \param licenseData data for the license to be stored
///
/// \param assetId identifier for the license
///
///
/// throws:
/// an error in case storing the license has failed
- (BOOL)persistWithLicense:(NSData * _Nonnull)licenseData forAssetId:(NSString * _Nonnull)assetId isRenewing:(BOOL)isRenewing error:(NSError * _Nullable * _Nullable)error;
/// Provides the stored license information for the given identifier if any
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         assetId: identifier for the license
///       </li>
///     </ul>
///   </li>
/// </ul>
///
/// returns:
/// stored DRM license information, if not found returns nil
- (BMPDrmLicenseInformation * _Nullable)licenseInformationForAssetId:(NSString * _Nonnull)assetId SWIFT_WARN_UNUSED_RESULT;
/// Stores the license information for given identifier
/// \param licenseInformation DRM license information to store
///
/// \param assetId identifier for the license
///
///
/// returns:
/// <code>true</code> if the DRM license information was persisted successfully, <code>false</code> otherwise
- (BOOL)persistWithLicenseInformation:(BMPDrmLicenseInformation * _Nonnull)licenseInformation forAssetId:(NSString * _Nonnull)assetId;
@end


@interface _BMPDefaultOfflineFairplayLicenseStorage (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPOfflineFairplayLicenseStorage>
- (NSData * _Nullable)licenseForAssetId:(NSString * _Nonnull)assetId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)persistWithLicense:(NSData * _Nonnull)licenseData forAssetId:(NSString * _Nonnull)assetId isRenewing:(BOOL)isRenewing error:(NSError * _Nullable * _Nullable)error;
- (BMPDrmLicenseInformation * _Nullable)licenseInformationForAssetId:(NSString * _Nonnull)assetId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)persistWithLicenseInformation:(BMPDrmLicenseInformation * _Nonnull)licenseInformation forAssetId:(NSString * _Nonnull)assetId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultOfflineFairplayPlaylistHelper")
@interface _BMPDefaultOfflineFairplayPlaylistHelper : NSObject
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_OfflineFairplayPlaylistHelper")
@protocol _BMPOfflineFairplayPlaylistHelper
- (NSSet<NSString *> * _Nonnull)extractSessionKeyUrisAtLocation:(NSURL * _Nonnull)contentLocation SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPDefaultOfflineFairplayPlaylistHelper (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPOfflineFairplayPlaylistHelper>
- (NSSet<NSString *> * _Nonnull)extractSessionKeyUrisAtLocation:(NSURL * _Nonnull)contentLocation SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("_PictureInPictureService")
@protocol _BMPPictureInPictureService
@property (nonatomic, readonly) BOOL isPictureInPicture;
@property (nonatomic) BOOL showSkipControls SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
@end

@class AVPictureInPictureController;

SWIFT_CLASS_NAMED("_DefaultPictureInPictureService") SWIFT_AVAILABILITY(tvos,introduced=14.0)
@interface _BMPDefaultPictureInPictureService : NSObject <_BMPPictureInPictureService>
@property (nonatomic, readonly) BOOL isPictureInPicture;
@property (nonatomic) BOOL showSkipControls SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(ios,introduced=14.0);
- (nonnull instancetype)initWithPictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController pictureInPictureConfig:(BMPPictureInPictureConfig * _Nonnull)pictureInPictureConfig uiEventEmitter:(id <_BMPUserInterfaceEventEmitter> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_AVAILABILITY(tvos,introduced=14.0)
@interface _BMPDefaultPictureInPictureService (SWIFT_EXTENSION(BitmovinPlayer)) <AVPictureInPictureControllerDelegate>
- (void)pictureInPictureControllerWillStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerWillStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
@end


SWIFT_CLASS_NAMED("_DefaultPictureInPictureSupportHelper")
@interface _BMPDefaultPictureInPictureSupportHelper : NSObject
- (nonnull instancetype)init;
@end


/// Helper to determine support for Picture-in-Picture (PiP) on current device
SWIFT_PROTOCOL_NAMED("_PictureInPictureSupportHelper")
@protocol _BMPPictureInPictureSupportHelper
@property (nonatomic, readonly) BOOL isPictureInPictureSupported;
@end


@interface _BMPDefaultPictureInPictureSupportHelper (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPictureInPictureSupportHelper>
@property (nonatomic, readonly) BOOL isPictureInPictureSupported;
@end


SWIFT_PROTOCOL_NAMED("_PlayerUIControllerFactory")
@protocol _BMPPlayerUIControllerFactory
- (id <_BMPPlayerUIController> _Nonnull)createWithPlayer:(id <BMPPlayer> _Nonnull)player playerView:(BMPPlayerView * _Nonnull)playerView viewHierarchyHandler:(id <_BMPViewHierarchyHandler> _Nonnull)viewHierarchyHandler uiEventEmitter:(id <_BMPUserInterfaceEventEmitter> _Nonnull)uiEventEmitter pictureInPictureConfig:(BMPPictureInPictureConfig * _Nonnull)pictureInPictureConfig logger:(id <_BMPLogger> _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlayerUIControllerFactory")
@interface _BMPDefaultPlayerUIControllerFactory : NSObject <_BMPPlayerUIControllerFactory>
- (id <_BMPPlayerUIController> _Nonnull)createWithPlayer:(id <BMPPlayer> _Nonnull)player playerView:(BMPPlayerView * _Nonnull)playerView viewHierarchyHandler:(id <_BMPViewHierarchyHandler> _Nonnull)viewHierarchyHandler uiEventEmitter:(id <_BMPUserInterfaceEventEmitter> _Nonnull)uiEventEmitter pictureInPictureConfig:(BMPPictureInPictureConfig * _Nonnull)pictureInPictureConfig logger:(id <_BMPLogger> _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>PlaylistUrlTracker</code> can be used to register a Playlist URL with a type once known.
/// This is useful in order to know before loading the Playlist which type of Playlist we are loading.
/// Example:
/// When loading a variant only live-stream there is no way to know that beforehand.
/// After requesting the Playlist for the first time, the type can be detected and registered.
/// On the next Playlist update triggered by <code>AVPlayer</code> we now know that the URL will be loading
/// a variant playlist.
/// The type can then be used to properly pass it to e.g. the <code>preprocessHttpRequest</code> callback.
SWIFT_PROTOCOL_NAMED("_PlaylistUrlTracker")
@protocol _BMPPlaylistUrlTracker
- (void)registerUrl:(NSURL * _Nonnull)url type:(BMPHttpRequestType _Nonnull)type;
- (BMPHttpRequestType _Nonnull)typeForUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistUrlTracker")
@interface _BMPDefaultPlaylistUrlTracker : NSObject <_BMPPlaylistUrlTracker>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)registerUrl:(NSURL * _Nonnull)url type:(BMPHttpRequestType _Nonnull)type;
- (BMPHttpRequestType _Nonnull)typeForUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end

@class AVPlayerLayer;

SWIFT_CLASS_NAMED("_DefaultScalingModeService")
@interface _BMPDefaultScalingModeService : NSObject
- (nonnull instancetype)initWithAvPlayerLayer:(AVPlayerLayer * _Nonnull)avPlayerLayer uiEventEmitter:(id <_BMPUserInterfaceEventEmitter> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_ScalingModeService")
@protocol _BMPScalingModeService
@property (nonatomic) enum BMPScalingMode scalingMode;
@end


@interface _BMPDefaultScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPScalingModeService>
@property (nonatomic) enum BMPScalingMode scalingMode;
@end


SWIFT_CLASS_NAMED("_DefaultStopwatch")
@interface _BMPDefaultStopwatch : NSObject
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_Stopwatch")
@protocol _BMPStopwatch
/// Starts a new time measurement.
- (void)start;
/// Stops the stopwatch and returns the elapsed time for the last lap.
/// After this call no more calls to ‘lap’ should be made.
/// @return The elapsed time in seconds, or 0 if ‘start’ was never called.
- (NSTimeInterval)stop SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPDefaultStopwatch (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPStopwatch>
- (void)start;
- (NSTimeInterval)stop SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("_SubtitleParser")
@protocol _BMPSubtitleParser
- (NSArray<BMPCue *> * _Nullable)parseVttSubtitlesWithVttString:(NSString * _Nonnull)vttString error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultSubtitleParser")
@interface _BMPDefaultSubtitleParser : NSObject <_BMPSubtitleParser>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSArray<BMPCue *> * _Nullable)parseVttSubtitlesWithVttString:(NSString * _Nonnull)vttString error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Use this _Timer implementation instead of the built-in NSTimer/Timer type in order to avoid
/// blocking the main thread
SWIFT_CLASS_NAMED("_DefaultTimer")
@interface _BMPDefaultTimer : NSObject
@property (nonatomic, copy) void (^ _Nullable eventHandler)(void);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This protocol is abstracting the usage of a timer
/// which makes timers easily testable from unit tests
SWIFT_PROTOCOL_NAMED("_Timer")
@protocol _BMPTimer
/// Returns <code>true</code> if the timer is running
@property (nonatomic, readonly) BOOL isRunning;
/// Returns <code>true</code> if the timer was permanently canceled
@property (nonatomic, readonly) BOOL isCanceled;
/// Returns <code>true</code> if the timer was suspended
@property (nonatomic, readonly) BOOL isSuspended;
/// Closure to call on timer ticks
@property (nonatomic, copy) void (^ _Nullable eventHandler)(void);
/// Resume a suspended timer
- (void)resume;
/// Temporarily suspend a timer, which can be later resumed by calling <code>resume()</code>
- (void)suspend;
/// Permanently cancel a timer, which will free up its resources and can not be resumed
- (void)cancel;
@end


@interface _BMPDefaultTimer (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPTimer>
@property (nonatomic, readonly) BOOL isRunning;
@property (nonatomic, readonly) BOOL isCanceled;
@property (nonatomic, readonly) BOOL isSuspended;
- (void)resume;
- (void)suspend;
- (void)cancel;
@end


SWIFT_PROTOCOL_NAMED("_TimerFactory")
@protocol _BMPTimerFactory
- (id <_BMPTimer> _Nonnull)createWithTimeInterval:(NSTimeInterval)timeInterval eventHandlerQueue:(dispatch_queue_t _Nonnull)eventHandlerQueue SWIFT_WARN_UNUSED_RESULT;
- (id <_BMPTimer> _Nonnull)createWithTimeInterval:(NSTimeInterval)timeInterval timerQueue:(dispatch_queue_t _Nonnull)timerQueue eventHandlerQueue:(dispatch_queue_t _Nonnull)eventHandlerQueue SWIFT_WARN_UNUSED_RESULT;
- (id <_BMPTimer> _Nonnull)createAndStartWithTimeInterval:(NSTimeInterval)timeInterval repeats:(BOOL)repeats eventHandlerQueue:(dispatch_queue_t _Nonnull)eventHandlerQueue eventHandler:(void (^ _Nonnull)(void))eventHandler SWIFT_WARN_UNUSED_RESULT;
- (id <_BMPTimer> _Nonnull)createAndStartWithTimeInterval:(NSTimeInterval)timeInterval repeats:(BOOL)repeats timerQueue:(dispatch_queue_t _Nonnull)timerQueue eventHandlerQueue:(dispatch_queue_t _Nonnull)eventHandlerQueue eventHandler:(void (^ _Nonnull)(void))eventHandler SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultTimerFactory")
@interface _BMPDefaultTimerFactory : NSObject <_BMPTimerFactory>
- (id <_BMPTimer> _Nonnull)createWithTimeInterval:(NSTimeInterval)timeInterval eventHandlerQueue:(dispatch_queue_t _Nonnull)eventHandlerQueue SWIFT_WARN_UNUSED_RESULT;
- (id <_BMPTimer> _Nonnull)createWithTimeInterval:(NSTimeInterval)timeInterval timerQueue:(dispatch_queue_t _Nonnull)timerQueue eventHandlerQueue:(dispatch_queue_t _Nonnull)eventHandlerQueue SWIFT_WARN_UNUSED_RESULT;
- (id <_BMPTimer> _Nonnull)createAndStartWithTimeInterval:(NSTimeInterval)timeInterval repeats:(BOOL)repeats eventHandlerQueue:(dispatch_queue_t _Nonnull)eventHandlerQueue eventHandler:(void (^ _Nonnull)(void))eventHandler SWIFT_WARN_UNUSED_RESULT;
- (id <_BMPTimer> _Nonnull)createAndStartWithTimeInterval:(NSTimeInterval)timeInterval repeats:(BOOL)repeats timerQueue:(dispatch_queue_t _Nonnull)timerQueue eventHandlerQueue:(dispatch_queue_t _Nonnull)eventHandlerQueue eventHandler:(void (^ _Nonnull)(void))eventHandler SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_DefaultUIBackgroundPlaybackHandler")
@interface _BMPDefaultUIBackgroundPlaybackHandler : NSObject
- (nonnull instancetype)initWithPlayer:(id <BMPPlayer> _Nonnull)player pictureInPictureService:(id <_BMPPictureInPictureService> _Nullable)pictureInPictureService playerView:(BMPPlayerView * _Nonnull)playerView avPlayerViewController:(AVPlayerViewController * _Nonnull)avPlayerViewController;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayer> _Nonnull)player pictureInPictureService:(id <_BMPPictureInPictureService> _Nullable)pictureInPictureService playerView:(BMPPlayerView * _Nonnull)playerView;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_UIBackgroundPlaybackHandler")
@protocol _BMPUIBackgroundPlaybackHandler
@end


@interface _BMPDefaultUIBackgroundPlaybackHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPUIBackgroundPlaybackHandler>
@end


@interface _BMPDefaultUIBackgroundPlaybackHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBackgroundPlaybackLifecycleHandlerDelegate>
- (void)enteringBackground;
- (void)exitingBackground;
@end


/// This class is used to load values of an AVURLAsset asynchronously
/// with the ability to get status for each value individually.
/// Available keys are described in UrlAssetValuesLoader.Key
SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init;
@end


@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
@end


SWIFT_CLASS_NAMED("_DefaultUserInterfaceEventEmitter")
@interface _BMPDefaultUserInterfaceEventEmitter : NSObject
- (nonnull instancetype)initWithPlayerView:(BMPPlayerView * _Nonnull)playerView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_UserInterfaceEventEmitter")
@protocol _BMPUserInterfaceEventEmitter <BMPUserInterfaceEventHandler>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultUserInterfaceEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPUserInterfaceEventEmitter>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultUserInterfaceEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPUserInterfaceEventHandler>
- (void)addUserInterfaceListener:(id <BMPUserInterfaceListener> _Nonnull)listener;
- (void)removeUserInterfaceListener:(id <BMPUserInterfaceListener> _Nonnull)listener;
@end


/// Helper class to handle view ordering when needed
/// Desired view hierarchy is: (top to bottom)
/// <ul>
///   <li>
///     adContainerView
///   </li>
///   <li>
///     PlayerView (BitmovinPlayer UI or System UI)
///   </li>
///   <li>
///     PosterView (only available on iOS)
///   </li>
///   <li>
///     ShutterView (only available on iOS)
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("_ViewHierarchyHandler")
@protocol _BMPViewHierarchyHandler
@property (nonatomic, strong) UIView * _Nullable shutterView;
@property (nonatomic, strong) UIView * _Nullable posterView;
@property (nonatomic, strong) UIView * _Nullable playerView;
@property (nonatomic, strong) UIView * _Nullable adContainerView;
- (void)handleSubViewOrdering;
@end


SWIFT_CLASS_NAMED("_DefaultViewHierarchyHandler")
@interface _BMPDefaultViewHierarchyHandler : NSObject <_BMPViewHierarchyHandler>
@property (nonatomic, weak) UIView * _Nullable shutterView;
@property (nonatomic, weak) UIView * _Nullable posterView;
@property (nonatomic, weak) UIView * _Nullable playerView;
@property (nonatomic, weak) UIView * _Nullable adContainerView;
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView OBJC_DESIGNATED_INITIALIZER;
- (void)handleSubViewOrdering;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_EnumHelper")
@interface _BMPEnumHelper : NSObject
+ (NSString * _Nonnull)adSourceTypeToString:(enum BMPAdSourceType)type SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)sourceTypeToString:(enum BMPSourceType)sourceType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)timelineReferencePointToString:(BMPTimelineReferencePoint)timelineReference SWIFT_WARN_UNUSED_RESULT;
+ (double)adQuartileToPercentage:(enum BMPAdQuartile)quartile SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)adTagTypeToString:(enum BMPAdTagType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Holds the NSError and additional optional information
SWIFT_CLASS_NAMED("_ErrorMetadata")
@interface _BMPErrorMetadata : NSObject
@property (nonatomic, readonly, strong) NSError * _Nonnull error;
@property (nonatomic, readonly, strong) _BMPRequestMetadata * _Nullable requestMetadata;
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error requestMetadata:(_BMPRequestMetadata * _Nullable)requestMetadata OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol _BMPFairplayHandlerDelegate;
@protocol _BMPFairplayHandlerOfflineContentDelegate;
@protocol AVContentKeyRecipient;

/// FairplayHandler is responsible for all FairPlay related operations to serve
/// content key responses for assets
SWIFT_PROTOCOL_NAMED("_FairplayHandler")
@protocol _BMPFairplayHandler
/// Delegate for the handler
@property (nonatomic, weak) id <_BMPFairplayHandlerDelegate> _Nullable fairplayHandlerDelegate;
@property (nonatomic, weak) id <_BMPFairplayHandlerOfflineContentDelegate> _Nullable offlineContentDelegate SWIFT_AVAILABILITY(tvos,unavailable);
/// Adds a recipient to the handler, so FairPlay requests for the recipient will be resolved by the handler
/// \param recipient <code>AVContentKeyRecipient</code> instance that needs FairPlay keys served
/// Note: <code>AVURLAsset</code> conforms to <code>AVContentKeyRecipient</code>
///
- (void)addRecipient:(id <AVContentKeyRecipient> _Nonnull)recipient;
/// Triggers license information synchronization for the given content key
/// \param skdUri URI of the content key
///
- (void)syncLicenseForSkdUri:(NSString * _Nonnull)skdUri SWIFT_AVAILABILITY(tvos,unavailable);
/// Triggers license renewal for given content key URI
/// \param skdUri URI of the content key
///
- (void)renewLicenseForSkdUri:(NSString * _Nonnull)skdUri SWIFT_AVAILABILITY(tvos,unavailable);
@end


SWIFT_PROTOCOL_NAMED("_FairplayHandlerDelegate")
@protocol _BMPFairplayHandlerDelegate
/// Is called when the FairplayHandler has finished a DRM license request.
/// \param sender The <code>_FairplayHandler</code> which is calling the delegate method.
///
/// \param metadata The <code>_RequestMetadata</code> containing data about the DRM license request.
///
- (void)fairplayHandler:(id <_BMPFairplayHandler> _Nonnull)sender didFinishLicenseRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
/// Is called when the FairplayHandler has finished a DRM certificate request.
/// \param sender The <code>_FairplayHandler</code> which is calling the delegate method.
///
/// \param metadata The <code>_RequestMetadata</code> containing data about the DRM certificate request.
///
- (void)fairplayHandler:(id <_BMPFairplayHandler> _Nonnull)sender didFinishCertificateRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
/// Is called when the FairplayHandler has finished with an error.
/// \param sender The <code>_FairplayHandler</code> which is calling the delegate method.
///
/// \param errorMetadata The <code>_ErrorMetadata</code> of the error that has occurred.
///
- (void)fairplayHandler:(id <_BMPFairplayHandler> _Nonnull)sender didFinishWithErrorMetadata:(_BMPErrorMetadata * _Nonnull)errorMetadata;
@end



SWIFT_PROTOCOL_NAMED("_FairplayHandlerOfflineContentDelegate") SWIFT_AVAILABILITY(tvos,unavailable)
@protocol _BMPFairplayHandlerOfflineContentDelegate
/// Is called when the FairplayHandler wants to know if a persistable offline DRM license
/// should be requested from the license server.
/// If <code>true</code> is returned, the sender calls <code>fairplayHandler(_:persistOfflineLicense:)</code> as soon as the
/// offline license is loaded and persistable data is available.
/// \param sender The FairplayHandler which is calling the delegate method.
///
/// \param assetId Asset ID that the key belongs to
///
///
/// returns:
/// <code>true</code> if a persistable license should be downloaded,
/// <code>false</code> if just a common DRM license should be loaded.
- (BOOL)fairplayHandler:(id <_BMPFairplayHandler> _Nonnull)sender shouldPersistOfflineLicenseForAssetId:(NSString * _Nonnull)assetId SWIFT_WARN_UNUSED_RESULT;
/// Is called when the FairplayHandler wants to know if renewing is in progress.
/// \param sender The FairplayHandler which is calling the delegate method.
///
/// \param assetId Asset ID that the key belongs to
///
///
/// returns:
/// <code>true</code> when renewing is in progress, <code>false</code> otherwise
- (BOOL)fairplayHandler:(id <_BMPFairplayHandler> _Nonnull)sender isRenewingOfflineLicenseForAssetId:(NSString * _Nonnull)assetId SWIFT_WARN_UNUSED_RESULT;
/// Is called when the FairplayHandler has persisted the received offline license information.
/// \param sender The FairplayHandler which is calling the delegate method.
///
- (void)fairplayHandlerDidFinishPersistingOfflineLicenseInformation:(id <_BMPFairplayHandler> _Nonnull)sender;
/// Is called when the FairplayHandler successfully persisted the downloaded offline DRM license.
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         sender: The FairplayHandler which is calling the delegate method.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)fairplayHandlerDidPersistOfflineLicense:(id <_BMPFairplayHandler> _Nonnull)sender;
/// Is called when the FairplayHandler failed to persist the downloaded offline DRM license.
/// \param sender The FairplayHandler which is calling the delegate method.
///
/// \param error Error that happened while trying to persist the license
///
- (void)fairplayHandler:(id <_BMPFairplayHandler> _Nonnull)sender failedToPersistOfflineLicenseWithError:(NSError * _Nonnull)error;
@end



/// :nodoc:
SWIFT_CLASS_NAMED("_GetAvailableAudioEvent")
@interface _BMPGetAvailableAudioEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull audioTracks;
- (nonnull instancetype)initWithAudioTracks:(NSArray<BMPAudioTrack *> * _Nullable)audioTracks OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS_NAMED("_GetAvailableSubtitlesEvent")
@interface _BMPGetAvailableSubtitlesEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull subtitleTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithSubtitleTracks:(NSArray<BMPSubtitleTrack *> * _Nullable)subtitleTracks OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


/// Can be used to receive the playback finished state
SWIFT_PROTOCOL_NAMED("_PlaybackFinishedService")
@protocol _BMPPlaybackFinishedService
@property (nonatomic, readonly) BOOL isPlaybackFinished;
@end

@protocol _BMPCastMessagingService;

SWIFT_CLASS_NAMED("_GoogleCastPlaybackFinishedService")
@interface _BMPGoogleCastPlaybackFinishedService : _BMPDefaultService <_BMPPlaybackFinishedService>
@property (nonatomic) BOOL isPlaybackFinished;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithCastMessagingService:(id <_BMPCastMessagingService> _Nonnull)castMessagingService playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRemotePlayerStateEvent;

@interface _BMPGoogleCastPlaybackFinishedService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCastMessagesListener>
- (void)onRemotePlayerState:(_BMPRemotePlayerStateEvent * _Nonnull)event;
@end


@interface _BMPGoogleCastPlaybackFinishedService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalPlaybackInitiated:(_BMPInternalPlaybackInitiatedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
@end


@interface _BMPGoogleCastPlaybackFinishedService (SWIFT_EXTENSION(BitmovinPlayer))
- (void)start;
- (void)stop;
@end

@class BMPBitmovinCastManager;
@protocol _BMPCastPlaylistQueueManipulator;

SWIFT_CLASS_NAMED("_GoogleCastPlaylistService")
@interface _BMPGoogleCastPlaylistService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithCastManager:(BMPBitmovinCastManager * _Nonnull)castManager playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter playbackFinishedServide:(id <_BMPPlaybackFinishedService> _Nonnull)playbackFinishedServide playlistQueueManipulator:(id <_BMPCastPlaylistQueueManipulator> _Nonnull)playlistQueueManipulator logger:(id <_BMPLogger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPGoogleCastPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBitmovinCastManagerListener>
- (void)queueDidUpdateActiveItemIndex:(NSInteger)activeItemIndex;
@end


@interface _BMPGoogleCastPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onCastStopped:(BMPCastStoppedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
@end


@interface _BMPGoogleCastPlaylistService (SWIFT_EXTENSION(BitmovinPlayer))
- (void)start;
- (void)stop;
@end


@interface _BMPGoogleCastPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCurrentSourceProvider>
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable currentSource;
@end


/// Provides the sources within the configured playlist
SWIFT_PROTOCOL_NAMED("_PlaylistSourcesProvider")
@protocol _BMPPlaylistSourcesProvider
@property (nonatomic, readonly, copy) NSArray<id <_BMPLegacySourceInternal>> * _Nonnull sources;
- (BOOL)isLastSource:(id <_BMPLegacySourceInternal> _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPGoogleCastPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlaylistSourcesProvider>
@property (nonatomic, readonly, copy) NSArray<id <_BMPLegacySourceInternal>> * _Nonnull sources;
- (BOOL)isLastSource:(id <_BMPLegacySourceInternal> _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("_PlaylistService")
@protocol _BMPPlaylistService
- (void)loadPlaylistConfig:(BMPPlaylistConfig * _Nonnull)playlistConfig;
- (void)addWithSource:(id <BMPSource> _Nonnull)source at:(NSInteger)index;
- (void)addWithSource:(id <BMPSource> _Nonnull)source;
- (void)removeWithSourceAt:(NSInteger)index;
- (void)unload;
@end


@interface _BMPGoogleCastPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlaylistService>
- (void)loadPlaylistConfig:(BMPPlaylistConfig * _Nonnull)playlistConfig;
- (void)addWithSource:(id <BMPSource> _Nonnull)source at:(NSInteger)index;
- (void)addWithSource:(id <BMPSource> _Nonnull)source;
- (void)removeWithSourceAt:(NSInteger)index;
- (void)unload;
@end



SWIFT_PROTOCOL_NAMED("_SeekingService")
@protocol _BMPSeekingService
@property (nonatomic, readonly) BOOL wasTimeChangeCommandCalled;
@property (nonatomic, readonly) BOOL isSeekingBackToStart;
@property (nonatomic, readonly) BOOL isSeeking;
- (void)seekToSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time suppressEvents:(BOOL)suppressEvents;
- (void)timeShift:(NSTimeInterval)time suppressEvents:(BOOL)suppressEvents;
- (void)seekBackToStartIfNeededWithCompletion:(void (^ _Nullable)(void))completion;
- (void)adjustToTargetStartTime:(NSTimeInterval)startTime completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
- (void)setReplayMode:(enum BMPReplayMode)replayMode;
@end

@protocol _BMPTimeService;

SWIFT_CLASS_NAMED("_GoogleCastSeekingService")
@interface _BMPGoogleCastSeekingService : _BMPDefaultService <_BMPSeekingService>
@property (nonatomic, readonly) BOOL isSeeking;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithCastManager:(BMPBitmovinCastManager * _Nonnull)castManager castMessagingService:(id <_BMPCastMessagingService> _Nonnull)castMessagingService currentSourceProvider:(id <_BMPCurrentSourceProvider> _Nonnull)currentSourceProvider playlistSourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)playlistSourcesProvider timeService:(id <_BMPTimeService> _Nonnull)timeService playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter logger:(id <_BMPLogger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface _BMPGoogleCastSeekingService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) BOOL isSeekingBackToStart;
@property (nonatomic, readonly) BOOL wasTimeChangeCommandCalled;
- (void)seekToSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time suppressEvents:(BOOL)suppressEvents;
- (void)timeShift:(NSTimeInterval)time suppressEvents:(BOOL)suppressEvents;
- (void)seekBackToStartIfNeededWithCompletion:(void (^ _Nullable)(void))completion;
- (void)adjustToTargetStartTime:(NSTimeInterval)startTime completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
- (void)setReplayMode:(enum BMPReplayMode)replayMode;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_GoogleCastTimeService")
@interface _BMPGoogleCastTimeService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPGoogleCastTimeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCastMessagesListener>
- (void)onRemotePlayerState:(_BMPRemotePlayerStateEvent * _Nonnull)event;
- (void)onCurrentTimeApproximation:(NSTimeInterval)currentTime;
@end


SWIFT_PROTOCOL_NAMED("_TimeService")
@protocol _BMPTimeService
/// Returns the total duration in seconds of the current video or <code>infinity</code> if it’s a live stream.
@property (nonatomic, readonly) NSTimeInterval duration;
/// Returns the limit in seconds for time shift. Is either negative or 0. Is applicable for live streams only.
@property (nonatomic, readonly) NSTimeInterval maxTimeShift;
/// Returns The current time shift position in seconds. Is applicable for live streams only.
@property (nonatomic, readonly) NSTimeInterval timeShift;
/// Returns the live edge in seconds. Is applicable for live streams only.
@property (nonatomic, readonly) NSTimeInterval liveEdge;
/// Returns the current playback time of the asset. It never returns <code>nan</code> as a value.
/// In case of invalid time values 0 is returned.
/// For VoD streams the returned time ranges between 0 and the duration of the asset.
/// For live streams it can be specified if a Unix timestamp denoting the current playback
/// position or an relative to the playback start value is returned.
/// \param timeMode to specify if an absolute unix timestamp or an relative time should be returned.
///
///
/// returns:
/// The current playback time.
- (NSTimeInterval)currentTime:(BMPTimeMode)timeMode SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPGoogleCastTimeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPTimeService>
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) NSTimeInterval maxTimeShift;
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly) NSTimeInterval liveEdge;
- (NSTimeInterval)currentTime:(BMPTimeMode)timeMode SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_HashedIdentifier")
@interface _BMPHashedIdentifier : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull md5;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Data class which holds IMA Log entry values
SWIFT_CLASS_NAMED("_ImaAdLogEvent")
@interface _BMPImaAdLogEvent : NSObject
@property (nonatomic, readonly) NSInteger errorCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalActiveSourceChangedEvent")
@interface _BMPInternalActiveSourceChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable from;
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalAdPlaybackDidRequestContentPauseEvent")
@interface _BMPInternalAdPlaybackDidRequestContentPauseEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalAdPlaybackDidRequestContentResumeEvent")
@interface _BMPInternalAdPlaybackDidRequestContentResumeEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListenerInternal</code> for more information on this event.
SWIFT_CLASS_NAMED("_InternalBufferLevelChangedEvent")
@interface _BMPInternalBufferLevelChangedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) BMPBufferLevel * _Nonnull forwardBufferLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalCanStartPlaybackImmediatelyEvent")
@interface _BMPInternalCanStartPlaybackImmediatelyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalCastActiveSourceChangedEvent")
@interface _BMPInternalCastActiveSourceChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable from;
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalCastPlaylistTransitionEvent")
@interface _BMPInternalCastPlaylistTransitionEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) id <BMPSource> _Nullable from;
@property (nonatomic, readonly, strong) id <BMPSource> _Nullable to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("_InternalCastReadyEvent")
@interface _BMPInternalCastReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("_InternalCastSourceAddedEvent")
@interface _BMPInternalCastSourceAddedEvent : BMPPlayerEvent
/// The <code>Source</code> that was added to the playlist.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
/// The index at which the <code>Source</code> was added to the playlist.
/// The value is greater than or equal to zero and does not exceed the
/// number of <code>Source</code>s in the playlist before addition.
@property (nonatomic, readonly) NSInteger index;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("_InternalCastSourceRemovedEvent")
@interface _BMPInternalCastSourceRemovedEvent : BMPPlayerEvent
/// The <code>Source</code> that was removed from the playlist.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
/// The index at which the <code>Source</code> was removed from the playlist.
/// The value is greater than or equal to zero and is less than
/// the number of <code>Source</code>s in the playlist before removal.
@property (nonatomic, readonly) NSInteger index;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalCastStopEvent")
@interface _BMPInternalCastStopEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalMasterPlaylistLoadedEvent")
@interface _BMPInternalMasterPlaylistLoadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalPlaybackInitiatedEvent")
@interface _BMPInternalPlaybackInitiatedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InternalPlaybackIntentionEvent")
@interface _BMPInternalPlaybackIntentionEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayerFactory")
@interface _BMPInternalPlayerFactory : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init;
- (id <BMPPlayer> _Nonnull)createWithIntegrationLanguage:(_BMPIntegrationLanguage _Nonnull)integrationLanguage config:(BMPPlayerConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (id <BMPPlayer> _Nonnull)createWithIntegrationLanguage:(_BMPIntegrationLanguage _Nonnull)integrationLanguage SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InternalPlayerLoadEvent")
@interface _BMPInternalPlayerLoadEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayerUnloadEvent")
@interface _BMPInternalPlayerUnloadEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayingEvent")
@interface _BMPInternalPlayingEvent : BMPPlayerEvent
/// Current playback time in seconds.
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalPlaylistTransitionEvent")
@interface _BMPInternalPlaylistTransitionEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) id <BMPSource> _Nullable from;
@property (nonatomic, readonly, strong) id <BMPSource> _Nullable to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListenerInternal</code> for more information on this event.
SWIFT_CLASS_NAMED("_InternalReadyEvent")
@interface _BMPInternalReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalSeekEvent")
@interface _BMPInternalSeekEvent : BMPPlayerEvent
/// The current position.
@property (nonatomic, readonly, strong) BMPSeekPosition * _Nonnull from;
/// The target position.
@property (nonatomic, readonly, strong) BMPSeekPosition * _Nonnull to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initFrom:(BMPSeekPosition * _Nonnull)from to:(BMPSeekPosition * _Nonnull)to OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalSeekedEvent")
@interface _BMPInternalSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalSharePlayEndedEvent") SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface _BMPInternalSharePlayEndedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalSharePlayStartedEvent") SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface _BMPInternalSharePlayStartedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("_InternalSourceAddedEvent")
@interface _BMPInternalSourceAddedEvent : BMPPlayerEvent
/// The <code>Source</code> that was added to the playlist.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
/// The index at which the <code>Source</code> was added to the playlist.
/// The value is greater than or equal to zero and does not exceed the
/// number of <code>Source</code>s in the playlist before addition.
@property (nonatomic, readonly) NSInteger index;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalSourcePlaybackFinishedEvent")
@interface _BMPInternalSourcePlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("_InternalSourceRemovedEvent")
@interface _BMPInternalSourceRemovedEvent : BMPPlayerEvent
/// The <code>Source</code> that was removed from the playlist.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
/// The index at which the <code>Source</code> was removed from the playlist.
/// The value is greater than or equal to zero and is less than
/// the number of <code>Source</code>s in the playlist before removal.
@property (nonatomic, readonly) NSInteger index;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("_InternalStallEndedEvent")
@interface _BMPInternalStallEndedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See <code>PlayerListener</code> for more information on this event.
SWIFT_CLASS_NAMED("_InternalStallStartedEvent")
@interface _BMPInternalStallStartedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Used for internal time updates where we need a higher and not modifiable update rate.
SWIFT_CLASS_NAMED("_InternalTimeChangedEvent")
@interface _BMPInternalTimeChangedEvent : BMPTimeChangedEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithCurrentTime:(NSTimeInterval)currentTime OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalVariantPlaylistLoadedEvent")
@interface _BMPInternalVariantPlaylistLoadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_LegacyAssetDownloadTask")
@interface _BMPLegacyAssetDownloadTask : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull offlineContentRelativePath;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier offlineContentRelativePath:(NSString * _Nonnull)offlineContentRelativePath OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This is a temporarily workaround for Obj-C usage of the <code>Source</code> as we use Swift only types in SourceInternal
SWIFT_PROTOCOL_NAMED("_LegacySourceInternal")
@protocol _BMPLegacySourceInternal <BMPSource>
@property (nonatomic, readonly) BOOL isActive;
@property (nonatomic, readonly, strong) AVURLAsset * _Nonnull urlAsset;
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nonnull playerItem;
/// Contains all already parsed embedded metadata
@property (nonatomic, readonly, copy) NSArray<BMPMetadata *> * _Nonnull embeddedMetadata;
/// Returns <code>true</code> if the source is a live stream
@property (nonatomic, readonly) BOOL isLive;
/// List of available <code>AudioTrack</code>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
/// Selected <code>AudioTrack</code>
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
/// The upper bitrate boundary in bits per second for network bandwidth consumption of the currently
/// played source. Can be set to 0 for no limitation. The value set here is only valid for the currently
/// played source and will not be carried over to subsequently loaded sources.
/// Use <code>AdaptationConfig#maxSelectableBitrate</code> to set a value which is persistent for all
/// loaded sources of one <code>BitmovinPlayer</code> instance.
/// Default value is 0.
@property (nonatomic, readonly) NSTimeInterval maxTimeShift;
/// Target start time
@property (nonatomic, readonly) NSTimeInterval targetStartTime;
/// Desired limit of network bandwidth consumption for this source
@property (nonatomic) NSUInteger maxSelectableBitrate;
/// Returns the currently playing video frame rate in units of frames per second.
@property (nonatomic, readonly) float currentVideoFrameRate;
/// Returns an array containing all available video qualities the player can adapt between
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
/// Returns the currently selected video quality
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
/// Returns an array containing <code>SubtitleTrack</code> objects for all available subtitle tracks.
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitles;
/// Returns the currently used <code>SubtitleTrack</code>.
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nonnull subtitle;
/// The <code>Cue</code>s for the currently selected subtitle
@property (nonatomic, readonly, copy) NSArray<BMPCue *> * _Nonnull subtitleCues;
/// Adds a new external subtitle file. The <code>SubtitleTrack</code> is only added to the available tracks,
/// but is not set active. Use <code>Source.setSubtitleTrack(identifier:)</code> to active it.
/// If the identifier already exists, the existing <code>SubtitleTrack</code> is overwritten with the new one.
/// \param track The <code>SubtitleTrack</code> to be added to the available subtitles.
///
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)track;
/// Removes the existing <code>SubtitleTrack</code> with the track identifier specified by <code>identifier</code>.
/// If the track is currently active, it will be deactivated and then removed.
/// If no <code>SubtitleTrack</code> with the given identifier exists, the call will be ignored.
/// The <code>SubtitleTrack</code> is removed from the available tracks, use <code>Source.setSubtitleTrack(identifier:nil)</code>
/// to disable an active <code>SubtitleTrack</code>.
/// \param identifier The identifier of the <code>SubtitleTrack</code> to be removed.
///
- (void)removeSubtitleTrackWithIdentifier:(NSString * _Nonnull)identifier;
/// Sets the subtitle track to the ID specified by <code>identifier</code>. A list can be retrieved by
/// calling <code>Source.availableSubtitles</code>.
/// Using nil as <code>identifier</code> disables subtitles.
/// \param identifier The identifier of the <code>SubtitleTrack</code> which should be set.
///
- (void)setSubtitleTrackWithIdentifier:(NSString * _Nullable)identifier;
/// Sets subtitle styles on the <code>AVPlayerItem</code>.
/// \param subtitleStyles The subtitle styles which should be set
///
- (void)setSubtitleStyles:(NSArray<AVTextStyleRule *> * _Nullable)subtitleStyles;
/// Set audio with identifier
/// \param identifier The <code>AudioTrack</code> identifier
///
- (void)setAudioWith:(NSString * _Nonnull)identifier;
/// Checks the possibility to play the media at specified playback speed.
/// \param playbackSpeed The playback speed to check.
///
- (BOOL)canApplyPlaybackSpeed:(float)playbackSpeed SWIFT_WARN_UNUSED_RESULT;
/// Clamp the provided playback speed if it’s needed.
/// \param playbackSpeed The playback speed to clamp.
///
- (float)clampPlaybackSpeedIfNeeded:(float)playbackSpeed SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject <_BMPJsonEncodable>
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata options:(_BMPCafSourceOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject <_BMPJsonEncodable>
- (nonnull instancetype)initWithData:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)_toJsonData SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)_toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_NoPlayerUIController")
@interface _BMPNoPlayerUIController : NSObject
@property (nonatomic, weak) id <BMPPlayer> _Nullable player;
@property (nonatomic) enum BMPScalingMode scalingMode;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayer> _Nonnull)player playerView:(BMPPlayerView * _Nonnull)playerView uiEventEmitter:(id <_BMPUserInterfaceEventEmitter> _Nonnull)uiEventEmitter pictureInPictureConfig:(BMPPictureInPictureConfig * _Nonnull)pictureInPictureConfig logger:(id <_BMPLogger> _Nonnull)logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPNoPlayerUIController (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerUIController>
@property (nonatomic, readonly) BOOL areControlsShown;
@property (nonatomic, readonly) BOOL hasOwnPlayerLayer;
@property (nonatomic, readonly) BOOL isPictureInPicture;
@property (nonatomic, readonly, strong) UIView * _Nullable rootView;
@property (nonatomic) BOOL showSkipControlsInPictureInPicture SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (void)destroy;
@end




SWIFT_PROTOCOL_NAMED("_OfflineContentManagerTweaksApiDelegate")
@protocol _BMPOfflineContentManagerTweaksApiDelegate
- (void)offlineContentManagerTweaksApi_migrateDownloadWithRemoteAssetUrl:(NSURL * _Nonnull)remoteAssetUrl resourceIdentifierCallback:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))resourceIdentifierCallback;
@end



SWIFT_PROTOCOL_NAMED("_OfflineContentUrlMigrationHandlerDelegate")
@protocol _BMPOfflineContentUrlMigrationHandlerDelegate
- (void)offlineContentUrlMigrationHandlerWillPerformContentMigration:(id <_BMPOfflineContentUrlMigrationHandler> _Nonnull)handler;
- (BOOL)offlineContentUrlMigrationHandler:(id <_BMPOfflineContentUrlMigrationHandler> _Nonnull)handler shouldCancelDownloadTask:(id <_BMPDownloadTask> _Nonnull)downloadTask SWIFT_WARN_UNUSED_RESULT;
- (void)offlineContentUrlMigrationHandler:(id <_BMPOfflineContentUrlMigrationHandler> _Nonnull)handler didCompleteMigrationFromUrl:(NSURL * _Nonnull)originalAssetUrl toUrl:(NSURL * _Nonnull)targetAssetUrl;
- (void)offlineContentUrlMigrationHandler:(id <_BMPOfflineContentUrlMigrationHandler> _Nonnull)handler didFailMigrationWithError:(NSError * _Nonnull)error;
@end




SWIFT_CLASS_NAMED("_OfflineThumbnailHelper")
@interface _BMPOfflineThumbnailHelper : NSObject
- (nonnull instancetype)init;
/// Prepares an array of thumbnails for offline usage. For each thumbnail, it loads the local thumbnail image from
/// disk, encodes the content as base64 and creates a data URI which is set as the new url for the returned
/// thumbnail.
/// \param thumbnails The list of thumbnail objects to prepare for offline playback.
///
///
/// returns:
/// A list of thumbnail objects which can be used for offline playback.
- (NSArray<BMPThumbnail *> * _Nonnull)prepareThumbnailsForOfflineUsage:(NSArray<BMPThumbnail *> * _Nonnull)thumbnails SWIFT_WARN_UNUSED_RESULT;
/// Changes the original URLs of the provided thumbnails to point to the local thumbnail image stored on disk.
/// \param urls The dictionary containing the mapping from original URL strings to local URLs.
///
/// \param thumbnails The thumbnails whose URLs should be swapped.
///
///
/// returns:
/// An array containing thumbnails with their URLs set to the according local image URL.
- (NSArray<BMPThumbnail *> * _Nonnull)swapUrls:(NSDictionary<NSString *, NSURL *> * _Nonnull)urls for:(NSArray<BMPThumbnail *> * _Nonnull)thumbnails SWIFT_WARN_UNUSED_RESULT;
/// Returns a dictionary of distinct image URLs and their according local file URLs (relative to a given directory)
/// for a given array of thumbnails.
/// \param thumbnails The thumbnails to create local file URLs for.
///
/// \param offlineDirectory The offline thumbnails directory where the images will be stored.
///
///
/// returns:
/// A dictionary containing a mapping of distinct image URLs to their local equivalent.
- (NSDictionary<NSString *, NSURL *> * _Nonnull)distinctImageUrlsAndTheirLocalEquivalentFor:(NSArray<BMPThumbnail *> * _Nonnull)thumbnails offlineDirectory:(NSURL * _Nonnull)offlineDirectory SWIFT_WARN_UNUSED_RESULT;
@end


/// This class provides an abstraction to access the persistent data stored as key/value pairs in a single file on disk.
/// Each instance of a <code>_PersistentArchive</code> is associated with a single archive file and can be used to read and write
/// its data. The <code>_PersistentArchive</code> takes care of reading from and writing to disk internally and transparent to the
/// object which is using the <code>_PersistentArchive</code>.
SWIFT_CLASS_NAMED("_PersistentArchive")
@interface _BMPPersistentArchive : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull archiveUrl;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface _BMPPersistentArchive (SWIFT_EXTENSION(BitmovinPlayer))
- (BOOL)storeStringValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
- (BOOL)storeBoolValue:(BOOL)value forKey:(NSString * _Nonnull)key;
- (BOOL)storeDoubleValue:(double)value forKey:(NSString * _Nonnull)key;
- (BOOL)storeDateValue:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)key;
- (BOOL)storeNumberValue:(NSNumber * _Nonnull)value forKey:(NSString * _Nonnull)key;
- (NSString * _Nullable)stringValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)valueExistsForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)numberValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (double)doubleValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nullable)dateValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)boolValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeValueForKey:(NSString * _Nonnull)key;
- (void)clear;
- (void)overwriteFrom:(_BMPPersistentArchive * _Nonnull)archive;
@end





SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
@property (nonatomic, weak) id <_BMPBufferApiDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end



@protocol _BMPPlaylistApiDelegate;

SWIFT_CLASS_NAMED("_PlayerPlaylistApi")
@interface _BMPPlayerPlaylistApi : NSObject <BMPPlaylistApi>
@property (nonatomic, weak) id <_BMPPlaylistApiDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<id <BMPSource>> * _Nonnull sources;
- (void)seekWithSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
- (void)addWithSource:(id <BMPSource> _Nonnull)source at:(NSInteger)index;
- (void)addWithSource:(id <BMPSource> _Nonnull)source;
- (void)removeWithSourceAt:(NSInteger)index;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS_NAMED("_PlaylistLoaderRetryHandler")
@interface _BMPPlaylistLoaderRetryHandler : NSObject
@property (nonatomic, readonly, copy) void (^ _Null_unspecified retryHttpRequestHandler)(BMPHttpRequestType _Nonnull, NSInteger, BMPHttpResponse * _Nonnull, void (^ _Nonnull)(NSTimeInterval, BMPHttpRequest * _Nonnull), void (^ _Nonnull)(void));
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







SWIFT_CLASS_NAMED("_PosterImageController")
@interface _BMPPosterImageController : NSObject
@property (nonatomic, weak) id <BMPPlayer> _Nullable player;
@property (nonatomic, readonly, strong) UIView * _Nonnull rootView;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayer> _Nonnull)player logger:(id <_BMPLogger> _Nonnull)logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface _BMPPosterImageController (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onUnseen:(NSArray<id <BMPEvent>> * _Nonnull)unseenEvents player:(id <BMPPlayer> _Nonnull)player;
- (void)onInternalActiveSourceChanged:(_BMPInternalActiveSourceChangedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
- (void)onPlaying:(BMPPlayingEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
@end

@class _BMPRemotePlayerState;

/// :nodoc:
SWIFT_CLASS_NAMED("_RemotePlayerStateEvent")
@interface _BMPRemotePlayerStateEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) _BMPRemotePlayerState * _Nonnull remotePlayerState;
- (nonnull instancetype)initWithRemotePlayerState:(_BMPRemotePlayerState * _Nonnull)remotePlayerState OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic) BMPHttpRequestType _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(BMPHttpRequestType _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceConfig:(BMPSourceConfig * _Nonnull)sourceConfig asset:(AVURLAsset * _Nonnull)asset;
@end





SWIFT_CLASS_NAMED("_ShutterController")
@interface _BMPShutterController : NSObject
@property (nonatomic, weak) id <BMPPlayer> _Nullable player;
@property (nonatomic, readonly, strong) UIView * _Nonnull shutterView;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayer> _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPShutterController (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onUnseen:(NSArray<id <BMPEvent>> * _Nonnull)unseenEvents player:(id <BMPPlayer> _Nonnull)player;
- (void)onPlaying:(BMPPlayingEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event player:(id <BMPPlayer> _Nonnull)player;
@end



/// This service is responsible for handling the stalling state and stalling events
SWIFT_PROTOCOL_NAMED("_StallingService")
@protocol _BMPStallingService
/// Returns current stalling state, true if the player is currently in stalling state
@property (nonatomic, readonly) BOOL isStalling;
@end


SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS_NAMED("_SubtitleUIController")
@interface _BMPSubtitleUIController : NSObject
@property (nonatomic, weak) id <BMPPlayer> _Nullable player;
@property (nonatomic) enum BMPScalingMode scalingMode;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayer> _Nonnull)player playerView:(BMPPlayerView * _Nonnull)playerView uiEventEmitter:(id <_BMPUserInterfaceEventEmitter> _Nonnull)uiEventEmitter pictureInPictureConfig:(BMPPictureInPictureConfig * _Nonnull)pictureInPictureConfig logger:(id <_BMPLogger> _Nonnull)logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPSubtitleUIController (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerUIController>
@property (nonatomic, readonly) BOOL areControlsShown;
@property (nonatomic, readonly) BOOL hasOwnPlayerLayer;
@property (nonatomic, readonly) BOOL isPictureInPicture;
@property (nonatomic, readonly, strong) UIView * _Nullable rootView;
@property (nonatomic) BOOL showSkipControlsInPictureInPicture SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (void)destroy;
@end


SWIFT_CLASS_NAMED("_SystemFreeSpaceReporter")
@interface _BMPSystemFreeSpaceReporter : NSObject
/// Asks the system of the free available space.
///
/// returns:
/// Value in megabytes of the free space available on device.
+ (NSNumber * _Nullable)systemFreeSpaceAvailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS_NAMED("_UIDeviceVersionHelper")
@interface _BMPUIDeviceVersionHelper : NSObject
- (nonnull instancetype)init;
- (BOOL)isSystemVersionGreaterThanOrEqual:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSystemVersionLessThan:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
@end

@protocol WKScriptMessageHandler;
@class WKUserContentController;

SWIFT_CLASS_NAMED("_UserContentControllerBuilder")
@interface _BMPUserContentControllerBuilder : NSObject
- (nonnull instancetype)addScriptMessageHandler:(id <WKScriptMessageHandler> _Nonnull)scriptMessageHandler name:(NSString * _Nonnull)name;
- (WKUserContentController * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_PROTOCOL_NAMED("_WebUiEventHandler")
@protocol _BMPWebUiEventHandler
@property (nonatomic) BOOL isUiReady;
@property (nonatomic, strong) id <BMPPlayer> _Nullable player;
@end


SWIFT_CLASS_NAMED("_WebViewFactory")
@interface _BMPWebViewFactory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (WKWebView * _Nonnull)createWithUserContentController:(WKUserContentController * _Nonnull)userContentController SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
