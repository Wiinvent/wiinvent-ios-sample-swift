// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BitmovinPlayer
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
@_exported import BitmovinPlayer
import Combine
import CommonCrypto
import Foundation
import GroupActivities
import Swift
import UIKit
import WebKit
import _GroupActivities_UIKit
import _StringProcessing
@objc(BMPCustomMessageHandlerDelegate) public protocol CustomMessageHandlerDelegate {
  @objc func receivedSynchronousMessage(_ message: Swift.String, withData data: Swift.String?) -> Swift.String?
  @objc func receivedAsynchronousMessage(_ message: Swift.String, withData data: Swift.String?)
}
@objcMembers @objc(_BMPDefaultOfflineContentManagerEventEmitter) public class _DefaultOfflineContentManagerEventEmitter : ObjectiveC.NSObject, BitmovinPlayer._OfflineContentManagerEventEmitter {
  @objc public init(offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc public func emit(event: BitmovinPlayer.OfflineEvent)
  @objc public func add(listener: BitmovinPlayer.OfflineContentManagerListener)
  @objc public func remove(listener: BitmovinPlayer.OfflineContentManagerListener)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPUIDeviceVersionHelper) @objcMembers public class _UIDeviceVersionHelper : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc public func isSystemVersionGreaterThanOrEqual(_ versionToCheck: Swift.Double) -> Swift.Bool
  @objc public func isSystemVersionLessThan(_ versionToCheck: Swift.Double) -> Swift.Bool
  @objc deinit
}
@objc(BMPContentDownloadSuspendedEvent) public protocol ContentDownloadSuspendedEvent : BitmovinPlayer.OfflineEvent {
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlayerActiveEvent) public class PlayerActiveEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalSourceRemovedEvent) @objcMembers public class _InternalSourceRemovedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let source: BitmovinPlayer.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc public class _BMPAVPlayer : AVFoundation.AVQueuePlayer {
  @objc override dynamic public var currentItem: BitmovinPlayer._BMPAVPlayerItem? {
    @objc get
  }
  @objc override dynamic public init()
  @objc(seekToTime:toleranceBefore:toleranceAfter:suppressEvents:completionHandler:) public func seek(time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, suppressEvents: Swift.Bool, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to time: CoreMedia.CMTime, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to date: Foundation.Date, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to date: Foundation.Date)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc public func cancelPendingSeeks()
  @objc deinit
}
@objc(_BMPLogLevel) public enum _LogLevel : Swift.Int {
  case verbose = 0
  case info
  case debug
  case warning
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPLogger) public protocol _Logger {
  @objc func log(_ message: Swift.String, level: BitmovinPlayer._LogLevel)
  @objc func log(prefix: Swift.String, message: Swift.String, level: BitmovinPlayer._LogLevel)
}
@objcMembers @objc(BMPPlayReadyConfig) final public class PlayReadyConfig : BitmovinPlayer.DrmConfig {
  @objc final public var licenseRequestHeaders: [Swift.String : Swift.String]
  @objc final public var licenseRequestRetryDelay: Swift.UInt
  @objc final public var maxLicenseRequestRetries: Swift.UInt
  @objc final public var mediaKeySystemConfig: Swift.String?
  @objc(initWithLicenseUrl:) public init(license licenseUrl: Foundation.URL?)
  @objc deinit
}
@objc(_BMPSeekingService) public protocol _SeekingService {
  @objc var wasTimeChangeCommandCalled: Swift.Bool { get }
  @objc var isSeekingBackToStart: Swift.Bool { get }
  @objc var isSeeking: Swift.Bool { get }
  @objc(seekToSource:time:suppressEvents:) func seek(to source: BitmovinPlayer.Source, time: Foundation.TimeInterval, suppressEvents: Swift.Bool)
  @objc(timeShift:suppressEvents:) func timeShift(to time: Foundation.TimeInterval, suppressEvents: Swift.Bool)
  @objc func seekBackToStartIfNeeded(completion: (() -> Swift.Void)?)
  @objc func adjustToTargetStartTime(_ startTime: Foundation.TimeInterval, completionHandler: ((Swift.Bool) -> Swift.Void)?)
  @objc func setReplayMode(_ replayMode: BitmovinPlayer.ReplayMode)
}
@objc(BMPMetadataType) public enum MetadataType : Swift.Int {
  case none = 0
  case ID3
  case EMSG
  case daterange
  case scte
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(BMPSource) public protocol Source : BitmovinPlayer.SourceEventHandler {
  @objc var sourceConfig: BitmovinPlayer.SourceConfig { get }
  @objc var isAttachedToPlayer: Swift.Bool { get }
  @objc var isActive: Swift.Bool { get }
  @objc var duration: Foundation.TimeInterval { get }
  @objc var loadingState: BitmovinPlayer.LoadingState { get }
  @objc var metadata: [Swift.String : Swift.AnyObject]? { get set }
  @objc func thumbnail(forTime time: Foundation.TimeInterval) -> BitmovinPlayer.Thumbnail?
}
@objcMembers @objc(BMPAdManifestLoadEvent) open class AdManifestLoadEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let adConfig: BitmovinPlayer.AdConfig?
  @objc final public let adBreak: BitmovinPlayer.AdBreak?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(adConfig: BitmovinPlayer.AdConfig?, adBreak: BitmovinPlayer.AdBreak?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(BMPOfflineContentManagerListener) public protocol OfflineContentManagerListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onOfflineError(_ event: BitmovinPlayer.OfflineErrorEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onContentDownloadFinished(_ event: BitmovinPlayer.ContentDownloadFinishedEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onContentDownloadProgressChanged(_ event: BitmovinPlayer.ContentDownloadProgressChangedEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onContentDownloadSuspended(_ event: BitmovinPlayer.ContentDownloadSuspendedEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onContentDownloadResumed(_ event: BitmovinPlayer.ContentDownloadResumedEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onContentDownloadCanceled(_ event: BitmovinPlayer.ContentDownloadCanceledEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onOfflineContentLicenseRenewed(_ event: BitmovinPlayer.OfflineContentLicenseRenewedEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onOfflineContentLicenseExpired(_ event: BitmovinPlayer.OfflineContentLicenseExpiredEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onAvailableTracksFetched(_ event: BitmovinPlayer.AvailableTracksFetchedEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onContentUrlMigrationFinished(_ event: BitmovinPlayer.ContentUrlMigrationFinishedEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
  @objc optional func onEvent(_ event: BitmovinPlayer.OfflineEvent, offlineContentManager: BitmovinPlayer.OfflineContentManager)
}
@objc(BMPUnstallingBehaviour) public enum UnstallingBehaviour : Swift.UInt {
  case relaxed = 0
  case aggressive = 1
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(BMPSourceConfig) open class SourceConfig : ObjectiveC.NSObject {
  @objc final public let url: Foundation.URL
  @objc final public let type: BitmovinPlayer.SourceType
  @objc public var title: Swift.String?
  @objc public var sourceDescription: Swift.String?
  @objc public var posterSource: Foundation.URL?
  @objc public var isPosterPersistent: Swift.Bool
  @objc public var labelingConfig: BitmovinPlayer.LabelingConfig
  @objc public var drmConfig: BitmovinPlayer.DrmConfig?
  @objc public var tracks: [BitmovinPlayer.Track] {
    get
  }
  @objc public var thumbnailTrack: BitmovinPlayer.ThumbnailTrack?
  @nonobjc public var metadata: [Swift.String : Any]
  @objc public var options: BitmovinPlayer.SourceOptions
  @objc convenience public init?(url: Foundation.URL)
  @objc convenience public init(url: Foundation.URL, type: BitmovinPlayer.SourceType)
  @objc(addSubtitleTrack:) public func add(subtitleTrack: BitmovinPlayer.SubtitleTrack)
  @objc deinit
}
extension BitmovinPlayer.SourceConfig {
  @objc(metadata) dynamic public var _metadata: Foundation.NSMutableDictionary {
    @objc get
    @objc set
  }
}
@objc(BMPTrackType) public enum TrackType : Swift.Int {
  case none
  case text
  case thumbnail
  case audio
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(BMPCueEvent) public protocol CueEvent {
  @objc var startTime: Foundation.TimeInterval { get }
  @objc var endTime: Foundation.TimeInterval { get }
  @objc var text: Swift.String? { get }
  @objc var html: Swift.String? { get }
  @objc var image: UIKit.UIImage? { get }
  @objc var position: BitmovinPlayer.CuePosition? { get }
  @objc var region: Swift.String? { get }
  @objc var regionStyle: Swift.String? { get }
  @objc var vtt: BitmovinPlayer.VttProperties? { get }
}
@objcMembers @objc(_BMPDefaultBufferService) public class _DefaultBufferService : BitmovinPlayer._DefaultService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(playerEventEmitter: BitmovinPlayer._PlayerEventEmitter, configService: BitmovinPlayer._ConfigService, playlistSourcesProvider: BitmovinPlayer._PlaylistSourcesProvider, currentSourceProvider: BitmovinPlayer._CurrentSourceProvider)
  @objc override dynamic public func start()
  @objc override dynamic public func stop()
  @objc deinit
}
extension BitmovinPlayer._DefaultBufferService : BitmovinPlayer._BufferService {
  @objc dynamic public func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
extension BitmovinPlayer._DefaultBufferService : BitmovinPlayer._PlayerListenerInternal {
  @objc dynamic public func onInternalSourceAdded(_ event: BitmovinPlayer._InternalSourceAddedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onInternalPlayerUnload(_ event: BitmovinPlayer._InternalPlayerUnloadEvent, player: BitmovinPlayer.Player)
}
@objc(BMPUserInterfaceType) public enum UserInterfaceType : Swift.Int {
  @available(tvOS, unavailable)
  case bitmovin
  case system
  case subtitle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(BMPAdManifestLoadedEvent) open class AdManifestLoadedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let downloadTime: Foundation.TimeInterval
  @objc final public let adConfig: BitmovinPlayer.AdConfig?
  @objc final public let adBreak: BitmovinPlayer.AdBreak?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(downloadTime: Foundation.TimeInterval, adBreak: BitmovinPlayer.AdBreak?, adConfig: BitmovinPlayer.AdConfig?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPImaSettings) @objcMembers public class ImaSettings : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var ppid: Swift.String?
  @objc public var language: Swift.String
  @objc public var maxRedirects: Swift.UInt
  @objc public var enableBackgroundPlayback: Swift.Bool
  @objc public var disableNowPlayingInfo: Swift.Bool
  @objc public var playerVersion: Swift.String?
  @objc public var sessionId: Swift.String?
  @objc @available(tvOS, unavailable)
  public var sameAppKeyEnabled: Swift.Bool
  @objc @available(tvOS, unavailable)
  public static func _create(ppid: Swift.String?, language: Swift.String, maxRedirects: Swift.UInt, enableBackgroundPlayback: Swift.Bool, disableNowPlayingInfo: Swift.Bool, playerVersion: Swift.String?, sessionId: Swift.String?, sameAppKeyEnabled: Swift.Bool) -> BitmovinPlayer.ImaSettings
  @objc @available(tvOS 12, *)
  @available(iOS, unavailable)
  public static func _create(ppid: Swift.String?, language: Swift.String, maxRedirects: Swift.UInt, enableBackgroundPlayback: Swift.Bool, disableNowPlayingInfo: Swift.Bool, playerVersion: Swift.String?, sessionId: Swift.String?) -> BitmovinPlayer.ImaSettings
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalBufferLevelChangedEvent) final public class _InternalBufferLevelChangedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let forwardBufferLevel: BitmovinPlayer.BufferLevel
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalSourcePlaybackFinishedEvent) public class _InternalSourcePlaybackFinishedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPNetworkConfig) public class NetworkConfig : ObjectiveC.NSObject {
  public typealias RetryHandler = (_ retryDelay: Foundation.TimeInterval, _ request: BitmovinPlayer.HttpRequest) -> Swift.Void
  public typealias AbortHandler = () -> Swift.Void
  public typealias RetryHttpRequestHandler = (_ type: BitmovinPlayer.HttpRequestType, _ retry: Swift.Int, _ response: BitmovinPlayer.HttpResponse, _ retryHandler: @escaping BitmovinPlayer.NetworkConfig.RetryHandler, _ abortHandler: @escaping BitmovinPlayer.NetworkConfig.AbortHandler) -> Swift.Void
  @objc weak public var preprocessHttpRequestDelegate: BitmovinPlayer.PreprocessHttpRequestDelegate?
  @objc public var retryHttpRequest: BitmovinPlayer.NetworkConfig.RetryHttpRequestHandler?
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPFullscreenHandler) public protocol FullscreenHandler : ObjectiveC.NSObjectProtocol {
  @objc var isFullscreen: Swift.Bool { get }
  @objc func onFullscreenRequested()
  @objc func onFullscreenExitRequested()
}
@objc @_inheritsConvenienceInitializers public class PictureInPictureExitedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPSourceUnloadedEvent) public class SourceUnloadedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: BitmovinPlayer.Source
  @objc public init(source: BitmovinPlayer.Source)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultPlaylistManipulator) public class _DefaultPlaylistManipulator : ObjectiveC.NSObject, BitmovinPlayer._PlaylistManipulator {
  @objc public func replace(decryptionKeyUrl keyUrl: Swift.String, with keyData: Foundation.Data, in playlist: Swift.String, decryptionKeyStoreStrategy keyStoreStrategy: BitmovinPlayer._PlaylistDecryptionKeyStoreStrategy) -> Swift.String
  @objc public func replace(manifestUrl url: Swift.String, with customUrl: Swift.String, in playlist: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPOfflineContentManagerEventEmitter) public protocol _OfflineContentManagerEventEmitter : BitmovinPlayer.OfflineContentManagerEventHandler {
  @objc(emitOfflineEvent:) func emit(event: BitmovinPlayer.OfflineEvent)
}
@objc(_BMPLegacyAssetDownloadTask) @objcMembers public class _LegacyAssetDownloadTask : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let offlineContentRelativePath: Swift.String
  @objc public init(identifier: Swift.String, offlineContentRelativePath: Swift.String)
  @objc deinit
}
extension Foundation.FileManager {
  @objc(_bmp_findPlaylistsAtContentLocation:) dynamic public func _bmp_findPlaylists(contentLocation: Foundation.URL) -> [Swift.String]
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalVariantPlaylistLoadedEvent) @objcMembers final public class _InternalVariantPlaylistLoadedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: Foundation.Data
  @objc final public let url: Foundation.URL
  @objc convenience public init(data: Foundation.Data, requestUrl: Foundation.URL)
  @objc deinit
}
@objcMembers @objc(BMPSourceWarningEvent) public class SourceWarningEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let code: BitmovinPlayer.SourceWarning.Code
  @objc final public let message: Swift.String
  @objc final public let data: BitmovinPlayer.DeficiencyData?
  @objc public init(code: BitmovinPlayer.SourceWarning.Code, message: Swift.String, data: BitmovinPlayer.DeficiencyData?)
  @objc deinit
}
extension BitmovinPlayer.SourceWarningEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_hasMissingDesignatedInitializers @available(tvOS, unavailable)
@objcMembers @objc(BMPImaAdAttributionUiMode) public class ImaAdAttributionUiMode : ObjectiveC.NSObject {
  @objc public static var imaDefault: BitmovinPlayer.ImaAdAttributionUiMode {
    @objc get
  }
  @objc public static var noAttribution: BitmovinPlayer.ImaAdAttributionUiMode {
    @objc get
  }
  @objc public static func attribution(countdown: Swift.Bool) -> BitmovinPlayer.ImaAdAttributionUiMode
  @objc final public let _isDefault: Swift.Bool
  @objc final public let _showAttribution: Swift.Bool
  @objc final public let _showCountdown: Swift.Bool
  @objc deinit
}
@objc(_BMPPlaylistService) public protocol _PlaylistService {
  @objc(loadPlaylistConfig:) func load(playlistConfig: BitmovinPlayer.PlaylistConfig)
  @objc func add(source: BitmovinPlayer.Source, at index: Swift.Int)
  @objc func add(source: BitmovinPlayer.Source)
  @objc func remove(sourceAt index: Swift.Int)
  @objc func unload()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPPlayEvent) @objcMembers public class PlayEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPStallEndedEvent) public class StallEndedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPVttPosition) @objcMembers final public class VttPosition : ObjectiveC.NSObject {
  @objc final public let type: BitmovinPlayer.VttPositionValueType
  @objc final public let value: Swift.Double
  @objc public static func _create(type: BitmovinPlayer.VttPositionValueType, value: Swift.Double) -> BitmovinPlayer.VttPosition
  @objc deinit
}
extension BitmovinPlayer.VttPosition : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(BMPRemoteControlType) public enum RemoteControlType : Swift.Int {
  case cast
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(BMPScteMetadataEntry) final public class ScteMetadataEntry : ObjectiveC.NSObject, BitmovinPlayer.MetadataEntry {
  @objc final public let key: Swift.String
  @objc final public let value: Swift.String?
  @objc final public var metadataType: BitmovinPlayer.MetadataType {
    @objc get
  }
  @objc public init(key: Swift.String, value: Swift.String?)
  @objc deinit
}
@objcMembers @objc(BMPAirPlayChangedEvent) public class AirPlayChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let isAirPlayActive: Swift.Bool
  @objc final public let time: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(airPlayActive: Swift.Bool, time: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPMovPkgResourceMigrator) public protocol _MovPkgResourceMigrator {
  @objc func needsMigration(atLocation contentLocation: Foundation.URL, toSourceUrl sourceUrl: Foundation.URL) -> Swift.Bool
  @objc func prepareOfflineContentMigration(atLocation contentLocation: Foundation.URL, toSourceUrl sourceUrl: Foundation.URL, using resourceIdentifierCallback: @escaping (_ url: Swift.String) -> Swift.String)
  @objc func migrate() throws
}
@objc(BMPContentDownloadFinishedEvent) public protocol ContentDownloadFinishedEvent : BitmovinPlayer.OfflineEvent {
}
@objcMembers @objc(BMPPlaylistConfig) final public class PlaylistConfig : ObjectiveC.NSObject {
  @objc final public let sources: [BitmovinPlayer.Source]
  @objc final public let options: BitmovinPlayer.PlaylistOptions
  @objc convenience public init(sources: [BitmovinPlayer.Source])
  @objc public init(sources: [BitmovinPlayer.Source], options: BitmovinPlayer.PlaylistOptions)
  @objc deinit
}
@objcMembers @objc(BMPSubtitleTrack) public class SubtitleTrack : BitmovinPlayer.Track {
  @objc final public let format: BitmovinPlayer.SubtitleFormat
  @objc final public let language: Swift.String?
  @objc final public let controller: BitmovinPlayer.SubtitleTrackController
  @objc public var isForced: Swift.Bool {
    get
  }
  @objc public init(url: Foundation.URL?, format: BitmovinPlayer.SubtitleFormat, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?, forced: Swift.Bool)
  @objc convenience public init(url: Foundation.URL?, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?)
  @objc convenience public init(url: Foundation.URL?, format: BitmovinPlayer.SubtitleFormat, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?)
  @objc convenience public init(url: Foundation.URL?, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?, forced: Swift.Bool)
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPTweaksConfig) final public class TweaksConfig : ObjectiveC.NSObject {
  @objc final public var isNativeHlsParsingEnabled: Swift.Bool
  @objc final public var isCustomHlsLoadingEnabled: Swift.Bool
  @objc final public var timeChangedInterval: Swift.Double
  @objc @available(*, deprecated, message: "This tweak is deprecated and will be removed without replacement in an upcoming minor version!")
  final public var disableSubtitleTracksWhileSeeking: Swift.Bool
  @objc final public var seekToEndThreshold: Swift.Double
  @objc final public var playbackStartBehaviour: BitmovinPlayer.PlaybackStartBehaviour
  @objc final public var unstallingBehaviour: BitmovinPlayer.UnstallingBehaviour
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPOfflineErrorEvent) public protocol OfflineErrorEvent : BitmovinPlayer.OfflineEvent {
  @objc var code: BitmovinPlayer.OfflineError.Code { get }
  @objc var message: Swift.String { get }
  @objc var data: BitmovinPlayer.DeficiencyData? { get }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPBufferLevel) public class BufferLevel : ObjectiveC.NSObject {
  @objc final public let level: Foundation.TimeInterval
  @objc final public let targetLevel: Foundation.TimeInterval
  @objc final public let media: BitmovinPlayer.MediaType
  @objc final public let type: BitmovinPlayer.BufferType
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalAdPlaybackDidRequestContentResumeEvent) @objcMembers public class _InternalAdPlaybackDidRequestContentResumeEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPStartOffsetCalculator) final public class _StartOffsetCalculator : ObjectiveC.NSObject {
  @objc(calculateStartOffsetForVoDWithSourceOptions:totalDuration:) public static func calculateStartOffsetForVoD(with sourceOptions: BitmovinPlayer.SourceOptions, totalDuration: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc(calculateStartOffsetForLiveWithSourceOptions:maxTimeShift:) public static func calculateStartOffsetForLive(with sourceOptions: BitmovinPlayer.SourceOptions, maxTimeShift: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPGetAvailableSubtitlesEvent) @objcMembers public class _GetAvailableSubtitlesEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let subtitleTracks: [BitmovinPlayer.SubtitleTrack]
  @objc public init(subtitleTracks: [BitmovinPlayer.SubtitleTrack]?)
  @objc deinit
}
@objc(_BMPDateTimeProvider) public protocol _DateTimeProvider {
  @objc var currentDate: Foundation.Date { get }
}
@objc @_inheritsConvenienceInitializers public class PictureInPictureExitEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDefaultScalingModeService) @objcMembers public class _DefaultScalingModeService : ObjectiveC.NSObject {
  @objc public init(avPlayerLayer: AVFoundation.AVPlayerLayer, uiEventEmitter: BitmovinPlayer._UserInterfaceEventEmitter)
  @objc deinit
}
extension BitmovinPlayer._DefaultScalingModeService : BitmovinPlayer._ScalingModeService {
  @objc dynamic public var scalingMode: BitmovinPlayer.ScalingMode {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(BMPTimeChangedEvent) open class TimeChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let currentTime: Foundation.TimeInterval
  @objc public init(currentTime: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPCastPausedEvent) @objcMembers open class CastPausedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPPlayerEvent) @objcMembers open class PlayerEvent : ObjectiveC.NSObject, BitmovinPlayer.Event {
  @objc final public let timestamp: Foundation.TimeInterval
  @objc public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayer.PlayerEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@objc(BMPPreprocessHttpRequestDelegate) public protocol PreprocessHttpRequestDelegate {
  @objc func preprocessHttpRequest(_ type: Swift.String, httpRequest: BitmovinPlayer.HttpRequest, completionHandler: @escaping (_ httpRequest: BitmovinPlayer.HttpRequest) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalCastSourceRemovedEvent) @objcMembers public class _InternalCastSourceRemovedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let source: BitmovinPlayer.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(_BMPDefaultOfflineContentManagerTweaksApi) @objcMembers final public class _DefaultOfflineContentManagerTweaksApi : ObjectiveC.NSObject {
  @objc public init(delegate: BitmovinPlayer._OfflineContentManagerTweaksApiDelegate)
  @objc deinit
}
extension BitmovinPlayer._DefaultOfflineContentManagerTweaksApi : BitmovinPlayer.OfflineContentManagerTweaksApi {
  @objc final public func migrateDownload(remoteAssetUrl: Foundation.URL, resourceIdentifierCallback: @escaping (_ identifier: Swift.String) -> Swift.String)
}
@objc(_BMPTimerFactory) public protocol _TimerFactory {
  @objc func create(timeInterval: Foundation.TimeInterval, eventHandlerQueue: Dispatch.DispatchQueue) -> BitmovinPlayer._Timer
  @objc func create(timeInterval: Foundation.TimeInterval, timerQueue: Dispatch.DispatchQueue, eventHandlerQueue: Dispatch.DispatchQueue) -> BitmovinPlayer._Timer
  @objc func createAndStart(timeInterval: Foundation.TimeInterval, repeats: Swift.Bool, eventHandlerQueue: Dispatch.DispatchQueue, eventHandler: @escaping () -> Swift.Void) -> BitmovinPlayer._Timer
  @objc func createAndStart(timeInterval: Foundation.TimeInterval, repeats: Swift.Bool, timerQueue: Dispatch.DispatchQueue, eventHandlerQueue: Dispatch.DispatchQueue, eventHandler: @escaping () -> Swift.Void) -> BitmovinPlayer._Timer
}
@objc(BMPOfflineEvent) public protocol OfflineEvent : BitmovinPlayer.Event {
}
@_hasMissingDesignatedInitializers @objc(BMPSourceRemovedEvent) @objcMembers public class SourceRemovedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let source: BitmovinPlayer.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(_BMPResourceLoaderService) public protocol _ResourceLoaderService {
  @objc(setupResourceLoadersWithSourceConfig:asset:) func setupResourceLoaders(with sourceConfig: BitmovinPlayer.SourceConfig, asset: AVFoundation.AVURLAsset)
}
@_hasMissingDesignatedInitializers @objc(_BMPUserContentControllerBuilder) @objcMembers public class _UserContentControllerBuilder : ObjectiveC.NSObject {
  @discardableResult
  @objc(addScriptMessageHandler:name:) public func add(scriptMessageHandler: WebKit.WKScriptMessageHandler, name: Swift.String) -> Self
  @objc public func build() -> WebKit.WKUserContentController
  @objc deinit
}
@objc(_BMPPlayerListenerInternal) public protocol _PlayerListenerInternal : BitmovinPlayer.PlayerListener {
  @objc optional func onUnseen(_ unseenEvents: [BitmovinPlayer.Event], player: BitmovinPlayer.Player)
  @objc optional func onInternalMasterPlaylistLoaded(_ event: BitmovinPlayer._InternalMasterPlaylistLoadedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalVariantPlaylistLoaded(_ event: BitmovinPlayer._InternalVariantPlaylistLoadedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalTimeChanged(_ event: BitmovinPlayer._InternalTimeChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalReady(_ event: BitmovinPlayer._InternalReadyEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalPlaybackInitiated(_ event: BitmovinPlayer._InternalPlaybackInitiatedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalPlaybackIntention(_ event: BitmovinPlayer._InternalPlaybackIntentionEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalTimeShift(_ event: BitmovinPlayer._InternalTimeShiftEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalTimeShifted(_ event: BitmovinPlayer._InternalTimeShiftedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalActiveSourceChanged(_ event: BitmovinPlayer._InternalActiveSourceChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalCastReady(_ event: BitmovinPlayer._InternalCastReadyEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalCastActiveSourceChanged(_ event: BitmovinPlayer._InternalCastActiveSourceChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalCastStop(_ event: BitmovinPlayer._InternalCastStopEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalBufferLevelChanged(_ event: BitmovinPlayer._InternalBufferLevelChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalPlaylistTransition(_ event: BitmovinPlayer._InternalPlaylistTransitionEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalCastPlaylistTransition(_ event: BitmovinPlayer._InternalCastPlaylistTransitionEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalPlaying(_ event: BitmovinPlayer._InternalPlayingEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalPlayerLoad(_ event: BitmovinPlayer._InternalPlayerLoadEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalPlayerUnload(_ event: BitmovinPlayer._InternalPlayerUnloadEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalSourcePlaybackFinished(_ event: BitmovinPlayer._InternalSourcePlaybackFinishedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalSourceAdded(_ event: BitmovinPlayer._InternalSourceAddedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalCastSourceAdded(_ event: BitmovinPlayer._InternalCastSourceAddedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalSourceRemoved(_ event: BitmovinPlayer._InternalSourceRemovedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalCastSourceRemoved(_ event: BitmovinPlayer._InternalCastSourceRemovedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalAdPlaybackDidRequestContentPause(_ event: BitmovinPlayer._InternalAdPlaybackDidRequestContentPauseEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalAdPlaybackDidRequestContentResume(_ event: BitmovinPlayer._InternalAdPlaybackDidRequestContentResumeEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalSeek(_ event: BitmovinPlayer._InternalSeekEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalSeeked(_ event: BitmovinPlayer._InternalSeekedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalCanStartPlaybackImmediately(_ event: BitmovinPlayer._InternalCanStartPlaybackImmediatelyEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalStallStarted(_ event: BitmovinPlayer._InternalStallStartedEvent, player: BitmovinPlayer.Player)
  @objc optional func onInternalStallEnded(_ event: BitmovinPlayer._InternalStallEndedEvent, player: BitmovinPlayer.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional func onInternalSharePlayStarted(_ event: BitmovinPlayer._InternalSharePlayStartedEvent, player: BitmovinPlayer.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional func onInternalSharePlayEnded(_ event: BitmovinPlayer._InternalSharePlayEndedEvent, player: BitmovinPlayer.Player)
}
@available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlaySuspension) public protocol SharePlaySuspension {
  typealias Reason = AVFoundation.AVCoordinatedPlaybackSuspension.Reason
  @objc var reason: Self.Reason { get }
  @objc var beginDate: Foundation.Date { get }
}
@objc(BMPPlaylistApi) public protocol PlaylistApi {
  @objc var sources: [BitmovinPlayer.Source] { get }
  @objc func seek(source: BitmovinPlayer.Source, time: Foundation.TimeInterval)
  @objc func add(source: BitmovinPlayer.Source, at index: Swift.Int)
  @objc func add(source: BitmovinPlayer.Source)
  @objc func remove(sourceAt index: Swift.Int)
}
@objc(_BMPInitializationService) public protocol _InitializationService : BitmovinPlayer._Service {
  @objc(setup:) func setup(playerConfig: BitmovinPlayer.PlayerConfig)
}
@objc(BMPPlaybackStartBehaviour) public enum PlaybackStartBehaviour : Swift.UInt {
  case relaxed = 0
  case aggressive = 1
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPDrmLicenseInformation) public class DrmLicenseInformation : ObjectiveC.NSObject {
  @objc final public let licenseDuration: Foundation.TimeInterval
  @objc final public let playbackDuration: Foundation.TimeInterval
  @objc convenience public init(licenseDuration: Foundation.TimeInterval, playbackDuration: Foundation.TimeInterval)
  @objc public func remainingLicenseDuration() -> Foundation.TimeInterval
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPCastPlayingEvent) @objcMembers open class CastPlayingEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPContentDownloadResumedEvent) public protocol ContentDownloadResumedEvent : BitmovinPlayer.OfflineEvent {
  @objc var progress: Swift.Double { get }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPBufferMediaTypeConfig) public class BufferMediaTypeConfig : ObjectiveC.NSObject {
  @objc public var forwardDuration: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPDrmConfig) public class DrmConfig : ObjectiveC.NSObject {
  @objc public var licenseUrl: Foundation.URL?
  @objc public var uuid: Foundation.UUID
  @objc(initWithLicenseUrl:uuid:) public init(license licenseUrl: Foundation.URL?, uuid: Foundation.UUID)
  @objc(initWithUUID:) convenience public init(uuid: Foundation.UUID)
  @objc deinit
}
@objc(_BMPLegacySourceInternal) public protocol _LegacySourceInternal : BitmovinPlayer.Source {
  @objc var isActive: Swift.Bool { get }
  @objc var urlAsset: AVFoundation.AVURLAsset { get }
  @objc var playerItem: BitmovinPlayer._BMPAVPlayerItem { get }
  @objc var embeddedMetadata: [BitmovinPlayer.Metadata] { get }
  @objc var isLive: Swift.Bool { get }
  @objc var availableAudio: [BitmovinPlayer.AudioTrack] { get }
  @objc var audio: BitmovinPlayer.AudioTrack? { get }
  @objc var maxTimeShift: Foundation.TimeInterval { get }
  @objc var targetStartTime: Foundation.TimeInterval { get }
  @objc var maxSelectableBitrate: Swift.UInt { get set }
  @objc var currentVideoFrameRate: Swift.Float { get }
  @objc var availableVideoQualities: [BitmovinPlayer.VideoQuality] { get }
  @objc var videoQuality: BitmovinPlayer.VideoQuality? { get }
  @objc var availableSubtitles: [BitmovinPlayer.SubtitleTrack] { get }
  @objc var subtitle: BitmovinPlayer.SubtitleTrack { get }
  @objc var subtitleCues: [BitmovinPlayer.Cue] { get }
  @objc func addSubtitleTrack(_ track: BitmovinPlayer.SubtitleTrack)
  @objc func removeSubtitleTrack(identifier: Swift.String)
  @objc func setSubtitleTrack(identifier: Swift.String?)
  @objc func setSubtitleStyles(_ subtitleStyles: [AVFoundation.AVTextStyleRule]?)
  @objc func setAudio(with identifier: Swift.String)
  @objc func canApplyPlaybackSpeed(_ playbackSpeed: Swift.Float) -> Swift.Bool
  @objc func clampPlaybackSpeedIfNeeded(_ playbackSpeed: Swift.Float) -> Swift.Float
}
@objcMembers @objc(_BMPGoogleCastSeekingService) final public class _GoogleCastSeekingService : BitmovinPlayer._DefaultService, BitmovinPlayer._SeekingService {
  @objc final public var isSeeking: Swift.Bool {
    get
  }
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(castManager: BitmovinPlayer.BitmovinCastManager, castMessagingService: BitmovinPlayer._CastMessagingService, currentSourceProvider: BitmovinPlayer._CurrentSourceProvider, playlistSourcesProvider: BitmovinPlayer._PlaylistSourcesProvider, timeService: BitmovinPlayer._TimeService, playerEventEmitter: BitmovinPlayer._PlayerEventEmitter, logger: BitmovinPlayer._Logger)
  @objc deinit
}
extension BitmovinPlayer._GoogleCastSeekingService {
  @objc final public var isSeekingBackToStart: Swift.Bool {
    @objc get
  }
  @objc final public var wasTimeChangeCommandCalled: Swift.Bool {
    @objc get
  }
  @objc final public func seek(to source: BitmovinPlayer.Source, time: Foundation.TimeInterval, suppressEvents: Swift.Bool)
  @objc final public func timeShift(to time: Foundation.TimeInterval, suppressEvents: Swift.Bool)
  @objc final public func seekBackToStartIfNeeded(completion: (() -> Swift.Void)? = nil)
  @objc final public func adjustToTargetStartTime(_ startTime: Foundation.TimeInterval, completionHandler: ((Swift.Bool) -> Swift.Void)?)
  @objc final public func setReplayMode(_ replayMode: BitmovinPlayer.ReplayMode)
}
@objc(BMPSubtitleTrackController) public protocol SubtitleTrackController : ObjectiveC.NSObjectProtocol {
  @objc func cueEnter(_ cue: BitmovinPlayer.Cue)
  @objc func cueExit(_ cue: BitmovinPlayer.Cue)
}
@objc(_BMPPlaylistUrlTracker) public protocol _PlaylistUrlTracker {
  @objc(registerUrl:type:) func register(url: Foundation.URL, type: BitmovinPlayer.HttpRequestType)
  @objc(typeForUrl:) func type(url: Foundation.URL) -> BitmovinPlayer.HttpRequestType
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(BMPPlayerView) @_Concurrency.MainActor(unsafe) open class PlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var player: BitmovinPlayer.Player? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var fullscreenHandler: BitmovinPlayer.FullscreenHandler? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var systemUi: BitmovinPlayer.SystemUiApi? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var pictureInPicture: BitmovinPlayer.PictureInPictureApi? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public init(player: BitmovinPlayer.Player, frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public init(player: BitmovinPlayer.Player, frame: CoreFoundation.CGRect, playerViewConfig: BitmovinPlayer.PlayerViewConfig)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToSuperview()
  @objc @_Concurrency.MainActor(unsafe) public func willRotate()
  @objc @_Concurrency.MainActor(unsafe) public func didRotate()
  @objc deinit
}
extension BitmovinPlayer.PlayerView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
}
extension BitmovinPlayer.PlayerView : BitmovinPlayer.UserInterfaceApi {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var isFullscreen: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var areControlsShown: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var isPictureInPictureAvailable: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var isPictureInPicture: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var scalingMode: BitmovinPlayer.ScalingMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public func enterPictureInPicture()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func exitPictureInPicture()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func enterFullscreen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func exitFullscreen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func setPosterImage(url: Foundation.URL, keepPersistent: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func setSubtitleStyles(_ subtitleStyles: [AVFoundation.AVTextStyleRule]?)
}
extension BitmovinPlayer.PlayerView : BitmovinPlayer.UserInterfaceEventHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func add(listener: BitmovinPlayer.UserInterfaceListener)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func remove(listener: BitmovinPlayer.UserInterfaceListener)
}
extension BitmovinPlayer.PlayerView : BitmovinPlayer._PlayerListenerInternal {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onCastWaiting(forDevice event: BitmovinPlayer.CastWaitingForDeviceEvent, player: BitmovinPlayer.Player)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onInternalAdPlaybackDidRequestContentPause(_ event: BitmovinPlayer._InternalAdPlaybackDidRequestContentPauseEvent, player: BitmovinPlayer.Player)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onInternalAdPlaybackDidRequestContentResume(_ event: BitmovinPlayer._InternalAdPlaybackDidRequestContentResumeEvent, player: BitmovinPlayer.Player)
}
@objc(BMPSourceType) public enum SourceType : Swift.Int {
  case none = 0
  case hls
  case dash
  case progressive
  case movpkg
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPFullscreenDisabledEvent) public class FullscreenDisabledEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPMetadataEvent) public class MetadataEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let metadataType: BitmovinPlayer.MetadataType
  @objc final public let metadata: BitmovinPlayer.Metadata
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(metadata: BitmovinPlayer.Metadata, type: BitmovinPlayer.MetadataType)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalStallStartedEvent) public class _InternalStallStartedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPOfflineConfig) @objcMembers final public class OfflineConfig : ObjectiveC.NSObject {
  @objc final public let restrictMediaDownloadsToWiFi: Swift.Bool
  @objc override convenience dynamic public init()
  @objc public init(restrictMediaDownloadsToWiFi: Swift.Bool)
  @objc deinit
}
@objc(BMPAdItem) @objcMembers public class AdItem : ObjectiveC.NSObject {
  @objc final public let sources: [BitmovinPlayer.AdSource]
  @objc final public let position: Swift.String?
  @objc convenience public init(adSources sources: [BitmovinPlayer.AdSource])
  @objc public init(adSources sources: [BitmovinPlayer.AdSource], atPosition position: Swift.String?)
  @objc deinit
}
extension BitmovinPlayer.AdItem : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objcMembers @objc(BMPSourceUnloadEvent) public class SourceUnloadEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: BitmovinPlayer.Source
  @objc public init(source: BitmovinPlayer.Source)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPFullscreenEnabledEvent) public class FullscreenEnabledEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalActiveSourceChangedEvent) final public class _InternalActiveSourceChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer._LegacySourceInternal?
  @objc final public let to: BitmovinPlayer._LegacySourceInternal?
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPVideoDownloadQualityChangedEvent) @objcMembers public class VideoDownloadQualityChangedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let videoQualityOld: BitmovinPlayer.VideoQuality?
  @objc final public let videoQualityNew: BitmovinPlayer.VideoQuality?
  @objc public init(newVideoQuality: BitmovinPlayer.VideoQuality?, oldVideoQuality: BitmovinPlayer.VideoQuality?)
  @objc deinit
}
extension BitmovinPlayer.VideoDownloadQualityChangedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objcMembers @objc(BMPSourceLoadedEvent) public class SourceLoadedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: BitmovinPlayer.Source
  @objc public init(source: BitmovinPlayer.Source)
  @objc deinit
}
extension BitmovinPlayer.SourceLoadedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_hasMissingDesignatedInitializers @objc(_BMPDefaultMovPkgResourceMigrator) @objcMembers final public class _DefaultMovPkgResourceMigrator : ObjectiveC.NSObject, BitmovinPlayer._MovPkgResourceMigrator {
  @objc convenience public init(logger: BitmovinPlayer._Logger)
  @objc final public func needsMigration(atLocation contentLocation: Foundation.URL, toSourceUrl sourceUrl: Foundation.URL) -> Swift.Bool
  @objc final public func prepareOfflineContentMigration(atLocation contentLocation: Foundation.URL, toSourceUrl sourceUrl: Foundation.URL, using resourceIdentifierCallback: @escaping (_ url: Swift.String) -> Swift.String)
  @objc final public func migrate() throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPOfflineAudioTrack) @objcMembers final public class OfflineAudioTrack : BitmovinPlayer.OfflineTrack {
  @objc override final public class var _defaultAction: BitmovinPlayer.OfflineTrackAction {
    @objc get
  }
  @objc final public let label: Swift.String
  @objc final public let language: Swift.String?
  @objc final public let isDefault: Swift.Bool
  @objc public static func _create(identifier: Swift.String, label: Swift.String, language: Swift.String, isDefault: Swift.Bool) -> BitmovinPlayer.OfflineAudioTrack
  @objc deinit
}
@objcMembers @objc(BMPCue) public class Cue : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var startTime: Foundation.TimeInterval
  @objc public var endTime: Foundation.TimeInterval
  @objc public var html: Swift.String?
  @objc public var text: Swift.String?
  @objc public var image: UIKit.UIImage?
  @objc public var position: BitmovinPlayer.CuePosition?
  @objc public var region: Swift.String?
  @objc public var regionStyle: Swift.String?
  @objc public var vtt: BitmovinPlayer.VttProperties?
  @objc public init(startTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval, html: Swift.String?, text: Swift.String?, image: UIKit.UIImage?, position: BitmovinPlayer.CuePosition?, region: Swift.String?, regionStyle: Swift.String?, vttProperties: BitmovinPlayer.VttProperties?)
  @objc convenience public init(startTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval, html: Swift.String?, text: Swift.String?, image: UIKit.UIImage?, position: BitmovinPlayer.CuePosition?, region: Swift.String?, regionStyle: Swift.String?)
  @objc convenience public init(startTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval, text: Swift.String)
  @objc convenience public init(startTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval, text: Swift.String, vttProperties: BitmovinPlayer.VttProperties?)
  @objc convenience public init(startTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval, html: Swift.String)
  @objc convenience public init(startTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval, image: UIKit.UIImage)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc(_BMPAVPlayerViewControllerListener) public protocol _AVPlayerViewControllerListener {
  @objc optional func playerViewControllerWillStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewControllerDidStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewControllerWillStopPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewControllerDidStopPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewControllerFailedToStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willTransitionToVisibilityOfTransportBar visible: Swift.Bool)
  @objc optional func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, didChangeVideoGravity oldVideoGravity: AVFoundation.AVLayerVideoGravity, newVideoGravity: AVFoundation.AVLayerVideoGravity)
  @objc optional func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPDefaultTimer) final public class _DefaultTimer : ObjectiveC.NSObject {
  @objc final public var eventHandler: (() -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension BitmovinPlayer._DefaultTimer : BitmovinPlayer._Timer {
  @objc final public var isRunning: Swift.Bool {
    @objc get
  }
  @objc final public var isCanceled: Swift.Bool {
    @objc get
  }
  @objc final public var isSuspended: Swift.Bool {
    @objc get
  }
  @objc final public func resume()
  @objc final public func suspend()
  @objc final public func cancel()
}
@objc(_BMPDefaultViewHierarchyHandler) @objcMembers public class _DefaultViewHierarchyHandler : ObjectiveC.NSObject, BitmovinPlayer._ViewHierarchyHandler {
  @objc weak public var shutterView: UIKit.UIView?
  @objc weak public var posterView: UIKit.UIView?
  @objc weak public var playerView: UIKit.UIView?
  @objc weak public var adContainerView: UIKit.UIView?
  @objc public init(parentView: UIKit.UIView)
  @objc public func handleSubViewOrdering()
  @objc deinit
}
@objc(_BMPTimer) public protocol _Timer {
  @objc var isRunning: Swift.Bool { get }
  @objc var isCanceled: Swift.Bool { get }
  @objc var isSuspended: Swift.Bool { get }
  @objc var eventHandler: (() -> Swift.Void)? { get set }
  @objc func resume()
  @objc func suspend()
  @objc func cancel()
}
@objcMembers @objc(_BMPDefaultContentDownloadProgressChangedEvent) public class _DefaultContentDownloadProgressChangedEvent : ObjectiveC.NSObject, BitmovinPlayer.ContentDownloadProgressChangedEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let progress: Swift.Double
  @objc public init(progress: Swift.Double)
  @objc deinit
}
@objc(BMPSourceListener) public protocol SourceListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onDurationChanged(_ event: BitmovinPlayer.DurationChangedEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceLoad(_ event: BitmovinPlayer.SourceLoadEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceUnload(_ event: BitmovinPlayer.SourceUnloadEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceWarning(_ event: BitmovinPlayer.SourceWarningEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceError(_ event: BitmovinPlayer.SourceErrorEvent, source: BitmovinPlayer.Source)
  @objc optional func onMetadataParsed(_ event: BitmovinPlayer.MetadataParsedEvent, source: BitmovinPlayer.Source)
  @objc optional func onEvent(_ event: BitmovinPlayer.SourceEvent, source: BitmovinPlayer.Source)
  @objc optional func onDrmDataParsed(_ event: BitmovinPlayer.DrmDataParsedEvent, source: BitmovinPlayer.Source)
  @objc optional func onAudioAdded(_ event: BitmovinPlayer.AudioAddedEvent, source: BitmovinPlayer.Source)
  @objc optional func onAudioRemoved(_ event: BitmovinPlayer.AudioRemovedEvent, source: BitmovinPlayer.Source)
  @objc optional func onAudioChanged(_ event: BitmovinPlayer.AudioChangedEvent, source: BitmovinPlayer.Source)
  @objc optional func onCueParsed(_ event: BitmovinPlayer.CueParsedEvent, source: BitmovinPlayer.Source)
  @objc optional func onSubtitleAdded(_ event: BitmovinPlayer.SubtitleAddedEvent, source: BitmovinPlayer.Source)
  @objc optional func onSubtitleRemoved(_ event: BitmovinPlayer.SubtitleRemovedEvent, source: BitmovinPlayer.Source)
  @objc optional func onSubtitleChanged(_ event: BitmovinPlayer.SubtitleChangedEvent, source: BitmovinPlayer.Source)
  @objc optional func onVideoDownloadQualityChanged(_ event: BitmovinPlayer.VideoDownloadQualityChangedEvent, source: BitmovinPlayer.Source)
  @objc optional func onVideoPlaybackQualityChanged(_ event: BitmovinPlayer.VideoPlaybackQualityChangedEvent, source: BitmovinPlayer.Source)
}
@_inheritsConvenienceInitializers @objc(_BMPArchiveHelperFactory) @objcMembers final public class _ArchiveHelperFactory : ObjectiveC.NSObject {
  @objc(createForSourceConfig:withIdentifier:logger:) public static func create(for sourceConfig: BitmovinPlayer.SourceConfig, id: BitmovinPlayer._HashedIdentifier, logger: BitmovinPlayer._Logger) -> BitmovinPlayer._ArchiveHelper
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalSeekedEvent) @objcMembers public class _InternalSeekedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSystemUserInterfaceConfig) public class SystemUserInterfaceConfig : BitmovinPlayer.UserInterfaceConfig {
  @objc public var subtitleStyles: [AVFoundation.AVTextStyleRule]?
  @objc public var hideFirstFrame: Swift.Bool
  @objc @available(tvOS 12, *)
  @available(iOS, unavailable)
  public var showAutoSubtitleOption: Swift.Bool
  @objc @available(tvOS 12, *)
  @available(iOS, unavailable)
  public var showSeekBar: Swift.Bool
  @objc @available(tvOS 12.0, *)
  @available(iOS, unavailable)
  public var showInfoViews: Swift.Bool
  @objc @available(tvOS 15.0, *)
  @available(iOS, unavailable)
  public var showTitleInSeekBar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(tvOS 15.0, iOS 13.0, *)
  @available(iOS, unavailable)
  public var transportBarCustomMenuItems: [UIKit.UIMenuElement] {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPSourceEventEmitter) public protocol _SourceEventEmitter {
  @objc func emit(event: BitmovinPlayer.SourceEvent, isInternal: Swift.Bool)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPDefaultUIBackgroundPlaybackHandler) public class _DefaultUIBackgroundPlaybackHandler : ObjectiveC.NSObject {
  @objc convenience public init(player: BitmovinPlayer.Player, pictureInPictureService: BitmovinPlayer._PictureInPictureService?, playerView: BitmovinPlayer.PlayerView, avPlayerViewController: AVKit.AVPlayerViewController)
  @objc convenience public init(player: BitmovinPlayer.Player, pictureInPictureService: BitmovinPlayer._PictureInPictureService?, playerView: BitmovinPlayer.PlayerView)
  @objc deinit
}
extension BitmovinPlayer._DefaultUIBackgroundPlaybackHandler : BitmovinPlayer._BackgroundPlaybackLifecycleHandlerDelegate {
  @objc dynamic public func enteringBackground()
  @objc dynamic public func exitingBackground()
}
extension BitmovinPlayer._DefaultUIBackgroundPlaybackHandler : BitmovinPlayer._UIBackgroundPlaybackHandler {
}
@objc(_BMPTimeService) public protocol _TimeService {
  @objc var duration: Foundation.TimeInterval { get }
  @objc var maxTimeShift: Foundation.TimeInterval { get }
  @objc var timeShift: Foundation.TimeInterval { get }
  @objc var liveEdge: Foundation.TimeInterval { get }
  @objc func currentTime(_ timeMode: BitmovinPlayer.TimeMode) -> Foundation.TimeInterval
}
@objcMembers @objc(BMPPlaylistTransitionEvent) public class PlaylistTransitionEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer.Source
  @objc final public let to: BitmovinPlayer.Source
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(from: BitmovinPlayer.Source, to: BitmovinPlayer.Source)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPSubtitleAddedEvent) @objcMembers open class SubtitleAddedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let subtitleTrack: BitmovinPlayer.SubtitleTrack
  @objc public init(subtitleTrack: BitmovinPlayer.SubtitleTrack)
  @objc deinit
}
extension BitmovinPlayer.SubtitleAddedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSubtitleUserInterfaceConfig) public class SubtitleUserInterfaceConfig : BitmovinPlayer.UserInterfaceConfig {
  @objc public var subtitleStyles: [AVFoundation.AVTextStyleRule]?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPLabelingConfig) public class LabelingConfig : ObjectiveC.NSObject {
  @objc public var subtitleLabel: ((_ track: BitmovinPlayer.SubtitleTrack) -> Swift.String)?
  @objc public var audioLabel: ((_ track: BitmovinPlayer.AudioTrack) -> Swift.String)?
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPOfflineContentLicenseRenewedEvent) public protocol OfflineContentLicenseRenewedEvent : BitmovinPlayer.OfflineEvent {
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPPlaylistLoaderRetryHandler) public class _PlaylistLoaderRetryHandler : ObjectiveC.NSObject {
  @objc public var retryHttpRequestHandler: BitmovinPlayer.NetworkConfig.RetryHttpRequestHandler! {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPAdScheduledEvent) @objcMembers open class AdScheduledEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let numberOfAds: Swift.UInt
  @objc public init(numberOfAds: Swift.UInt)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(BMPAudioAddedEvent) @objcMembers public class AudioAddedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let audioTrack: BitmovinPlayer.AudioTrack
  @objc final public let time: Foundation.TimeInterval
  @objc public init(audioTrack: BitmovinPlayer.AudioTrack, time: Foundation.TimeInterval)
  @objc deinit
}
extension BitmovinPlayer.AudioAddedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalCastSourceAddedEvent) @objcMembers public class _InternalCastSourceAddedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let source: BitmovinPlayer.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(_BMPScalingModeService) public protocol _ScalingModeService {
  @objc var scalingMode: BitmovinPlayer.ScalingMode { get set }
}
@objcMembers @objc(_BMPDefaultOfflineErrorEvent) public class _DefaultOfflineErrorEvent : ObjectiveC.NSObject, BitmovinPlayer.OfflineErrorEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let code: BitmovinPlayer.OfflineError.Code
  @objc final public let message: Swift.String
  @objc final public let data: BitmovinPlayer.DeficiencyData?
  @objc public init(code: BitmovinPlayer.OfflineError.Code, message: Swift.String, data: BitmovinPlayer.DeficiencyData?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultOfflineContentLicenseExpiredEvent) public class _DefaultOfflineContentLicenseExpiredEvent : ObjectiveC.NSObject, BitmovinPlayer.OfflineContentLicenseExpiredEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPMetadataParsedEvent) public class MetadataParsedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let name: Swift.String
  @objc final public let metadataType: BitmovinPlayer.MetadataType
  @objc final public let metadata: BitmovinPlayer.Metadata
  @objc public init(metadata: BitmovinPlayer.Metadata, type: BitmovinPlayer.MetadataType)
  @objc deinit
}
@objcMembers @objc(BMPAdBreakEvent) open class AdBreakEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let adBreak: BitmovinPlayer.AdBreak
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(adBreak: BitmovinPlayer.AdBreak)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultContentDownloadCanceledEvent) public class _DefaultContentDownloadCanceledEvent : ObjectiveC.NSObject, BitmovinPlayer.ContentDownloadCanceledEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPSourceLoadEvent) public class SourceLoadEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: BitmovinPlayer.Source
  @objc public init(source: BitmovinPlayer.Source)
  @objc deinit
}
extension Foundation.NSURL {
  @objc dynamic public var _bmp_isHlsUrl: Swift.Bool {
    @objc get
  }
  @objc dynamic public var _bmp_isProgressiveUrl: Swift.Bool {
    @objc get
  }
  @objc dynamic public var _bmp_isDashUrl: Swift.Bool {
    @objc get
  }
  @objc dynamic public var _bmp_isMovpkgUrl: Swift.Bool {
    @objc get
  }
  @objc dynamic public var _bmp_sourceType: BitmovinPlayer.SourceType {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalReadyEvent) public class _InternalReadyEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(_BMPGoogleCastPlaybackFinishedService) final public class _GoogleCastPlaybackFinishedService : BitmovinPlayer._DefaultService, BitmovinPlayer._PlaybackFinishedService {
  @objc final public var isPlaybackFinished: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(castMessagingService: BitmovinPlayer._CastMessagingService, playerEventEmitter: BitmovinPlayer._PlayerEventEmitter)
  @objc deinit
}
extension BitmovinPlayer._GoogleCastPlaybackFinishedService {
  @objc override final public func start()
  @objc override final public func stop()
}
extension BitmovinPlayer._GoogleCastPlaybackFinishedService : BitmovinPlayer._CastMessagesListener {
  @objc final public func onRemotePlayerState(_ event: BitmovinPlayer._RemotePlayerStateEvent)
}
extension BitmovinPlayer._GoogleCastPlaybackFinishedService : BitmovinPlayer._PlayerListenerInternal {
  @objc final public func onInternalPlaybackInitiated(_ event: BitmovinPlayer._InternalPlaybackInitiatedEvent, player: BitmovinPlayer.Player)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPCueExitEvent) open class CueExitEvent : BitmovinPlayer.PlayerEvent, BitmovinPlayer.CueEvent {
  @objc public var startTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var endTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var text: Swift.String? {
    @objc get
  }
  @objc public var html: Swift.String? {
    @objc get
  }
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  @objc public var position: BitmovinPlayer.CuePosition? {
    @objc get
  }
  @objc public var region: Swift.String? {
    @objc get
  }
  @objc public var regionStyle: Swift.String? {
    @objc get
  }
  @objc public var vtt: BitmovinPlayer.VttProperties? {
    @objc get
  }
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPRemoteControlConfig) public class RemoteControlConfig : ObjectiveC.NSObject {
  @objc public var receiverStylesheetUrl: Foundation.URL?
  @objc public var customReceiverConfig: [Swift.String : Swift.String]
  @objc public var prepareSource: ((_ type: BitmovinPlayer.RemoteControlType, _ sourceConfig: BitmovinPlayer.SourceConfig) -> BitmovinPlayer.SourceConfig?)?
  @objc public var usesExternalPlaybackWhileExternalScreenIsActive: Swift.Bool
  @objc public var sendManifestRequestsWithCredentials: Swift.Bool
  @objc public var sendSegmentRequestsWithCredentials: Swift.Bool
  @objc public var sendDrmLicenseRequestsWithCredentials: Swift.Bool
  @objc public var isAirPlayEnabled: Swift.Bool
  @objc public var isCastEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdFinishedEvent) open class AdFinishedEvent : BitmovinPlayer.AdEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public init(ad: BitmovinPlayer.Ad)
  @objc deinit
}
@objcMembers @objc(BMPAdClickedEvent) open class AdClickedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let clickThroughUrl: Foundation.URL?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(clickThroughUrl: Foundation.URL?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(BMPAdStartedEvent) open class AdStartedEvent : BitmovinPlayer.AdEvent {
  @objc final public let clickThroughUrl: Foundation.URL?
  @objc final public let clientType: BitmovinPlayer.AdSourceType
  @objc final public let indexInQueue: Swift.UInt
  @objc final public let duration: Foundation.TimeInterval
  @objc final public let timeOffset: Foundation.TimeInterval
  @objc final public let skipOffset: Foundation.TimeInterval
  @objc final public let position: Swift.String?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(clickThroughUrl: Foundation.URL?, clientType: BitmovinPlayer.AdSourceType, indexInQueue: Swift.UInt, duration: Foundation.TimeInterval, timeOffset: Foundation.TimeInterval, skipOffset: Foundation.TimeInterval, position: Swift.String?, ad: BitmovinPlayer.Ad)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(_BMPDefaultContentDownloadResumedEvent) public class _DefaultContentDownloadResumedEvent : ObjectiveC.NSObject, BitmovinPlayer.ContentDownloadResumedEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let progress: Swift.Double
  @objc public init(progress: Swift.Double)
  @objc deinit
}
@objc(_BMPPlayerUIControllerFactory) public protocol _PlayerUIControllerFactory {
  @objc func create(player: BitmovinPlayer.Player, playerView: BitmovinPlayer.PlayerView, viewHierarchyHandler: BitmovinPlayer._ViewHierarchyHandler, uiEventEmitter: BitmovinPlayer._UserInterfaceEventEmitter, pictureInPictureConfig: BitmovinPlayer.PictureInPictureConfig, logger: BitmovinPlayer._Logger) -> BitmovinPlayer._PlayerUIController
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSeekedEvent) public class SeekedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPSubtitleUIController) public class _SubtitleUIController : ObjectiveC.NSObject {
  @objc weak public var player: BitmovinPlayer.Player?
  @objc public var scalingMode: BitmovinPlayer.ScalingMode {
    @objc get
    @objc set
  }
  @objc convenience public init(player: BitmovinPlayer.Player, playerView: BitmovinPlayer.PlayerView, uiEventEmitter: BitmovinPlayer._UserInterfaceEventEmitter, pictureInPictureConfig: BitmovinPlayer.PictureInPictureConfig, logger: BitmovinPlayer._Logger)
  @objc deinit
}
extension BitmovinPlayer._SubtitleUIController : BitmovinPlayer._PlayerUIController {
  @objc dynamic public var areControlsShown: Swift.Bool {
    @objc get
  }
  @objc dynamic public var hasOwnPlayerLayer: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isPictureInPicture: Swift.Bool {
    @objc get
  }
  @objc dynamic public var rootView: UIKit.UIView? {
    @objc get
  }
  @available(iOS 14.0, *)
  @available(tvOS, unavailable)
  @objc dynamic public var showSkipControlsInPictureInPicture: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public func enterPictureInPicture()
  @objc dynamic public func exitPictureInPicture()
  @objc dynamic public func destroy()
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPCustomMessageHandler) public class CustomMessageHandler : ObjectiveC.NSObject {
  @objc weak public var delegate: BitmovinPlayer.CustomMessageHandlerDelegate?
  @objc public func sendMessage(_ message: Swift.String)
  @objc public func sendMessage(_ message: Swift.String, withData data: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDeficiencyService) public protocol _DeficiencyService {
  @objc(throwError:data:) func throwError(code: BitmovinPlayer.PlayerError.Code, data: BitmovinPlayer.DeficiencyData?)
  @objc func throwError(code: BitmovinPlayer.PlayerError.Code, message: Swift.String, data: BitmovinPlayer.DeficiencyData?)
  @objc(throwError:replacements:data:) func throwError(code: BitmovinPlayer.PlayerError.Code, replacements: [Swift.String]?, data: BitmovinPlayer.DeficiencyData?)
  @objc(throwWarning:data:) func throwWarning(code: BitmovinPlayer.PlayerWarning.Code, data: BitmovinPlayer.DeficiencyData?)
  @objc(throwWarning:replacements:data:) func throwWarning(code: BitmovinPlayer.PlayerWarning.Code, replacements: [Swift.String]?, data: BitmovinPlayer.DeficiencyData?)
}
extension Foundation.NSString {
  @objc dynamic public var bmp_md5: Foundation.NSString {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultEventSuppressor) public class _DefaultEventSuppressor : ObjectiveC.NSObject, BitmovinPlayer._EventSuppressor {
  @objc public func suppress(eventType: BitmovinPlayer.Event.Type)
  @objc public func removeSuppression(eventType: BitmovinPlayer.Event.Type)
  @objc public func isSuppressed(eventType: BitmovinPlayer.Event.Type) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPPictureInPictureApi) public protocol PictureInPictureApi {
  @objc @available(iOS 14.0, *)
  @available(tvOS, unavailable)
  var showSkipControls: Swift.Bool { get set }
}
@objc(_BMPArchiveHelper) public protocol _ArchiveHelper {
  @objc var sourceIdentifier: Swift.String? { get }
  @objc var archive: BitmovinPlayer._PersistentArchive? { get }
  @objc var offlineContentDirectoryUrl: Foundation.URL? { get }
  @objc var offlineContentUrl: Foundation.URL? { get }
  @objc var isStored: Swift.Bool { get }
}
@objcMembers @objc(_BMPDefaultAvailableTracksFetchedEvent) public class _DefaultAvailableTracksFetchedEvent : ObjectiveC.NSObject, BitmovinPlayer.AvailableTracksFetchedEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let tracks: BitmovinPlayer.OfflineTrackSelection
  @objc public init(tracks: BitmovinPlayer.OfflineTrackSelection)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPUnmutedEvent) @objcMembers open class UnmutedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPWebUiEventHandler) public protocol _WebUiEventHandler {
  @objc var isUiReady: Swift.Bool { get set }
  @objc var player: BitmovinPlayer.Player? { get set }
}
@objc(_BMPCurrentSourceProvider) public protocol _CurrentSourceProvider {
  @objc var currentSource: BitmovinPlayer._LegacySourceInternal? { get }
}
@_inheritsConvenienceInitializers @objc(BMPCastPlaybackFinishedEvent) @objcMembers open class CastPlaybackFinishedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@available(*, deprecated, message: "Use OfflineContentManagerListener instead")
@objc(BMPOfflineManagerListener) public protocol OfflineManagerListener : ObjectiveC.NSObjectProtocol {
  @available(*, deprecated, message: "Use OfflineContentManagerListener.onOfflineError(_:offlineContentManager:) instead")
  @objc optional func offlineManager(_ offlineManager: BitmovinPlayer.OfflineManager, didFailWithError error: Swift.Error?)
  @available(*, deprecated, message: "Use OfflineContentManagerListener.onContentDownloadFinished(_:offlineContentManager:) instead")
  @objc optional func offlineManagerDidFinishDownload(_ offlineManager: BitmovinPlayer.OfflineManager)
  @available(*, deprecated, message: "Use OfflineContentManagerListener.onContentDownloadProgressChanged(_:offlineContentManager:) instead")
  @objc optional func offlineManager(_ offlineManager: BitmovinPlayer.OfflineManager, didProgressTo progress: Swift.Double)
  @available(*, deprecated, message: "Use OfflineContentManagerListener.onContentDownloadSuspended(_:offlineContentManager:) instead")
  @objc optional func offlineManagerDidSuspendDownload(_ offlineManager: BitmovinPlayer.OfflineManager)
  @available(*, deprecated, message: "Use OfflineContentManagerListener.onContentDownloadResumed(_:offlineContentManager:) instead")
  @objc optional func offlineManager(_ offlineManager: BitmovinPlayer.OfflineManager, didResumeDownloadWithProgress progress: Swift.Double)
  @available(*, deprecated, message: "Use OfflineContentManagerListener.onContentDownloadCanceled(_:offlineContentManager:) instead")
  @objc optional func offlineManagerDidCancelDownload(_ offlineManager: BitmovinPlayer.OfflineManager)
  @available(*, deprecated, message: "Use OfflineContentManagerListener.onOfflineContentLicenseRenewed(_:offlineContentManager:) instead")
  @objc optional func offlineManagerDidRenewOfflineLicense(_ offlineManager: BitmovinPlayer.OfflineManager)
  @available(*, deprecated, message: "Use OfflineContentManagerListener.onOfflineContentLicenseExpired(_:offlineContentManager:) instead")
  @objc optional func offlineManagerOfflineLicenseDidExpire(_ offlineManager: BitmovinPlayer.OfflineManager)
  @available(*, deprecated, message: "Use OfflineContentManagerListener.onAvailableTracksFetched(_:offlineContentManager:) instead")
  @objc optional func offlineManager(_ offlineManager: BitmovinPlayer.OfflineManager, didFetchAvailableTracks tracks: BitmovinPlayer.OfflineTrackSelection)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPBitmovinCastManagerOptions) final public class BitmovinCastManagerOptions : ObjectiveC.NSObject {
  @objc final public var applicationId: Swift.String?
  @objc final public var messageNamespace: Swift.String?
  @objc final public var enableBackgroundSessions: Swift.Bool
  @objc final public var deviceDiscoveryMode: BitmovinPlayer.CastDeviceDiscoveryMode
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPPlayerErrorEvent) public class PlayerErrorEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let code: BitmovinPlayer.PlayerError.Code
  @objc final public let message: Swift.String
  @objc final public let data: BitmovinPlayer.DeficiencyData?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(code: BitmovinPlayer.PlayerError.Code, message: Swift.String, data: BitmovinPlayer.DeficiencyData?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPDefaultOfflineContentUrlMigrationHandler) @objcMembers public class _DefaultOfflineContentUrlMigrationHandler : ObjectiveC.NSObject {
  @objc weak public var delegate: BitmovinPlayer._OfflineContentUrlMigrationHandlerDelegate?
  @objc public init(migrator: BitmovinPlayer._MovPkgResourceMigrator, archiveHelper: BitmovinPlayer._ArchiveHelper)
  @objc deinit
}
extension BitmovinPlayer._DefaultOfflineContentUrlMigrationHandler : BitmovinPlayer._OfflineContentUrlMigrationHandler {
  @objc dynamic public var isMigrationInProgress: Swift.Bool {
    @objc get
  }
  @objc dynamic public func migrate(from originalRemoteAssetUrl: Foundation.URL, to targetRemoteAssetUrl: Foundation.URL, activeDownloadTask: BitmovinPlayer._DownloadTask?, resourceIdentifierCallback: @escaping (_ identifier: Swift.String) -> Swift.String)
  @objc dynamic public func handleRestoration(of downloadTask: BitmovinPlayer._DownloadTask)
  @objc dynamic public func maybeFinishMigration()
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPMutedEvent) public class MutedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPStyleConfig) final public class StyleConfig : ObjectiveC.NSObject {
  @objc final public var isUiEnabled: Swift.Bool
  @objc final public var userInterfaceType: BitmovinPlayer.UserInterfaceType
  @objc @available(tvOS, unavailable)
  final public var playerUiCss: Foundation.URL
  @objc @available(tvOS, unavailable)
  final public var supplementalPlayerUiCss: Foundation.URL?
  @objc @available(tvOS, unavailable)
  final public var playerUiJs: Foundation.URL
  @objc final public var scalingMode: BitmovinPlayer.ScalingMode
  @objc final public var userInterfaceConfig: BitmovinPlayer.UserInterfaceConfig?
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPDaterangeMetadata) public class DaterangeMetadata : BitmovinPlayer.Metadata {
  @objc final public let identifier: Swift.String
  @objc final public let classLabel: Swift.String?
  @objc final public let startDate: Foundation.Date
  @objc final public let endDate: Foundation.Date?
  @objc public init(entries: [BitmovinPlayer.MetadataEntry], identifier: Swift.String, classLabel: Swift.String?, start startDate: Foundation.Date, end endDate: Foundation.Date?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPDestroyEvent) public class DestroyEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPSourceEvent) public protocol SourceEvent : BitmovinPlayer.Event {
}
@objc(BMPSourceEventHandler) public protocol SourceEventHandler {
  @objc(addListener:) func add(listener: BitmovinPlayer.SourceListener)
  @objc(removeListener:) func remove(listener: BitmovinPlayer.SourceListener)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPSubtitleChangedEvent) @objcMembers open class SubtitleChangedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let subtitleTrackOld: BitmovinPlayer.SubtitleTrack?
  @objc final public let subtitleTrackNew: BitmovinPlayer.SubtitleTrack?
  @objc public init(newSubtitleTrack: BitmovinPlayer.SubtitleTrack?, oldSubtitleTrack: BitmovinPlayer.SubtitleTrack?)
  @objc deinit
}
extension BitmovinPlayer.SubtitleChangedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@objc(_BMPGetAvailableAudioEvent) @objcMembers public class _GetAvailableAudioEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let audioTracks: [BitmovinPlayer.AudioTrack]
  @objc public init(audioTracks: [BitmovinPlayer.AudioTrack]?)
  @objc deinit
}
@objcMembers @objc(BMPAdErrorEvent) open class AdErrorEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let adItem: BitmovinPlayer.AdItem?
  @objc final public let code: Swift.Int
  @objc final public let message: Swift.String
  @objc final public let adConfig: BitmovinPlayer.AdConfig?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(adItem: BitmovinPlayer.AdItem?, code: Swift.Int, message: Swift.String, adConfig: BitmovinPlayer.AdConfig?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPCastStoppedEvent) @objcMembers open class CastStoppedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPBufferApiDelegate) public protocol _BufferApiDelegate {
  @objc(bufferApi_getLevel:) func bufferApi_getLevel(type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc(bufferApi_setTargetLevel:) func bufferApi_setTargetLevel(value: Foundation.TimeInterval)
}
@objc(_BMPFileSystemHelper) public protocol _FileSystemHelper {
  @objc func calculateTotalSizeOfFolder(at path: Foundation.URL) throws -> Foundation.NSNumber
}
@objc(_BMPCafDrmConfigConvertible) public protocol _CafDrmConfigConvertible {
  @objc func toCafDrmConfig(remoteControlConfig: BitmovinPlayer.RemoteControlConfig) -> BitmovinPlayer._CafDrmConfig?
}
extension BitmovinPlayer.WidevineConfig : BitmovinPlayer._CafDrmConfigConvertible {
  @objc final public func toCafDrmConfig(remoteControlConfig: BitmovinPlayer.RemoteControlConfig) -> BitmovinPlayer._CafDrmConfig?
}
extension BitmovinPlayer.ClearKeyConfig : BitmovinPlayer._CafDrmConfigConvertible {
  @objc final public func toCafDrmConfig(remoteControlConfig: BitmovinPlayer.RemoteControlConfig) -> BitmovinPlayer._CafDrmConfig?
}
extension BitmovinPlayer.PlayReadyConfig : BitmovinPlayer._CafDrmConfigConvertible {
  @objc final public func toCafDrmConfig(remoteControlConfig: BitmovinPlayer.RemoteControlConfig) -> BitmovinPlayer._CafDrmConfig?
}
@_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(_BMPInternalSharePlayStartedEvent) @objcMembers public class _InternalSharePlayStartedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPSeekPosition) public class SeekPosition : ObjectiveC.NSObject {
  @objc final public let source: BitmovinPlayer.Source
  @objc final public let time: Foundation.TimeInterval
  @objc public init(source: BitmovinPlayer.Source, time: Foundation.TimeInterval)
  @objc deinit
}
@objc(_BMPStallingService) public protocol _StallingService {
  @objc var isStalling: Swift.Bool { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(tvOS, unavailable)
@objc(BMPCastWaitingForDeviceEvent) @objcMembers open class CastWaitingForDeviceEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public var castPayload: BitmovinPlayer.CastPayload {
    @objc get
  }
  @objc public init(deviceName: Swift.String, currentTime: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(BMPDeficiencyData) public class DeficiencyData : ObjectiveC.NSObject {
  @objc final public let code: Swift.Int
  @objc final public let message: Swift.String
  @objc final public let underlyingError: Foundation.NSError?
  convenience public init(error: Swift.Error, code: Swift.Int? = nil)
  @objc public init(code: Swift.Int, message: Swift.String, underlyingError: Foundation.NSError? = nil)
  @objc deinit
}
extension BitmovinPlayer.DeficiencyData : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_hasMissingDesignatedInitializers @objc(BMPSourceMetadataChangedEvent) @objcMembers public class SourceMetadataChangedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let from: [Swift.String : Swift.AnyObject]?
  @objc final public let to: [Swift.String : Swift.AnyObject]?
  @objc convenience public init(oldMetadata: [Swift.String : Swift.AnyObject]?, newMetadata: [Swift.String : Swift.AnyObject]?)
  @objc deinit
}
@objc(_BMPPictureInPictureService) public protocol _PictureInPictureService {
  @objc var isPictureInPicture: Swift.Bool { get }
  @objc @available(iOS 14.0, *)
  @available(tvOS, unavailable)
  var showSkipControls: Swift.Bool { get set }
  @objc func enterPictureInPicture()
  @objc func exitPictureInPicture()
}
@objc(_BMPUserInterfaceEventEmitter) public protocol _UserInterfaceEventEmitter : BitmovinPlayer.UserInterfaceEventHandler {
  @objc(emitEvent:) func emit(event: BitmovinPlayer.PlayerEvent)
}
@objcMembers @objc(_BMPShutterController) final public class _ShutterController : ObjectiveC.NSObject {
  @objc weak final public var player: BitmovinPlayer.Player? {
    @objc get
    @objc set
  }
  @objc final public let shutterView: UIKit.UIView
  @objc public init(player: BitmovinPlayer.Player)
  @objc deinit
}
extension BitmovinPlayer._ShutterController : BitmovinPlayer._PlayerListenerInternal {
  @objc final public func onUnseen(_ unseenEvents: [BitmovinPlayer.Event], player: BitmovinPlayer.Player)
  @objc final public func onPlaying(_ event: BitmovinPlayer.PlayingEvent, player: BitmovinPlayer.Player)
  @objc final public func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent, player: BitmovinPlayer.Player)
}
@objcMembers @objc(BMPAudioTrack) public class AudioTrack : BitmovinPlayer.Track {
  @objc public var language: Swift.String? {
    get
  }
  @objc public init(label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool, language: Swift.String?)
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPBufferService) public protocol _BufferService : BitmovinPlayer._Service {
  @objc func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc func setTargetLevel(_ value: Foundation.TimeInterval)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPFullscreenEnterEvent) public class FullscreenEnterEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPSourceFactory) public class SourceFactory : ObjectiveC.NSObject {
  @objc(createFrom:) public static func create(from sourceConfig: BitmovinPlayer.SourceConfig) -> BitmovinPlayer.Source
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPLiveConfig) final public class LiveConfig : ObjectiveC.NSObject {
  @objc final public var minTimeshiftBufferDepth: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPCastStartEvent) @objcMembers open class CastStartEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPAdEvent) open class AdEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let ad: BitmovinPlayer.Ad
  @objc public init(ad: BitmovinPlayer.Ad)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalAdPlaybackDidRequestContentPauseEvent) @objcMembers public class _InternalAdPlaybackDidRequestContentPauseEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPUserInterfaceEventHandler) public protocol UserInterfaceEventHandler : ObjectiveC.NSObjectProtocol {
  @objc(addUserInterfaceListener:) func add(listener: BitmovinPlayer.UserInterfaceListener)
  @objc(removeUserInterfaceListener:) func remove(listener: BitmovinPlayer.UserInterfaceListener)
}
@_hasMissingDesignatedInitializers @objc(BMPSourceAddedEvent) @objcMembers public class SourceAddedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let source: BitmovinPlayer.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(_BMPSubtitleParser) public protocol _SubtitleParser {
  @objc func parseVttSubtitles(vttString: Swift.String) throws -> [BitmovinPlayer.Cue]
}
@objcMembers @objc(BMPScalingModeChangedEvent) public class ScalingModeChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer.ScalingMode
  @objc final public let to: BitmovinPlayer.ScalingMode
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(from: BitmovinPlayer.ScalingMode, to: BitmovinPlayer.ScalingMode)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPCueParsedEvent) open class CueParsedEvent : ObjectiveC.NSObject, BitmovinPlayer.CueEvent, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc public var startTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var endTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var text: Swift.String? {
    @objc get
  }
  @objc public var html: Swift.String? {
    @objc get
  }
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  @objc public var position: BitmovinPlayer.CuePosition? {
    @objc get
  }
  @objc public var region: Swift.String? {
    @objc get
  }
  @objc public var regionStyle: Swift.String? {
    @objc get
  }
  @objc public var vtt: BitmovinPlayer.VttProperties? {
    @objc get
  }
  @objc deinit
}
extension BitmovinPlayer.CueParsedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPAdQuartileEvent) @objcMembers open class AdQuartileEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let adQuartile: BitmovinPlayer.AdQuartile
  @objc public init(quartile: BitmovinPlayer.AdQuartile)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(BMPContentDownloadProgressChangedEvent) public protocol ContentDownloadProgressChangedEvent : BitmovinPlayer.OfflineEvent {
  @objc var progress: Swift.Double { get }
}
extension BitmovinPlayer.SourceConfig {
  @objc dynamic public var _bmp_uniqueIdentifier: Swift.String? {
    @objc get
  }
  @objc dynamic public var _bmp_sourceUrlForDownload: Foundation.URL? {
    @objc get
  }
  @objc dynamic public var _bmp_canBeDownloaded: Swift.Bool {
    @objc get
  }
  @objc dynamic public var _bmp_legacyUniqueIdentifier: Swift.String? {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultOfflineContentLicenseRenewedEvent) public class _DefaultOfflineContentLicenseRenewedEvent : ObjectiveC.NSObject, BitmovinPlayer.OfflineContentLicenseRenewedEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPEventSuppressor) public protocol _EventSuppressor {
  @objc func suppress(eventType: BitmovinPlayer.Event.Type)
  @objc func removeSuppression(eventType: BitmovinPlayer.Event.Type)
  @objc func isSuppressed(eventType: BitmovinPlayer.Event.Type) -> Swift.Bool
}
extension AVFoundation.AVMetadataItem : BitmovinPlayer.MetadataEntry {
  @objc dynamic public var metadataType: BitmovinPlayer.MetadataType {
    @objc get
  }
}
@objcMembers @objc(BMPTrack) public class Track : ObjectiveC.NSObject {
  @objc final public let url: Foundation.URL?
  @objc public var isDefaultTrack: Swift.Bool {
    get
  }
  @objc public var label: Swift.String {
    get
  }
  @objc final public let identifier: Swift.String
  @objc final public let type: BitmovinPlayer.TrackType
  @objc public init(url: Foundation.URL?, trackType: BitmovinPlayer.TrackType, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool)
  @objc public func _updateLabel(to label: Swift.String)
  @objc deinit
}
extension BitmovinPlayer.Track : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension BitmovinPlayer.Track : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objc(_BMPViewHierarchyHandler) public protocol _ViewHierarchyHandler {
  @objc var shutterView: UIKit.UIView? { get set }
  @objc var posterView: UIKit.UIView? { get set }
  @objc var playerView: UIKit.UIView? { get set }
  @objc var adContainerView: UIKit.UIView? { get set }
  @objc func handleSubViewOrdering()
}
@available(*, deprecated, message: "Use HttpRequestType.drmLicenseFairplay instead")
public let BMPHttpRequestTypeDrmLicenseFairplay: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.drmCertificateFairplay instead")
public let BMPHttpRequestTypeDrmCertificateFairplay: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.mediaThumbnails instead")
public let BMPHttpRequestTypeMediaThumbnails: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.mediaSubtitles instead")
public let BMPHttpRequestTypeMediaSubtitles: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.manifestHlsMaster instead")
public let BMPHttpRequestTypeManifestHlsMaster: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.manifestHlsVariant instead")
public let BMPHttpRequestTypeManifestHlsVariant: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.keyHlsAes instead")
public let BMPHttpRequestTypeKeyHlsAes: Swift.String
@available(*, deprecated, message: "Use HttpRequestType.unknown instead")
public let BMPHttpRequestTypeUnknown: Swift.String
@objc @_inheritsConvenienceInitializers public class PictureInPictureEnteredEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPOfflineContentManagerTweaksApiDelegate) public protocol _OfflineContentManagerTweaksApiDelegate {
  @objc func offlineContentManagerTweaksApi_migrateDownload(remoteAssetUrl: Foundation.URL, resourceIdentifierCallback: @escaping (_ identifier: Swift.String) -> Swift.String)
}
@available(tvOS, unavailable)
@objc(_BMPFairplayHandlerOfflineContentDelegate) public protocol _FairplayHandlerOfflineContentDelegate {
  @objc func fairplayHandler(_ sender: BitmovinPlayer._FairplayHandler, shouldPersistOfflineLicenseForAssetId assetId: Swift.String) -> Swift.Bool
  @objc func fairplayHandler(_ sender: BitmovinPlayer._FairplayHandler, isRenewingOfflineLicenseForAssetId assetId: Swift.String) -> Swift.Bool
  @objc func fairplayHandlerDidFinishPersistingOfflineLicenseInformation(_ sender: BitmovinPlayer._FairplayHandler)
  @objc func fairplayHandlerDidPersistOfflineLicense(_ sender: BitmovinPlayer._FairplayHandler)
  @objc func fairplayHandler(_ sender: BitmovinPlayer._FairplayHandler, failedToPersistOfflineLicenseWithError error: Swift.Error)
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultContentDownloadSuspendedEvent) public class _DefaultContentDownloadSuspendedEvent : ObjectiveC.NSObject, BitmovinPlayer.ContentDownloadSuspendedEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultPlayerUIControllerFactory) public class _DefaultPlayerUIControllerFactory : ObjectiveC.NSObject, BitmovinPlayer._PlayerUIControllerFactory {
  @objc public func create(player: BitmovinPlayer.Player, playerView: BitmovinPlayer.PlayerView, viewHierarchyHandler: BitmovinPlayer._ViewHierarchyHandler, uiEventEmitter: BitmovinPlayer._UserInterfaceEventEmitter, pictureInPictureConfig: BitmovinPlayer.PictureInPictureConfig, logger: BitmovinPlayer._Logger) -> BitmovinPlayer._PlayerUIController
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPDefaultUrlAssetValuesLoader) @objcMembers public class _DefaultUrlAssetValuesLoader : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc deinit
}
extension BitmovinPlayer._DefaultUrlAssetValuesLoader {
  @objc(loadValuesAsynchronouslyForAsset:onComplete:) dynamic public func loadValuesAsynchronously(for asset: AVFoundation.AVURLAsset, onComplete: ((AVFoundation.AVURLAsset, Swift.Bool, Swift.Bool) -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalMasterPlaylistLoadedEvent) @objcMembers final public class _InternalMasterPlaylistLoadedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: Foundation.Data
  @objc final public let url: Foundation.URL
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdSkippedEvent) open class AdSkippedEvent : BitmovinPlayer.AdEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public init(ad: BitmovinPlayer.Ad)
  @objc deinit
}
@objcMembers @objc(BMPTimeShiftEvent) public class TimeShiftEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let position: Foundation.TimeInterval
  @objc final public let target: Foundation.TimeInterval
  @objc final public let timeShift: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(position: Foundation.TimeInterval, target: Foundation.TimeInterval, timeShift: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalCanStartPlaybackImmediatelyEvent) @objcMembers public class _InternalCanStartPlaybackImmediatelyEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPStallStartedEvent) public class StallStartedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPPlayerListener) public protocol PlayerListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onReady(_ event: BitmovinPlayer.ReadyEvent, player: BitmovinPlayer.Player)
  @objc optional func onPlay(_ event: BitmovinPlayer.PlayEvent, player: BitmovinPlayer.Player)
  @objc optional func onPlaying(_ event: BitmovinPlayer.PlayingEvent, player: BitmovinPlayer.Player)
  @objc optional func onPaused(_ event: BitmovinPlayer.PausedEvent, player: BitmovinPlayer.Player)
  @objc optional func onTimeChanged(_ event: BitmovinPlayer.TimeChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onDurationChanged(_ event: BitmovinPlayer.DurationChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onSeek(_ event: BitmovinPlayer.SeekEvent, player: BitmovinPlayer.Player)
  @objc optional func onSeeked(_ event: BitmovinPlayer.SeekedEvent, player: BitmovinPlayer.Player)
  @objc optional func onTimeShift(_ event: BitmovinPlayer.TimeShiftEvent, player: BitmovinPlayer.Player)
  @objc optional func onTimeShifted(_ event: BitmovinPlayer.TimeShiftedEvent, player: BitmovinPlayer.Player)
  @objc optional func onDvrWindowExceeded(_ event: BitmovinPlayer.DvrWindowExceededEvent, player: BitmovinPlayer.Player)
  @objc optional func onStallStarted(_ event: BitmovinPlayer.StallStartedEvent, player: BitmovinPlayer.Player)
  @objc optional func onStallEnded(_ event: BitmovinPlayer.StallEndedEvent, player: BitmovinPlayer.Player)
  @objc optional func onVideoSizeChanged(_ event: BitmovinPlayer.VideoSizeChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onPlaybackFinished(_ event: BitmovinPlayer.PlaybackFinishedEvent, player: BitmovinPlayer.Player)
  @objc optional func onPlayerError(_ event: BitmovinPlayer.PlayerErrorEvent, player: BitmovinPlayer.Player)
  @objc optional func onSourceError(_ event: BitmovinPlayer.SourceErrorEvent, player: BitmovinPlayer.Player)
  @objc optional func onPlayerWarning(_ event: BitmovinPlayer.PlayerWarningEvent, player: BitmovinPlayer.Player)
  @objc optional func onSourceWarning(_ event: BitmovinPlayer.SourceWarningEvent, player: BitmovinPlayer.Player)
  @objc optional func onSourceLoad(_ event: BitmovinPlayer.SourceLoadEvent, player: BitmovinPlayer.Player)
  @objc optional func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent, player: BitmovinPlayer.Player)
  @objc optional func onSourceUnload(_ event: BitmovinPlayer.SourceUnloadEvent, player: BitmovinPlayer.Player)
  @objc optional func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent, player: BitmovinPlayer.Player)
  @objc optional func onDestroy(_ event: BitmovinPlayer.DestroyEvent, player: BitmovinPlayer.Player)
  @objc optional func onMetadata(_ event: BitmovinPlayer.MetadataEvent, player: BitmovinPlayer.Player)
  @objc optional func onMetadataParsed(_ event: BitmovinPlayer.MetadataParsedEvent, player: BitmovinPlayer.Player)
  @objc optional func onCastAvailable(_ event: BitmovinPlayer.CastAvailableEvent, player: BitmovinPlayer.Player)
  @objc optional func onCastPaused(_ event: BitmovinPlayer.CastPausedEvent, player: BitmovinPlayer.Player)
  @objc optional func onCastPlaybackFinished(_ event: BitmovinPlayer.CastPlaybackFinishedEvent, player: BitmovinPlayer.Player)
  @objc optional func onCastPlaying(_ event: BitmovinPlayer.CastPlayingEvent, player: BitmovinPlayer.Player)
  @objc optional func onCastStarted(_ event: BitmovinPlayer.CastStartedEvent, player: BitmovinPlayer.Player)
  @objc optional func onCastStart(_ event: BitmovinPlayer.CastStartEvent, player: BitmovinPlayer.Player)
  @objc optional func onCastStopped(_ event: BitmovinPlayer.CastStoppedEvent, player: BitmovinPlayer.Player)
  @objc optional func onCastTimeUpdated(_ event: BitmovinPlayer.CastTimeUpdatedEvent, player: BitmovinPlayer.Player)
  @available(tvOS, unavailable)
  @objc(onCastWaitingForDevice:player:) optional func onCastWaiting(forDevice event: BitmovinPlayer.CastWaitingForDeviceEvent, player: BitmovinPlayer.Player)
  @objc optional func onCueParsed(_ event: BitmovinPlayer.CueParsedEvent, player: BitmovinPlayer.Player)
  @objc optional func onCueEnter(_ event: BitmovinPlayer.CueEnterEvent, player: BitmovinPlayer.Player)
  @objc optional func onCueExit(_ event: BitmovinPlayer.CueExitEvent, player: BitmovinPlayer.Player)
  @objc optional func onSubtitleAdded(_ event: BitmovinPlayer.SubtitleAddedEvent, player: BitmovinPlayer.Player)
  @objc optional func onSubtitleRemoved(_ event: BitmovinPlayer.SubtitleRemovedEvent, player: BitmovinPlayer.Player)
  @objc optional func onSubtitleChanged(_ event: BitmovinPlayer.SubtitleChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onMuted(_ event: BitmovinPlayer.MutedEvent, player: BitmovinPlayer.Player)
  @objc optional func onUnmuted(_ event: BitmovinPlayer.UnmutedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAudioAdded(_ event: BitmovinPlayer.AudioAddedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAudioRemoved(_ event: BitmovinPlayer.AudioRemovedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAudioChanged(_ event: BitmovinPlayer.AudioChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdStarted(_ event: BitmovinPlayer.AdStartedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdFinished(_ event: BitmovinPlayer.AdFinishedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdQuartile(_ event: BitmovinPlayer.AdQuartileEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdBreakStarted(_ event: BitmovinPlayer.AdBreakStartedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdBreakFinished(_ event: BitmovinPlayer.AdBreakFinishedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdScheduled(_ event: BitmovinPlayer.AdScheduledEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdSkipped(_ event: BitmovinPlayer.AdSkippedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdClicked(_ event: BitmovinPlayer.AdClickedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdError(_ event: BitmovinPlayer.AdErrorEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdManifestLoad(_ event: BitmovinPlayer.AdManifestLoadEvent, player: BitmovinPlayer.Player)
  @objc optional func onAdManifestLoaded(_ event: BitmovinPlayer.AdManifestLoadedEvent, player: BitmovinPlayer.Player)
  @objc optional func onVideoDownloadQualityChanged(_ event: BitmovinPlayer.VideoDownloadQualityChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onVideoPlaybackQualityChanged(_ event: BitmovinPlayer.VideoPlaybackQualityChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onDownloadFinished(_ event: BitmovinPlayer.DownloadFinishedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAirPlayChanged(_ event: BitmovinPlayer.AirPlayChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onAirPlayAvailable(_ event: BitmovinPlayer.AirPlayAvailableEvent, player: BitmovinPlayer.Player)
  @objc optional func onSourceMetadataChanged(_ event: BitmovinPlayer.SourceMetadataChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onPlayerActive(_ event: BitmovinPlayer.PlayerActiveEvent, player: BitmovinPlayer.Player)
  @objc optional func onDrmDataParsed(_ event: BitmovinPlayer.DrmDataParsedEvent, player: BitmovinPlayer.Player)
  @objc optional func onPlayerInactive(_ event: BitmovinPlayer.PlayerInactiveEvent, player: BitmovinPlayer.Player)
  @objc optional func onPlaylistTransition(_ event: BitmovinPlayer.PlaylistTransitionEvent, player: BitmovinPlayer.Player)
  @objc optional func onPlaybackSpeedChanged(_ event: BitmovinPlayer.PlaybackSpeedChangedEvent, player: BitmovinPlayer.Player)
  @objc optional func onSourceAdded(_ event: BitmovinPlayer.SourceAddedEvent, player: BitmovinPlayer.Player)
  @objc optional func onSourceRemoved(_ event: BitmovinPlayer.SourceRemovedEvent, player: BitmovinPlayer.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional func onSharePlayStarted(_ event: BitmovinPlayer.SharePlayStartedEvent, player: BitmovinPlayer.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional func onSharePlayEnded(_ event: BitmovinPlayer.SharePlayEndedEvent, player: BitmovinPlayer.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional func onSharePlaySuspensionStarted(_ event: BitmovinPlayer.SharePlaySuspensionStartedEvent, player: BitmovinPlayer.Player)
  @available(iOS 15, tvOS 15, *)
  @objc optional func onSharePlaySuspensionEnded(_ event: BitmovinPlayer.SharePlaySuspensionEndedEvent, player: BitmovinPlayer.Player)
  @objc optional func onEvent(_ event: BitmovinPlayer.Event, player: BitmovinPlayer.Player)
  @objc optional func onOutputObscured(_ event: BitmovinPlayer.OutputObscuredEvent, player: BitmovinPlayer.Player)
  @objc optional func onOutputUnobscured(_ event: BitmovinPlayer.OutputUnobscuredEvent, player: BitmovinPlayer.Player)
}
@objcMembers @objc(BMPPlayerWarningEvent) public class PlayerWarningEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let code: BitmovinPlayer.PlayerWarning.Code
  @objc final public let message: Swift.String
  @objc final public let data: BitmovinPlayer.DeficiencyData?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(code: BitmovinPlayer.PlayerWarning.Code, message: Swift.String, data: BitmovinPlayer.DeficiencyData?)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPPosterImageController) final public class _PosterImageController : ObjectiveC.NSObject {
  @objc weak final public var player: BitmovinPlayer.Player? {
    @objc get
    @objc set
  }
  @objc final public var rootView: UIKit.UIView {
    @objc get
  }
  @objc convenience public init(player: BitmovinPlayer.Player, logger: BitmovinPlayer._Logger)
  @objc deinit
}
extension BitmovinPlayer._PosterImageController : BitmovinPlayer._PlayerListenerInternal {
  @objc final public func onUnseen(_ unseenEvents: [BitmovinPlayer.Event], player: BitmovinPlayer.Player)
  @objc final public func onInternalActiveSourceChanged(_ event: BitmovinPlayer._InternalActiveSourceChangedEvent, player: BitmovinPlayer.Player)
  @objc final public func onPlaying(_ event: BitmovinPlayer.PlayingEvent, player: BitmovinPlayer.Player)
}
@objcMembers @objc(_BMPDefaultContentUrlMigrationFinishedEvent) public class _DefaultContentUrlMigrationFinishedEvent : ObjectiveC.NSObject, BitmovinPlayer.ContentUrlMigrationFinishedEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let from: Foundation.URL
  @objc final public let to: Foundation.URL
  @objc public init(from: Foundation.URL, to: Foundation.URL)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPBitmovinLogger) public class _BitmovinLogger : ObjectiveC.NSObject, BitmovinPlayer._Logger {
  @objc public init(level: BitmovinPlayer._LogLevel)
  @objc override convenience dynamic public init()
  @objc public func log(_ message: Swift.String, level: BitmovinPlayer._LogLevel)
  @objc public func log(prefix: Swift.String, message: Swift.String, level: BitmovinPlayer._LogLevel)
  @objc deinit
}
@objc(_BMPCafSourceOptions) @objcMembers final public class _CafSourceOptions : ObjectiveC.NSObject, BitmovinPlayer._JsonEncodable {
  @objc public init(sendManifestRequestsWithCredentials: Swift.Bool, sendSegmentRequestsWithCredentials: Swift.Bool)
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc final public func _toJsonString() throws -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlaylistOptions) final public class PlaylistOptions : ObjectiveC.NSObject {
  @objc final public let preloadAllSources: Swift.Bool
  @objc final public let replayMode: BitmovinPlayer.ReplayMode
  @objc public init(preloadAllSources: Swift.Bool, replayMode: BitmovinPlayer.ReplayMode)
  @objc override convenience dynamic public init()
  @objc convenience public init(preloadAllSources: Swift.Bool)
  @objc convenience public init(replayMode: BitmovinPlayer.ReplayMode)
  @objc deinit
}
@objcMembers @objc(BMPSeekEvent) public class SeekEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer.SeekPosition
  @objc final public let to: BitmovinPlayer.SeekPosition
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc(initWithFrom:to:) public init(from: BitmovinPlayer.SeekPosition, to: BitmovinPlayer.SeekPosition)
  @objc deinit
}
@objcMembers @objc(_BMPInternalTimeShiftEvent) final public class _InternalTimeShiftEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let position: Foundation.TimeInterval
  @objc final public let target: Foundation.TimeInterval
  @objc final public let timeShift: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(position: Foundation.TimeInterval, target: Foundation.TimeInterval, timeShift: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInlinePlaylistDecryptionKeyStoreStrategy) public class _InlinePlaylistDecryptionKeyStoreStrategy : ObjectiveC.NSObject, BitmovinPlayer._PlaylistDecryptionKeyStoreStrategy {
  @objc public func uri(for keyUrl: Swift.String, decryptionKeyData keyData: Foundation.Data) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPCueEnterEvent) open class CueEnterEvent : BitmovinPlayer.PlayerEvent, BitmovinPlayer.CueEvent {
  @objc public var startTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var endTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var text: Swift.String? {
    @objc get
  }
  @objc public var html: Swift.String? {
    @objc get
  }
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  @objc public var position: BitmovinPlayer.CuePosition? {
    @objc get
  }
  @objc public var region: Swift.String? {
    @objc get
  }
  @objc public var regionStyle: Swift.String? {
    @objc get
  }
  @objc public var vtt: BitmovinPlayer.VttProperties? {
    @objc get
  }
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPPlaybackFinishedService) public protocol _PlaybackFinishedService {
  @objc var isPlaybackFinished: Swift.Bool { get }
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPSystemFreeSpaceReporter) final public class _SystemFreeSpaceReporter : ObjectiveC.NSObject {
  @objc public static func systemFreeSpaceAvailable() -> Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(_BMPDefaultEventEmitter) public class _DefaultEventEmitter : BitmovinPlayer._DefaultService, BitmovinPlayer._PlayerEventEmitter {
  @objc final public let eventSuppressor: BitmovinPlayer._EventSuppressor
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public func emit(event: BitmovinPlayer.PlayerEvent)
  @objc deinit
}
extension BitmovinPlayer._DefaultEventEmitter : BitmovinPlayer.PlayerEventHandler {
  @objc dynamic public func add(listener: BitmovinPlayer.PlayerListener)
  @objc dynamic public func remove(listener: BitmovinPlayer.PlayerListener)
}
extension BitmovinPlayer._DefaultEventEmitter : BitmovinPlayer._SourceEventEmitter {
  @objc dynamic public func emit(event: BitmovinPlayer.SourceEvent, isInternal: Swift.Bool = false)
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPPlayerPlaylistApi) public class _PlayerPlaylistApi : ObjectiveC.NSObject, BitmovinPlayer.PlaylistApi {
  @objc weak public var delegate: BitmovinPlayer._PlaylistApiDelegate?
  @objc public var sources: [BitmovinPlayer.Source] {
    @objc get
  }
  @objc public func seek(source: BitmovinPlayer.Source, time: Foundation.TimeInterval = 0)
  @objc public func add(source: BitmovinPlayer.Source, at index: Swift.Int)
  @objc public func add(source: BitmovinPlayer.Source)
  @objc public func remove(sourceAt index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPDefaultStopwatch) @objcMembers final public class _DefaultStopwatch : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc deinit
}
extension BitmovinPlayer._DefaultStopwatch : BitmovinPlayer._Stopwatch {
  @objc final public func start()
  @objc final public func stop() -> Foundation.TimeInterval
}
@objc(BMPContentDownloadCanceledEvent) public protocol ContentDownloadCanceledEvent : BitmovinPlayer.OfflineEvent {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPOfflineTrack) @objcMembers public class OfflineTrack : ObjectiveC.NSObject {
  @objc public class var _defaultAction: BitmovinPlayer.OfflineTrackAction {
    @objc get
  }
  @objc final public let _identifier: Swift.String
  @objc public var action: BitmovinPlayer.OfflineTrackAction
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPHttpResponse) @objcMembers final public class HttpResponse : ObjectiveC.NSObject {
  @objc final public let request: BitmovinPlayer.HttpRequest
  @objc final public let url: Foundation.URL
  @objc final public let status: Swift.Int
  @objc final public let headers: [Swift.String : Swift.String]
  @objc final public let body: Foundation.Data?
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlayerViewConfig) public class PlayerViewConfig : ObjectiveC.NSObject {
  @objc public var pictureInPictureConfig: BitmovinPlayer.PictureInPictureConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDefaultAudioService) @objcMembers final public class _DefaultAudioService : BitmovinPlayer._DefaultService {
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(currentSourceProvider: BitmovinPlayer._CurrentSourceProvider)
  @objc deinit
}
extension BitmovinPlayer._DefaultAudioService : BitmovinPlayer._AudioService {
  @objc final public var availableAudio: [BitmovinPlayer.AudioTrack] {
    @objc get
  }
  @objc final public var audio: BitmovinPlayer.AudioTrack? {
    @objc get
  }
  @objc final public func setAudioWithIdentifier(_ audioTrackID: Swift.String)
}
@_inheritsConvenienceInitializers @objc(BMPDownloadTweaksConfig) @objcMembers final public class DownloadTweaksConfig : ObjectiveC.NSObject {
  @objc final public var shouldInsertPlaylistTypeTagIfMissing: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(_BMPDefaultInitializationService) public class _DefaultInitializationService : BitmovinPlayer._DefaultService, BitmovinPlayer._InitializationService {
  @objc public init(player: BitmovinPlayer._BMPAVPlayer)
  @objc public func setup(playerConfig: BitmovinPlayer.PlayerConfig)
  @objc deinit
}
extension BitmovinPlayer._DefaultInitializationService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPFullscreenExitEvent) public class FullscreenExitEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPReadyEvent) public class ReadyEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPOfflineContentManagerEventEmitterFactory) public protocol _OfflineContentManagerEventEmitterFactory {
  @objc func create(offlineContentManager: BitmovinPlayer.OfflineContentManager) -> BitmovinPlayer._OfflineContentManagerEventEmitter
}
@_inheritsConvenienceInitializers @objc(BMPPlaybackFinishedEvent) @objcMembers public class PlaybackFinishedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdBreakStartedEvent) open class AdBreakStartedEvent : BitmovinPlayer.AdBreakEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public init(adBreak: BitmovinPlayer.AdBreak)
  @objc deinit
}
@objc(_BMPInternalSeekEvent) @objcMembers public class _InternalSeekEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer.SeekPosition
  @objc final public let to: BitmovinPlayer.SeekPosition
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(from: BitmovinPlayer.SeekPosition, to: BitmovinPlayer.SeekPosition)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPControlsShowEvent) @objcMembers open class ControlsShowEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultTimerFactory) final public class _DefaultTimerFactory : ObjectiveC.NSObject, BitmovinPlayer._TimerFactory {
  @objc final public func create(timeInterval: Foundation.TimeInterval, eventHandlerQueue: Dispatch.DispatchQueue) -> BitmovinPlayer._Timer
  @objc final public func create(timeInterval: Foundation.TimeInterval, timerQueue: Dispatch.DispatchQueue, eventHandlerQueue: Dispatch.DispatchQueue) -> BitmovinPlayer._Timer
  @objc final public func createAndStart(timeInterval: Foundation.TimeInterval, repeats: Swift.Bool, eventHandlerQueue: Dispatch.DispatchQueue, eventHandler: @escaping () -> Swift.Void) -> BitmovinPlayer._Timer
  @objc final public func createAndStart(timeInterval: Foundation.TimeInterval, repeats: Swift.Bool, timerQueue: Dispatch.DispatchQueue, eventHandlerQueue: Dispatch.DispatchQueue, eventHandler: @escaping () -> Swift.Void) -> BitmovinPlayer._Timer
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPCastStartedEvent) @objcMembers open class CastStartedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let deviceName: Swift.String
  @objc public init(deviceName: Swift.String)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlayEndedEvent) @objcMembers public class SharePlayEndedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalTimeChangedEvent) @objcMembers final public class _InternalTimeChangedEvent : BitmovinPlayer.TimeChangedEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override public init(currentTime: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BMPControlsHideEvent) @objcMembers open class ControlsHideEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultOfflineContentManagerEventEmitterFactory) public class _DefaultOfflineContentManagerEventEmitterFactory : ObjectiveC.NSObject, BitmovinPlayer._OfflineContentManagerEventEmitterFactory {
  @objc public func create(offlineContentManager: BitmovinPlayer.OfflineContentManager) -> BitmovinPlayer._OfflineContentManagerEventEmitter
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPOfflineTrackSelection) @objcMembers final public class OfflineTrackSelection : ObjectiveC.NSObject {
  @objc final public let textTracks: [BitmovinPlayer.OfflineTextTrack]
  @objc final public let audioTracks: [BitmovinPlayer.OfflineAudioTrack]
  @objc public static func _create(textTracks: [BitmovinPlayer.OfflineTextTrack], audioTracks: [BitmovinPlayer.OfflineAudioTrack]) -> BitmovinPlayer.OfflineTrackSelection
  @objc deinit
}
@objc(_BMPHashedIdentifier) @objcMembers final public class _HashedIdentifier : ObjectiveC.NSObject {
  @objc final public let md5: Swift.String
  @objc public init(string: Swift.String)
  @objc deinit
}
@objcMembers @objc(BMPThumbnailTrack) public class ThumbnailTrack : BitmovinPlayer.Track {
  @objc public init(url: Foundation.URL, label: Swift.String, identifier: Swift.String, isDefaultTrack: Swift.Bool)
  @objc deinit
}
@objc(BMPVideoPlaybackQualityChangedEvent) @objcMembers public class VideoPlaybackQualityChangedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let videoQualityOld: BitmovinPlayer.VideoQuality?
  @objc final public let videoQualityNew: BitmovinPlayer.VideoQuality
  @objc public init(videoQualityOld: BitmovinPlayer.VideoQuality?, videoQualityNew: BitmovinPlayer.VideoQuality)
  @objc deinit
}
@objc(_BMPPlaylistManipulator) public protocol _PlaylistManipulator {
  @objc func replace(decryptionKeyUrl keyUrl: Swift.String, with keyData: Foundation.Data, in playlist: Swift.String, decryptionKeyStoreStrategy keyStoreStrategy: BitmovinPlayer._PlaylistDecryptionKeyStoreStrategy) -> Swift.String
  @objc(replaceManifestUrl:withCustomUrl:in:) func replace(manifestUrl url: Swift.String, with customUrl: Swift.String, in playlist: Swift.String) -> Swift.String
}
@objc(_BMPRemotePlayerStateEvent) @objcMembers public class _RemotePlayerStateEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let remotePlayerState: BitmovinPlayer._RemotePlayerState
  @objc public init(remotePlayerState: BitmovinPlayer._RemotePlayerState)
  @objc deinit
}
@objcMembers @objc(BMPAudioRemovedEvent) public class AudioRemovedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let audioTrack: BitmovinPlayer.AudioTrack
  @objc final public let time: Foundation.TimeInterval
  @objc public init(audioTrack: BitmovinPlayer.AudioTrack, time: Foundation.TimeInterval)
  @objc deinit
}
extension BitmovinPlayer.AudioRemovedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlaybackConfig) public class PlaybackConfig : ObjectiveC.NSObject {
  @objc public var isAutoplayEnabled: Swift.Bool
  @objc public var isMuted: Swift.Bool
  @objc public var isTimeShiftEnabled: Swift.Bool
  @objc public var isBackgroundPlaybackEnabled: Swift.Bool
  @objc @available(*, deprecated, message: "Use `PlayerViewConfig.PictureInPictureConfig.isEnabled` instead")
  public var isPictureInPictureEnabled: Swift.Bool
  @objc public var isForcedSubtitleCallback: ((BitmovinPlayer.SubtitleTrack) -> Swift.Bool)?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalTimeShiftedEvent) final public class _InternalTimeShiftedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPWidevineConfig) final public class WidevineConfig : BitmovinPlayer.DrmConfig {
  @objc final public var licenseRequestHeaders: [Swift.String : Swift.String]
  @objc final public var licenseRequestRetryDelay: Swift.UInt
  @objc final public var maxLicenseRequestRetries: Swift.UInt
  @objc final public var mediaKeySystemConfig: Swift.String?
  @objc(initWithLicenseUrl:) public init(license licenseUrl: Foundation.URL?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPImaAdvertisingConfig) public class ImaAdvertisingConfig : ObjectiveC.NSObject {
  @objc @available(tvOS, unavailable)
  public var adAttributionUiMode: BitmovinPlayer.ImaAdAttributionUiMode
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdBreakFinishedEvent) open class AdBreakFinishedEvent : BitmovinPlayer.AdBreakEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override public init(adBreak: BitmovinPlayer.AdBreak)
  @objc deinit
}
@objc(BMPAdSourceType) public enum AdSourceType : Swift.Int {
  case none = 0
  case ima
  case unknown
  case progressive
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(_BMPDefaultDeficiencyService) final public class _DefaultDeficiencyService : BitmovinPlayer._DefaultService, BitmovinPlayer._DeficiencyService {
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(playerEventEmitter: BitmovinPlayer._PlayerEventEmitter, logger: BitmovinPlayer._Logger)
  @objc override final public func start()
  @objc override final public func stop()
  @objc final public func throwError(code: BitmovinPlayer.PlayerError.Code, data: BitmovinPlayer.DeficiencyData?)
  @objc final public func throwError(code: BitmovinPlayer.PlayerError.Code, message: Swift.String, data: BitmovinPlayer.DeficiencyData?)
  @objc final public func throwError(code: BitmovinPlayer.PlayerError.Code, replacements: [Swift.String]?, data: BitmovinPlayer.DeficiencyData?)
  @objc final public func throwWarning(code: BitmovinPlayer.PlayerWarning.Code, data: BitmovinPlayer.DeficiencyData?)
  @objc final public func throwWarning(code: BitmovinPlayer.PlayerWarning.Code, replacements: [Swift.String]?, data: BitmovinPlayer.DeficiencyData?)
  @objc deinit
}
@objc(_BMPErrorMetadata) @objcMembers final public class _ErrorMetadata : ObjectiveC.NSObject {
  @objc final public let error: Foundation.NSError
  @objc final public let requestMetadata: BitmovinPlayer._RequestMetadata?
  @objc public init(error: Foundation.NSError, requestMetadata: BitmovinPlayer._RequestMetadata? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlayerInactiveEvent) public class PlayerInactiveEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(_BMPInternalPlayingEvent) final public class _InternalPlayingEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPGoogleCastBufferService) public class _GoogleCastBufferService : BitmovinPlayer._DefaultService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayer._GoogleCastBufferService : BitmovinPlayer._BufferService {
  @objc dynamic public func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAdaptationConfig) public class AdaptationConfig : ObjectiveC.NSObject {
  @objc public var maxSelectableBitrate: Swift.UInt
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPictureInPictureConfig) public class PictureInPictureConfig : ObjectiveC.NSObject {
  public typealias RestoreUserInterfaceHandler = (_ completionHandler: @escaping (_ restored: Swift.Bool) -> Swift.Void) -> Swift.Void
  @objc public var isEnabled: Swift.Bool
  @objc @available(iOS 14.0, *)
  @available(tvOS, unavailable)
  public var showSkipControls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(iOS 14.2, *)
  @available(tvOS, unavailable)
  public var shouldEnterOnBackground: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var restoreUserInterfaceHandler: BitmovinPlayer.PictureInPictureConfig.RestoreUserInterfaceHandler?
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDefaultUserInterfaceEventEmitter) public class _DefaultUserInterfaceEventEmitter : ObjectiveC.NSObject {
  @objc public init(playerView: BitmovinPlayer.PlayerView)
  @objc deinit
}
extension BitmovinPlayer._DefaultUserInterfaceEventEmitter : BitmovinPlayer._UserInterfaceEventEmitter {
  @objc dynamic public func emit(event: BitmovinPlayer.PlayerEvent)
}
extension BitmovinPlayer._DefaultUserInterfaceEventEmitter : BitmovinPlayer.UserInterfaceEventHandler {
  @objc dynamic public func add(listener: BitmovinPlayer.UserInterfaceListener)
  @objc dynamic public func remove(listener: BitmovinPlayer.UserInterfaceListener)
}
@objc(_BMPPlayerEventEmitter) public protocol _PlayerEventEmitter : BitmovinPlayer.PlayerEventHandler, BitmovinPlayer._Service {
  @objc var eventSuppressor: BitmovinPlayer._EventSuppressor { get }
  @objc(emitPlayerEvent:) func emit(event: BitmovinPlayer.PlayerEvent)
}
@_inheritsConvenienceInitializers @objc(BMPDownloadConfig) @objcMembers final public class DownloadConfig : ObjectiveC.NSObject {
  @objc final public var minimumBitrate: Foundation.NSNumber?
  @objc final public var supportClearKeyContent: Swift.Bool
  @objc final public var tweaksConfig: BitmovinPlayer.DownloadTweaksConfig
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PlayerFactory {
  public static var sdkVersion: Swift.String {
    get
  }
  public static func create(playerConfig: BitmovinPlayer.PlayerConfig = PlayerConfig()) -> BitmovinPlayer.Player
  @objc deinit
}
@objc(BMPOfflineTrackAction) public enum OfflineTrackAction : Swift.Int {
  case none = 0
  case download
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPUIBackgroundPlaybackHandler) public protocol _UIBackgroundPlaybackHandler {
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultSubtitleParser) public class _DefaultSubtitleParser : ObjectiveC.NSObject, BitmovinPlayer._SubtitleParser {
  @objc override dynamic public init()
  @objc public func parseVttSubtitles(vttString: Swift.String) throws -> [BitmovinPlayer.Cue]
  @objc deinit
}
@available(tvOS 14.0, *)
@objc(_BMPDefaultPictureInPictureService) @objcMembers public class _DefaultPictureInPictureService : ObjectiveC.NSObject, BitmovinPlayer._PictureInPictureService {
  @objc public var isPictureInPicture: Swift.Bool {
    @objc get
  }
  @available(iOS 14.0, *)
  @available(tvOS, unavailable)
  @objc public var showSkipControls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public init(pictureInPictureController: AVKit.AVPictureInPictureController, pictureInPictureConfig: BitmovinPlayer.PictureInPictureConfig, uiEventEmitter: BitmovinPlayer._UserInterfaceEventEmitter)
  @objc public func enterPictureInPicture()
  @objc public func exitPictureInPicture()
  @objc deinit
}
@available(tvOS 14.0, *)
extension BitmovinPlayer._DefaultPictureInPictureService : AVKit.AVPictureInPictureControllerDelegate {
  @objc dynamic public func pictureInPictureControllerWillStartPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc dynamic public func pictureInPictureControllerDidStartPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc dynamic public func pictureInPictureControllerWillStopPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc dynamic public func pictureInPictureControllerDidStopPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc dynamic public func pictureInPictureController(_ pictureInPictureController: AVKit.AVPictureInPictureController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc(_BMPWebViewFactory) @objcMembers public class _WebViewFactory : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func create(userContentController: WebKit.WKUserContentController) -> WebKit.WKWebView
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPPlayerBufferApi) public class _PlayerBufferApi : ObjectiveC.NSObject {
  @objc weak public var delegate: BitmovinPlayer._BufferApiDelegate?
  @objc override dynamic public init()
  @objc deinit
}
extension BitmovinPlayer._PlayerBufferApi : BitmovinPlayer.BufferApi {
  @objc dynamic public func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
@objcMembers @objc(_BMPGoogleCastTimeService) public class _GoogleCastTimeService : BitmovinPlayer._DefaultService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator)
  @objc override dynamic public func start()
  @objc override dynamic public func stop()
  @objc deinit
}
extension BitmovinPlayer._GoogleCastTimeService : BitmovinPlayer._CastMessagesListener {
  @objc dynamic public func onRemotePlayerState(_ event: BitmovinPlayer._RemotePlayerStateEvent)
  @objc dynamic public func onCurrentTimeApproximation(_ currentTime: Foundation.TimeInterval)
}
extension BitmovinPlayer._GoogleCastTimeService : BitmovinPlayer._TimeService {
  @objc dynamic public var duration: Foundation.TimeInterval {
    @objc get
  }
  @objc dynamic public var maxTimeShift: Foundation.TimeInterval {
    @objc get
  }
  @objc dynamic public var timeShift: Foundation.TimeInterval {
    @objc get
  }
  @objc dynamic public var liveEdge: Foundation.TimeInterval {
    @objc get
  }
  @objc dynamic public func currentTime(_ timeMode: BitmovinPlayer.TimeMode) -> Foundation.TimeInterval
}
@objcMembers @objc(BMPPlaybackSpeedChangedEvent) public class PlaybackSpeedChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let from: Swift.Float
  @objc final public let to: Swift.Float
  @objc public init(from: Swift.Float, to: Swift.Float)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultPlaylistUrlTracker) public class _DefaultPlaylistUrlTracker : ObjectiveC.NSObject, BitmovinPlayer._PlaylistUrlTracker {
  @objc override dynamic public init()
  @objc public func register(url: Foundation.URL, type: BitmovinPlayer.HttpRequestType)
  @objc public func type(url: Foundation.URL) -> BitmovinPlayer.HttpRequestType
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPDefaultPictureInPictureSupportHelper) @objcMembers public class _DefaultPictureInPictureSupportHelper : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc deinit
}
extension BitmovinPlayer._DefaultPictureInPictureSupportHelper : BitmovinPlayer._PictureInPictureSupportHelper {
  @objc dynamic public var isPictureInPictureSupported: Swift.Bool {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers public class PictureInPictureEnterEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPVttLine) @objcMembers final public class VttLine : ObjectiveC.NSObject {
  @objc final public let type: BitmovinPlayer.VttLineValueType
  @objc final public let value: Swift.Double
  @objc public static func _create(type: BitmovinPlayer.VttLineValueType, value: Swift.Double) -> BitmovinPlayer.VttLine
  @objc deinit
}
extension BitmovinPlayer.VttLine : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(BMPMetadataEntry) public protocol MetadataEntry {
  @objc var metadataType: BitmovinPlayer.MetadataType { get }
}
@objc(BMPLoadingState) public enum LoadingState : Swift.Int {
  case unloaded
  case loading
  case loaded
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPAirPlayAvailableEvent) public class AirPlayAvailableEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPCafDrmConfig) @objcMembers final public class _CafDrmConfig : ObjectiveC.NSObject {
  public enum ProtectionSystem : Swift.String {
    case widevine
    case playReady
    case clearKey
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(protectionSystem: BitmovinPlayer._CafDrmConfig.ProtectionSystem, licenseUrl: Foundation.URL, headers: [Swift.String : Swift.String]?, withCredentials: Swift.Bool)
  @objc deinit
}
extension BitmovinPlayer._CafDrmConfig : BitmovinPlayer._JsonEncodable {
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc final public func _toJsonString() throws -> Swift.String
}
@objc(_BMPOfflineContentUrlMigrationHandler) public protocol _OfflineContentUrlMigrationHandler {
  @objc var delegate: BitmovinPlayer._OfflineContentUrlMigrationHandlerDelegate? { get set }
  @objc var isMigrationInProgress: Swift.Bool { get }
  @objc(migrateFromUrl:toUrl:activeDownloadTask:resourceIdentifierCallback:) func migrate(from originalRemoteAssetUrl: Foundation.URL, to targetRemoteAssetUrl: Foundation.URL, activeDownloadTask: BitmovinPlayer._DownloadTask?, resourceIdentifierCallback: @escaping (_ identifier: Swift.String) -> Swift.String)
  @objc(handleRestorationOfDownloadTask:) func handleRestoration(of downloadTask: BitmovinPlayer._DownloadTask)
  @objc func maybeFinishMigration()
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPUserInterfaceConfig) public class UserInterfaceConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPPlayingEvent) public class PlayingEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(BMPSourceErrorEvent) public class SourceErrorEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let code: BitmovinPlayer.SourceError.Code
  @objc final public let message: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: BitmovinPlayer.DeficiencyData?
  @objc public init(code: BitmovinPlayer.SourceError.Code, message: Swift.String, data: BitmovinPlayer.DeficiencyData?)
  @objc deinit
}
extension BitmovinPlayer.SourceErrorEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objc(BMPCastDeviceDiscoveryMode) public enum CastDeviceDiscoveryMode : Swift.Int {
  case castManagerInitialization
  case castButtonInteraction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPMediaInfoCustomData) @objcMembers final public class _MediaInfoCustomData : ObjectiveC.NSObject, BitmovinPlayer._JsonEncodable {
  @objc public init(drm: BitmovinPlayer._CafDrmConfig?, metadata: [Swift.String : Swift.String]?, options: BitmovinPlayer._CafSourceOptions)
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc final public func _toJsonString() throws -> Swift.String
  @objc deinit
}
extension Swift.String {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
extension Foundation.NSString {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(BMPPlayerConfig) @objcMembers final public class PlayerConfig : ObjectiveC.NSObject {
  @objc final public var key: Swift.String?
  @objc final public var styleConfig: BitmovinPlayer.StyleConfig
  @objc final public var playbackConfig: BitmovinPlayer.PlaybackConfig
  @objc final public var advertisingConfig: BitmovinPlayer.AdvertisingConfig
  @objc @available(tvOS, unavailable)
  final public var remoteControlConfig: BitmovinPlayer.RemoteControlConfig
  @objc final public var adaptationConfig: BitmovinPlayer.AdaptationConfig
  @objc final public var networkConfig: BitmovinPlayer.NetworkConfig
  @objc final public var tweaksConfig: BitmovinPlayer.TweaksConfig
  @objc final public var bufferConfig: BitmovinPlayer.BufferConfig
  @objc final public var liveConfig: BitmovinPlayer.LiveConfig
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPAudioChangedEvent) public class AudioChangedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let audioTrackOld: BitmovinPlayer.AudioTrack?
  @objc final public let audioTrackNew: BitmovinPlayer.AudioTrack
  @objc public init(newAudioTrack: BitmovinPlayer.AudioTrack, oldAudioTrack: BitmovinPlayer.AudioTrack?)
  @objc deinit
}
extension BitmovinPlayer.AudioChangedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objc(_BMPPlaylistSourcesProvider) public protocol _PlaylistSourcesProvider {
  @objc var sources: [BitmovinPlayer._LegacySourceInternal] { get }
  @objc func isLastSource(_ source: BitmovinPlayer._LegacySourceInternal) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPOutputObscuredEvent) public class OutputObscuredEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPMetadataMessage) @objcMembers final public class _MetadataMessage : ObjectiveC.NSObject, BitmovinPlayer._JsonEncodable {
  @objc public init(data: [Swift.AnyHashable : Any])
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc final public func _toJsonString() throws -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPDrmDataParsedEvent) @objcMembers public class DrmDataParsedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: BitmovinPlayer.DrmData
  @objc final public let name: Swift.String
  @objc public init(data: BitmovinPlayer.DrmData)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalPlaylistTransitionEvent) public class _InternalPlaylistTransitionEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer.Source?
  @objc final public let to: BitmovinPlayer.Source?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(BMPDrmData) @objcMembers final public class DrmData : ObjectiveC.NSObject {
  @objc(BMPDrmDataType) public enum DrmDataType : Swift.Int {
    case skdUri
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let data: Foundation.Data
  @objc final public let type: BitmovinPlayer.DrmData.DrmDataType
  @objc public init(data: Foundation.Data, type: BitmovinPlayer.DrmData.DrmDataType)
  @objc convenience public init?(skdUri: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPDrmRequest) @objcMembers final public class DrmRequest : BitmovinPlayer.HttpRequest {
  @objc final public let drmData: BitmovinPlayer.DrmData
  @objc deinit
}
@objc(BMPOfflineManagerDelegate) public protocol OfflineManagerDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func offlineManagerDidRestoreSuspendedDownloads(_ offlineManager: BitmovinPlayer.OfflineManager)
}
@objcMembers @objc(BMPPausedEvent) public class PausedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlaySuspensionEndedEvent) @objcMembers public class SharePlaySuspensionEndedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let suspension: BitmovinPlayer.SharePlaySuspension
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc extension Foundation.NSURLRequest {
  @objc dynamic public func _toBitmovinHttpRequest() -> BitmovinPlayer.HttpRequest?
  @objc dynamic public func _toBitmovinDrmRequest(skdUri: Swift.String) -> BitmovinPlayer.DrmRequest?
}
@objc(BMPDurationChangedEvent) @objcMembers public class DurationChangedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let duration: Foundation.TimeInterval
  @objc convenience public init(duration: Foundation.TimeInterval)
  @objc public init(duration: Foundation.TimeInterval, timestamp: Foundation.TimeInterval)
  @objc deinit
}
extension BitmovinPlayer.DurationChangedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objc(_BMPConfigService) public protocol _ConfigService {
  @objc var licenseKey: Swift.String? { get }
  @objc var sdkVersion: Swift.String { get }
  @objc var packageName: Swift.String? { get }
  @objc var playerConfig: BitmovinPlayer.PlayerConfig { get }
  @objc var suppressDefaultCaptionRendering: Swift.Bool { get }
}
@objc(_BMPPlaylistDecryptionKeyStoreStrategy) public protocol _PlaylistDecryptionKeyStoreStrategy : ObjectiveC.NSObjectProtocol {
  @objc func uri(for keyUrl: Swift.String, decryptionKeyData keyData: Foundation.Data) -> Swift.String?
}
@_hasMissingDesignatedInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlaySuspensionStartedEvent) @objcMembers public class SharePlaySuspensionStartedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let suspension: BitmovinPlayer.SharePlaySuspension
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objcMembers @objc(_BMPImaAdLogEvent) public class _ImaAdLogEvent : ObjectiveC.NSObject {
  @objc final public let errorCode: Swift.Int
  @objc final public let errorMessage: Swift.String
  @objc final public let type: Swift.String
  @objc public init(errorCode: Swift.Int, errorMessage: Swift.String, type: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPNoPlayerUIController) public class _NoPlayerUIController : ObjectiveC.NSObject {
  @objc weak public var player: BitmovinPlayer.Player?
  @objc public var scalingMode: BitmovinPlayer.ScalingMode {
    @objc get
    @objc set
  }
  @objc convenience public init(player: BitmovinPlayer.Player, playerView: BitmovinPlayer.PlayerView, uiEventEmitter: BitmovinPlayer._UserInterfaceEventEmitter, pictureInPictureConfig: BitmovinPlayer.PictureInPictureConfig, logger: BitmovinPlayer._Logger)
  @objc deinit
}
extension BitmovinPlayer._NoPlayerUIController : BitmovinPlayer._PlayerUIController {
  @objc dynamic public var areControlsShown: Swift.Bool {
    @objc get
  }
  @objc dynamic public var hasOwnPlayerLayer: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isPictureInPicture: Swift.Bool {
    @objc get
  }
  @objc dynamic public var rootView: UIKit.UIView? {
    @objc get
  }
  @available(iOS 14.0, *)
  @available(tvOS, unavailable)
  @objc dynamic public var showSkipControlsInPictureInPicture: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public func enterPictureInPicture()
  @objc dynamic public func exitPictureInPicture()
  @objc dynamic public func destroy()
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultHttpResponseFactory) public class _DefaultHttpResponseFactory : ObjectiveC.NSObject, BitmovinPlayer._HttpResponseFactory {
  @objc public func create(response: Foundation.HTTPURLResponse, request: BitmovinPlayer.HttpRequest, body: Foundation.Data?) -> BitmovinPlayer.HttpResponse
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPRequestMetadata) @objcMembers public class _RequestMetadata : ObjectiveC.NSObject {
  @objc public var downloadType: BitmovinPlayer.HttpRequestType
  @objc final public let url: Foundation.URL
  @objc public var redirectUrl: Foundation.URL?
  @objc public var downloadTime: Swift.Double
  @objc public var httpStatus: Swift.Int
  @objc public var size: Swift.Int
  @objc public var wasSuccessful: Swift.Bool
  @objc public var isLocalResource: Swift.Bool {
    @objc get
  }
  @objc public init(downloadType: BitmovinPlayer.HttpRequestType, url: Foundation.URL)
  @objc deinit
}
@objc(BMPOfflineContentManagerTweaksApi) public protocol OfflineContentManagerTweaksApi {
  @objc func migrateDownload(remoteAssetUrl: Foundation.URL, resourceIdentifierCallback: @escaping (_ identifier: Swift.String) -> Swift.String)
}
@objc(BMPImaAdsManager) public protocol ImaAdsManager {
  @objc var adCuePoints: [Foundation.TimeInterval] { get }
  @objc func discardAdBreak()
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPOutputUnobscuredEvent) public class OutputUnobscuredEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPOfflineTextTrack) @objcMembers final public class OfflineTextTrack : BitmovinPlayer.OfflineTrack {
  @objc override final public class var _defaultAction: BitmovinPlayer.OfflineTrackAction {
    @objc get
  }
  @objc final public let label: Swift.String
  @objc final public let language: Swift.String?
  @objc final public let isForced: Swift.Bool
  @objc final public let isDefault: Swift.Bool
  @objc public static func _create(identifier: Swift.String, language: Swift.String?, label: Swift.String, isForced: Swift.Bool, isDefault: Swift.Bool) -> BitmovinPlayer.OfflineTextTrack
  @objc deinit
}
@objc extension BitmovinPlayer.DownloadFinishedEvent {
  @objc convenience dynamic public init(requestMetadata: BitmovinPlayer._RequestMetadata)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPTimeShiftedEvent) public class TimeShiftedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPDownloadFinishedEvent) @objcMembers public class DownloadFinishedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let requestType: BitmovinPlayer.HttpRequestType
  @objc @available(*, deprecated, message: "Use requestType instead")
  public var downloadType: Swift.String {
    @objc get
  }
  @objc final public let url: Foundation.URL
  @objc final public let lastRedirectLocation: Foundation.URL?
  @objc final public let downloadTime: Foundation.TimeInterval
  @objc final public let httpStatus: Swift.UInt
  @objc final public let size: Swift.UInt
  @objc public var successful: Swift.Bool {
    @objc get
  }
  @objc final public let wasSuccessful: Swift.Bool
  @objc convenience public init(requestType: BitmovinPlayer.HttpRequestType, url: Foundation.URL, downloadTime: Foundation.TimeInterval, httpStatus: Swift.UInt, size: Swift.UInt, success: Swift.Bool, lastRedirectLocation: Foundation.URL?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultContentDownloadFinishedEvent) public class _DefaultContentDownloadFinishedEvent : ObjectiveC.NSObject, BitmovinPlayer.ContentDownloadFinishedEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPContentUrlMigrationFinishedEvent) public protocol ContentUrlMigrationFinishedEvent : BitmovinPlayer.OfflineEvent {
  @objc var from: Foundation.URL { get }
  @objc var to: Foundation.URL { get }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPVideoSizeChangedEvent) open class VideoSizeChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(_BMPInternalSharePlayEndedEvent) @objcMembers public class _InternalSharePlayEndedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPOfflineSourceConfig) public class OfflineSourceConfig : BitmovinPlayer.SourceConfig {
  @objc final public let isRestrictedToAssetCache: Swift.Bool
  @objc public static func _create(urlAsset: AVFoundation.AVURLAsset, sourceConfig: BitmovinPlayer.SourceConfig, restrictedToAssetCache: Swift.Bool, fairplayLicenseStorage: BitmovinPlayer._OfflineFairplayLicenseStorage?) -> BitmovinPlayer.OfflineSourceConfig
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPBackgroundPlaybackLifecycleHandler) @objcMembers public class _BackgroundPlaybackLifecycleHandler : ObjectiveC.NSObject {
  @objc weak public var delegate: BitmovinPlayer._BackgroundPlaybackLifecycleHandlerDelegate?
  @objc override convenience dynamic public init()
  @objc deinit
}
@objc(_BMPBackgroundPlaybackLifecycleHandlerDelegate) public protocol _BackgroundPlaybackLifecycleHandlerDelegate {
  @objc func enteringBackground()
  @objc func exitingBackground()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPInternalPlaybackInitiatedEvent) @objcMembers final public class _InternalPlaybackInitiatedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalCastReadyEvent) final public class _InternalCastReadyEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPBufferConfig) public class BufferConfig : ObjectiveC.NSObject {
  @objc public var audioAndVideo: BitmovinPlayer.BufferMediaTypeConfig
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(_BMPGoogleCastPlaylistService) final public class _GoogleCastPlaylistService : BitmovinPlayer._DefaultService {
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(castManager: BitmovinPlayer.BitmovinCastManager, playerEventEmitter: BitmovinPlayer._PlayerEventEmitter, playbackFinishedServide: BitmovinPlayer._PlaybackFinishedService, playlistQueueManipulator: BitmovinPlayer._CastPlaylistQueueManipulator, logger: BitmovinPlayer._Logger)
  @objc deinit
}
extension BitmovinPlayer._GoogleCastPlaylistService : BitmovinPlayer._PlaylistService {
  @objc final public func load(playlistConfig: BitmovinPlayer.PlaylistConfig)
  @objc final public func add(source: BitmovinPlayer.Source, at index: Swift.Int)
  @objc final public func add(source: BitmovinPlayer.Source)
  @objc final public func remove(sourceAt index: Swift.Int)
  @objc final public func unload()
}
extension BitmovinPlayer._GoogleCastPlaylistService {
  @objc override final public func start()
  @objc override final public func stop()
}
extension BitmovinPlayer._GoogleCastPlaylistService : BitmovinPlayer._CurrentSourceProvider {
  @objc final public var currentSource: BitmovinPlayer._LegacySourceInternal? {
    @objc get
  }
}
extension BitmovinPlayer._GoogleCastPlaylistService : BitmovinPlayer._PlaylistSourcesProvider {
  @objc final public var sources: [BitmovinPlayer._LegacySourceInternal] {
    @objc get
  }
  @objc final public func isLastSource(_ source: BitmovinPlayer._LegacySourceInternal) -> Swift.Bool
}
extension BitmovinPlayer._GoogleCastPlaylistService : BitmovinPlayer.PlayerListener {
  @objc final public func onCastStopped(_ event: BitmovinPlayer.CastStoppedEvent, player: BitmovinPlayer.Player)
}
extension BitmovinPlayer._GoogleCastPlaylistService : BitmovinPlayer.BitmovinCastManagerListener {
  @objc final public func queueDidUpdate(activeItemIndex: Swift.Int)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalCastPlaylistTransitionEvent) public class _InternalCastPlaylistTransitionEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer.Source?
  @objc final public let to: BitmovinPlayer.Source?
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(BMPReplayMode) public enum ReplayMode : Swift.Int {
  case lastSource
  case playlist
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPFairplayHandlerDelegate) public protocol _FairplayHandlerDelegate {
  @objc(fairplayHandler:didFinishLicenseRequestWithMetadata:) func fairplayHandler(_ sender: BitmovinPlayer._FairplayHandler, didFinishLicenseRequestWith metadata: BitmovinPlayer._RequestMetadata)
  @objc(fairplayHandler:didFinishCertificateRequestWithMetadata:) func fairplayHandler(_ sender: BitmovinPlayer._FairplayHandler, didFinishCertificateRequestWith metadata: BitmovinPlayer._RequestMetadata)
  @objc(fairplayHandler:didFinishWithErrorMetadata:) func fairplayHandler(_ sender: BitmovinPlayer._FairplayHandler, didFinishWith errorMetadata: BitmovinPlayer._ErrorMetadata)
}
@_hasMissingDesignatedInitializers @objc(_BMPInternalSourceAddedEvent) @objcMembers public class _InternalSourceAddedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let source: BitmovinPlayer.Source
  @objc final public let index: Swift.Int
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalCastActiveSourceChangedEvent) final public class _InternalCastActiveSourceChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer._LegacySourceInternal?
  @objc final public let to: BitmovinPlayer._LegacySourceInternal?
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPVttProperties) @objcMembers final public class VttProperties : ObjectiveC.NSObject {
  @objc final public let vertical: BitmovinPlayer.VttVertical
  @objc final public let line: BitmovinPlayer.VttLine
  @objc final public let lineAlign: BitmovinPlayer.VttLineAlign
  @objc final public let snapToLines: Swift.Bool
  @objc final public let size: Swift.Double
  @objc final public let align: BitmovinPlayer.VttAlign
  @objc final public let position: BitmovinPlayer.VttPosition
  @objc final public let positionAlign: BitmovinPlayer.VttPositionAlign
  @objc public static func _create(vertical: BitmovinPlayer.VttVertical, line: BitmovinPlayer.VttLine, lineAlign: BitmovinPlayer.VttLineAlign, snapToLines: Swift.Bool, size: Swift.Double, align: BitmovinPlayer.VttAlign, position: BitmovinPlayer.VttPosition, positionAlign: BitmovinPlayer.VttPositionAlign) -> BitmovinPlayer.VttProperties
  @objc deinit
}
extension BitmovinPlayer.VttProperties : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension BitmovinPlayer.VttProperties : BitmovinPlayer._JsonEncodable {
  @objc final public func _toJsonString() throws -> Swift.String
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalCastStopEvent) final public class _InternalCastStopEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultMediaSelectionHelper) @objcMembers final public class _DefaultMediaSelectionHelper : ObjectiveC.NSObject, BitmovinPlayer._MediaSelectionHelper {
  @objc final public func optionsToDownload(from options: [AVFoundation.AVMediaSelectionOption], using trackSelection: BitmovinPlayer.OfflineTrackSelection?) -> [AVFoundation.AVMediaSelectionOption]
  @objc final public func mediaSelectionsToDownload(for asset: AVFoundation.AVURLAsset, using trackSelection: BitmovinPlayer.OfflineTrackSelection?) -> [AVFoundation.AVMediaSelection]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPCastTimeUpdatedEvent) @objcMembers open class CastTimeUpdatedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc final public let currentTime: Foundation.TimeInterval
  @objc final public let duration: Foundation.TimeInterval
  @objc public init(currentTime: Foundation.TimeInterval, duration: Foundation.TimeInterval)
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(BMPUserInterfaceApi) public protocol UserInterfaceApi : ObjectiveC.NSObjectProtocol {
  @objc var isFullscreen: Swift.Bool { get }
  @objc var areControlsShown: Swift.Bool { get }
  @objc var isPictureInPictureAvailable: Swift.Bool { get }
  @objc var isPictureInPicture: Swift.Bool { get }
  @objc var scalingMode: BitmovinPlayer.ScalingMode { get set }
  @objc func enterPictureInPicture()
  @objc func exitPictureInPicture()
  @objc func enterFullscreen()
  @objc func exitFullscreen()
  @objc(setPosterImage:keepPersistent:) func setPosterImage(url: Foundation.URL, keepPersistent: Swift.Bool)
  @objc func setSubtitleStyles(_ subtitleStyles: [AVFoundation.AVTextStyleRule]?)
}
@objc(_BMPMediaSelectionHelper) public protocol _MediaSelectionHelper {
  @objc func optionsToDownload(from options: [AVFoundation.AVMediaSelectionOption], using trackSelection: BitmovinPlayer.OfflineTrackSelection?) -> [AVFoundation.AVMediaSelectionOption]
  @objc(mediaSelectionsToDownloadForAsset:usingTrackSelection:) func mediaSelectionsToDownload(for asset: AVFoundation.AVURLAsset, using trackSelection: BitmovinPlayer.OfflineTrackSelection?) -> [AVFoundation.AVMediaSelection]
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPDefaultFileSystemHelper) @objcMembers public class _DefaultFileSystemHelper : ObjectiveC.NSObject, BitmovinPlayer._FileSystemHelper {
  @objc override convenience dynamic public init()
  @objc public func calculateTotalSizeOfFolder(at path: Foundation.URL) throws -> Foundation.NSNumber
  @objc deinit
}
@objc(BMPEvent) public protocol Event : ObjectiveC.NSObjectProtocol {
  @objc var name: Swift.String { get }
  @objc var timestamp: Foundation.TimeInterval { get }
}
@objc(BMPOfflineContentLicenseExpiredEvent) public protocol OfflineContentLicenseExpiredEvent : BitmovinPlayer.OfflineEvent {
}
@objc(_BMPFairplayHandler) public protocol _FairplayHandler {
  @objc weak var fairplayHandlerDelegate: BitmovinPlayer._FairplayHandlerDelegate? { get set }
  @objc @available(tvOS, unavailable)
  weak var offlineContentDelegate: BitmovinPlayer._FairplayHandlerOfflineContentDelegate? { get set }
  @objc(addRecipient:) func add(recipient: AVFoundation.AVContentKeyRecipient)
  @objc @available(tvOS, unavailable)
  func syncLicense(forSkdUri skdUri: Swift.String)
  @objc @available(tvOS, unavailable)
  func renewLicense(forSkdUri skdUri: Swift.String)
}
@objc(_BMPHttpResponseFactory) public protocol _HttpResponseFactory {
  @objc func create(response: Foundation.HTTPURLResponse, request: BitmovinPlayer.HttpRequest, body: Foundation.Data?) -> BitmovinPlayer.HttpResponse
}
@objc(BMPSubtitleFormat) public enum SubtitleFormat : Swift.Int {
  case webVtt
  case ttml
  case cea
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPOfflineFairplayLicenseStorage) public protocol _OfflineFairplayLicenseStorage {
  @objc func license(forAssetId assetId: Swift.String) -> Foundation.Data?
  @objc func persist(license licenseData: Foundation.Data, forAssetId assetId: Swift.String, isRenewing: Swift.Bool) throws
  @objc func licenseInformation(forAssetId assetId: Swift.String) -> BitmovinPlayer.DrmLicenseInformation?
  @objc @discardableResult
  func persist(licenseInformation: BitmovinPlayer.DrmLicenseInformation, forAssetId assetId: Swift.String) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc(_BMPDefaultOfflineFairplayLicenseStorage) @objcMembers public class _DefaultOfflineFairplayLicenseStorage : ObjectiveC.NSObject {
  @objc convenience public init(sourceConfigArchiveHelper: BitmovinPlayer._ArchiveHelper, logger: BitmovinPlayer._Logger)
  @objc deinit
}
extension BitmovinPlayer._DefaultOfflineFairplayLicenseStorage : BitmovinPlayer._OfflineFairplayLicenseStorage {
  @objc dynamic public func license(forAssetId assetId: Swift.String) -> Foundation.Data?
  @objc dynamic public func persist(license licenseData: Foundation.Data, forAssetId assetId: Swift.String, isRenewing: Swift.Bool) throws
  @objc dynamic public func licenseInformation(forAssetId assetId: Swift.String) -> BitmovinPlayer.DrmLicenseInformation?
  @objc dynamic public func persist(licenseInformation: BitmovinPlayer.DrmLicenseInformation, forAssetId assetId: Swift.String) -> Swift.Bool
}
@objc(_BMPOfflineFairplayPlaylistHelper) public protocol _OfflineFairplayPlaylistHelper {
  @objc(extractSessionKeyUrisAtLocation:) func extractSessionKeyUris(at contentLocation: Foundation.URL) -> Swift.Set<Swift.String>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPDefaultOfflineFairplayPlaylistHelper) final public class _DefaultOfflineFairplayPlaylistHelper : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc deinit
}
extension BitmovinPlayer._DefaultOfflineFairplayPlaylistHelper : BitmovinPlayer._OfflineFairplayPlaylistHelper {
  @objc final public func extractSessionKeyUris(at contentLocation: Foundation.URL) -> Swift.Set<Swift.String>
}
@objc(_BMPOfflineContentUrlMigrationHandlerDelegate) public protocol _OfflineContentUrlMigrationHandlerDelegate {
  @objc func offlineContentUrlMigrationHandlerWillPerformContentMigration(_ handler: BitmovinPlayer._OfflineContentUrlMigrationHandler)
  @objc(offlineContentUrlMigrationHandler:shouldCancelDownloadTask:) func offlineContentUrlMigrationHandler(_ handler: BitmovinPlayer._OfflineContentUrlMigrationHandler, shouldCancel downloadTask: BitmovinPlayer._DownloadTask) -> Swift.Bool
  @objc(offlineContentUrlMigrationHandler:didCompleteMigrationFromUrl:toUrl:) func offlineContentUrlMigrationHandler(_ handler: BitmovinPlayer._OfflineContentUrlMigrationHandler, didCompleteMigrationFrom originalAssetUrl: Foundation.URL, to targetAssetUrl: Foundation.URL)
  @objc(offlineContentUrlMigrationHandler:didFailMigrationWithError:) func offlineContentUrlMigrationHandler(_ handler: BitmovinPlayer._OfflineContentUrlMigrationHandler, didFailMigrationWith error: Swift.Error)
}
@objc(_BMPStopwatch) public protocol _Stopwatch {
  @objc func start()
  @objc func stop() -> Foundation.TimeInterval
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPBitmovinUserInterfaceConfig) public class BitmovinUserInterfaceConfig : BitmovinPlayer.UserInterfaceConfig {
  @objc public var customMessageHandler: BitmovinPlayer.CustomMessageHandler?
  @objc public var hideFirstFrame: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPEnumHelper) @objcMembers public class _EnumHelper : ObjectiveC.NSObject {
  @objc public static func adSourceTypeToString(_ type: BitmovinPlayer.AdSourceType) -> Swift.String
  @objc public static func sourceTypeToString(_ sourceType: BitmovinPlayer.SourceType) -> Swift.String
  @objc public static func timelineReferencePointToString(_ timelineReference: BitmovinPlayer.TimelineReferencePoint) -> Swift.String
  @objc public static func adQuartileToPercentage(_ quartile: BitmovinPlayer.AdQuartile) -> Swift.Double
  @objc public static func adTagTypeToString(_ type: BitmovinPlayer.AdTagType) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@available(tvOS, unavailable)
@objc(BMPCastPayload) @objcMembers final public class CastPayload : ObjectiveC.NSObject {
  @objc final public let currentTime: Foundation.TimeInterval
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let deviceName: Swift.String
  @objc final public let type: Swift.String
  @objc public init(deviceName: Swift.String, currentTime: Foundation.TimeInterval, timestamp: Foundation.TimeInterval)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultFairplayHandlerFactory) public class _DefaultFairplayHandlerFactory : ObjectiveC.NSObject, BitmovinPlayer._FairplayHandlerFactory {
  @objc public func create(fairplayConfig: BitmovinPlayer.FairplayConfig, networkConfig: BitmovinPlayer.NetworkConfig?, offlineLicenseStorage: BitmovinPlayer._OfflineFairplayLicenseStorage?, logger: BitmovinPlayer._Logger) -> BitmovinPlayer._FairplayHandler
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalStallEndedEvent) public class _InternalStallEndedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPFairplayHandlerFactory) public protocol _FairplayHandlerFactory {
  @objc func create(fairplayConfig: BitmovinPlayer.FairplayConfig, networkConfig: BitmovinPlayer.NetworkConfig?, offlineLicenseStorage: BitmovinPlayer._OfflineFairplayLicenseStorage?, logger: BitmovinPlayer._Logger) -> BitmovinPlayer._FairplayHandler
}
@objc(_BMPPictureInPictureSupportHelper) public protocol _PictureInPictureSupportHelper {
  @objc var isPictureInPictureSupported: Swift.Bool { get }
}
@_inheritsConvenienceInitializers @objc(BMPDvrWindowExceededEvent) @objcMembers open class DvrWindowExceededEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPSubtitleRemovedEvent) @objcMembers open class SubtitleRemovedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let subtitleTrack: BitmovinPlayer.SubtitleTrack
  @objc public init(subtitleTrack: BitmovinPlayer.SubtitleTrack)
  @objc deinit
}
extension BitmovinPlayer.SubtitleRemovedEvent : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@objc(BMPAvailableTracksFetchedEvent) public protocol AvailableTracksFetchedEvent : BitmovinPlayer.OfflineEvent {
  @objc var tracks: BitmovinPlayer.OfflineTrackSelection { get }
}
@_inheritsConvenienceInitializers @objc(BMPCastAvailableEvent) @objcMembers open class CastAvailableEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPAdSource) @objcMembers public class AdSource : ObjectiveC.NSObject {
  @objc final public let type: BitmovinPlayer.AdSourceType
  @objc final public let tag: Foundation.URL
  @objc public init(tag: Foundation.URL, ofType type: BitmovinPlayer.AdSourceType)
  @objc deinit
}
extension BitmovinPlayer.AdSource : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objcMembers @objc(BMPFairplayConfig) public class FairplayConfig : BitmovinPlayer.DrmConfig {
  @objc public var certificateUrl: Foundation.URL?
  @objc public var licenseRequestHeaders: [Swift.String : Swift.String]?
  @objc public var certificateRequestHeaders: [Swift.String : Swift.String]?
  @objc public var prepareMessage: ((_ spcData: Foundation.Data, _ assetID: Swift.String) -> Foundation.Data)?
  @objc public var prepareContentId: ((_ contentId: Swift.String) -> Swift.String)?
  @objc public var prepareCertificate: ((_ certificate: Foundation.Data) -> Foundation.Data)?
  @objc public var prepareLicense: ((_ ckc: Foundation.Data) -> Foundation.Data)?
  @objc public var prepareLicenseServerUrl: ((_ licenseServerUrl: Swift.String) -> Swift.String)?
  @objc public var prepareOfflineDrmLicenseInformation: ((_ data: Foundation.Data) -> BitmovinPlayer.DrmLicenseInformation)?
  @objc public var prepareSyncMessage: ((_ syncSpcData: Foundation.Data, _ assetID: Swift.String) -> Foundation.Data)?
  @objc @available(tvOS, unavailable)
  public var provideLicenseData: ((_ assetId: Swift.String) -> Foundation.Data?)?
  @objc @available(tvOS, unavailable)
  public var persistLicenseData: ((_ assetId: Swift.String, _ licenseData: Foundation.Data) -> Swift.Void)?
  @objc(initWithLicenseUrl:certificateURL:) public init(license licenseUrl: Foundation.URL?, certificateURL: Foundation.URL)
  @objc convenience public init(certificateURL certificateUrl: Foundation.URL)
  @objc @available(tvOS, unavailable)
  public init(provideLicenseDataCallback: @escaping (_ assetId: Swift.String) -> Foundation.Data?)
  @objc deinit
}
@objcMembers @objc(BMPClearKeyConfig) final public class ClearKeyConfig : BitmovinPlayer.DrmConfig {
  @objc final public var decryptionKeys: [BitmovinPlayer.DecryptionKey]
  @objc public init(decryptionKeys: [BitmovinPlayer.DecryptionKey])
  @objc deinit
}
@objcMembers @objc(BMPDecryptionKey) final public class DecryptionKey : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public var kid: Swift.String?
  @objc final public var key: Swift.String
  @objc public init(kid: Swift.String?, key: Swift.String)
  @objc final public func copy(with zone: ObjectiveC.NSZone?) -> Any
  @objc deinit
}
extension BitmovinPlayer.DecryptionKey : BitmovinPlayer._JsonEncodable {
  @objc final public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc final public func _toJsonString() throws -> Swift.String
}
@_inheritsConvenienceInitializers @objc(BMPAdvertisingConfig) @objcMembers public class AdvertisingConfig : ObjectiveC.NSObject {
  @objc public var schedule: [BitmovinPlayer.AdItem]
  @objc public var onAdsManagerAvailable: ((BitmovinPlayer.ImaAdsManager) -> Swift.Void)?
  @objc public var beforeInitialization: ((BitmovinPlayer.ImaSettings) -> Swift.Void)?
  @objc public var ima: BitmovinPlayer.ImaAdvertisingConfig
  @objc override convenience dynamic public init()
  @objc public init(schedule: [BitmovinPlayer.AdItem])
  @objc deinit
}
extension BitmovinPlayer._BMPAVPlayerItem {
  @objc dynamic public var timebaseEffectiveRate: Swift.Float {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPDrmSystems) final public class DrmSystems : ObjectiveC.NSObject {
  @objc public static let fairplayUUID: Foundation.UUID
  @objc public static let widevineUUID: Foundation.UUID
  @objc public static let playReadyUUID: Foundation.UUID
  @objc public static let clearKeyUUID: Foundation.UUID
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalPlaybackIntentionEvent) @objcMembers public class _InternalPlaybackIntentionEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(_BMPOfflineThumbnailHelper) public class _OfflineThumbnailHelper : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc public func prepareThumbnailsForOfflineUsage(_ thumbnails: [BitmovinPlayer.Thumbnail]) -> [BitmovinPlayer.Thumbnail]
  @objc public func swapUrls(_ urls: [Swift.String : Foundation.URL], for thumbnails: [BitmovinPlayer.Thumbnail]) -> [BitmovinPlayer.Thumbnail]
  @objc public func distinctImageUrlsAndTheirLocalEquivalent(for thumbnails: [BitmovinPlayer.Thumbnail], offlineDirectory: Foundation.URL) -> [Swift.String : Foundation.URL]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalPlayerLoadEvent) @objcMembers final public class _InternalPlayerLoadEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalPlayerUnloadEvent) @objcMembers final public class _InternalPlayerUnloadEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalPlayerFactory) public class _InternalPlayerFactory : ObjectiveC.NSObject {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  @objc override convenience dynamic public init()
  @objc public func create(integrationLanguage: BitmovinPlayer._IntegrationLanguage, config: BitmovinPlayer.PlayerConfig) -> BitmovinPlayer.Player
  @objc public func create(integrationLanguage: BitmovinPlayer._IntegrationLanguage) -> BitmovinPlayer.Player
  @objc deinit
}
@objcMembers @objc(_BMPPersistentArchive) public class _PersistentArchive : ObjectiveC.NSObject {
  @objc final public let archiveUrl: Foundation.URL
  @objc public init(url: Foundation.URL)
  @objc deinit
}
extension BitmovinPlayer._PersistentArchive {
  @objc @discardableResult
  dynamic public func storeStringValue(_ value: Swift.String, forKey key: Swift.String) -> Swift.Bool
  @objc @discardableResult
  dynamic public func storeBoolValue(_ value: Swift.Bool, forKey key: Swift.String) -> Swift.Bool
  @objc @discardableResult
  dynamic public func storeDoubleValue(_ value: Swift.Double, forKey key: Swift.String) -> Swift.Bool
  @objc @discardableResult
  dynamic public func storeDateValue(_ value: Foundation.Date, forKey key: Swift.String) -> Swift.Bool
  @objc @discardableResult
  dynamic public func storeNumberValue(_ value: Foundation.NSNumber, forKey key: Swift.String) -> Swift.Bool
  @objc dynamic public func stringValue(forKey key: Swift.String) -> Swift.String?
  @objc dynamic public func valueExists(forKey key: Swift.String) -> Swift.Bool
  @objc dynamic public func numberValueForKey(_ key: Swift.String) -> Foundation.NSNumber?
  @objc dynamic public func doubleValue(forKey key: Swift.String) -> Swift.Double
  @objc dynamic public func dateValue(forKey key: Swift.String) -> Foundation.Date?
  @objc dynamic public func boolValue(forKey key: Swift.String) -> Swift.Bool
  @objc @discardableResult
  dynamic public func removeValue(forKey key: Swift.String) -> Swift.Bool
  @objc dynamic public func clear()
  @objc dynamic public func overwrite(from archive: BitmovinPlayer._PersistentArchive)
}
@objcMembers @objc(BMPQuality) public class Quality : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let label: Swift.String
  @objc final public let bitrate: Swift.UInt
  @objc final public let codec: Swift.String?
  @objc public init(identifier: Swift.String, label: Swift.String, bitrate: Swift.UInt, codec: Swift.String?)
  @objc deinit
}
extension BitmovinPlayer.Quality : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
  @objc dynamic public func _toJsonString() throws -> Swift.String
}
@objcMembers @objc(BMPVideoQuality) public class VideoQuality : BitmovinPlayer.Quality {
  @objc final public let width: Swift.UInt
  @objc final public let height: Swift.UInt
  @objc public init(identifier: Swift.String, label: Swift.String, bitrate: Swift.UInt, codec: Swift.String?, width: Swift.UInt, height: Swift.UInt)
  @objc deinit
}
extension BitmovinPlayer.VideoQuality {
  @objc override dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@objcMembers @objc(BMPCuePosition) public class CuePosition : ObjectiveC.NSObject {
  @objc final public let column: Swift.Int
  @objc final public let row: Swift.Int
  @objc public init(column: Swift.Int, row: Swift.Int)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension BitmovinPlayer.CuePosition : BitmovinPlayer._JsonEncodable {
  @objc dynamic public func _toJsonString() throws -> Swift.String
  @objc dynamic public func _toJsonData() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @available(iOS 15.0, tvOS 15.0, *)
@objc(BMPSharePlayStartedEvent) @objcMembers public class SharePlayStartedEvent : BitmovinPlayer.PlayerEvent {
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPBitmovinPlayerUIController) public class _BitmovinPlayerUIController : ObjectiveC.NSObject {
  @objc weak public var player: BitmovinPlayer.Player? {
    @objc get
    @objc set
  }
  @objc public var areControlsShown: Swift.Bool
  @objc convenience public init(player: BitmovinPlayer.Player, playerView: BitmovinPlayer.PlayerView, viewHierarchyHandler: BitmovinPlayer._ViewHierarchyHandler, uiEventEmitter: BitmovinPlayer._UserInterfaceEventEmitter, userInterfaceConfig: BitmovinPlayer.BitmovinUserInterfaceConfig?, pictureInPictureConfig: BitmovinPlayer.PictureInPictureConfig, logger: BitmovinPlayer._Logger)
  @objc deinit
}
extension BitmovinPlayer._BitmovinPlayerUIController {
  @objc dynamic public func uiReady()
  @objc dynamic public func controlsWillShow()
  @objc dynamic public func controlsWillHide()
}
extension BitmovinPlayer._BitmovinPlayerUIController : WebKit.WKUIDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
}
extension BitmovinPlayer._BitmovinPlayerUIController : BitmovinPlayer._PlayerUIController {
  @objc dynamic public var scalingMode: BitmovinPlayer.ScalingMode {
    @objc get
    @objc set
  }
  @objc dynamic public var hasOwnPlayerLayer: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isPictureInPicture: Swift.Bool {
    @objc get
  }
  @objc dynamic public var rootView: UIKit.UIView? {
    @objc get
  }
  @available(iOS 14.0, *)
  @objc dynamic public var showSkipControlsInPictureInPicture: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public func enterPictureInPicture()
  @objc dynamic public func exitPictureInPicture()
  @objc dynamic public func destroy()
  @objc dynamic public func willRotate()
  @objc dynamic public func didRotate()
}
@objc(_BMPPlayerUIController) public protocol _PlayerUIController : ObjectiveC.NSObjectProtocol {
  @objc weak var player: BitmovinPlayer.Player? { get set }
  @objc var areControlsShown: Swift.Bool { get }
  @objc var hasOwnPlayerLayer: Swift.Bool { get }
  @objc var isPictureInPicture: Swift.Bool { get }
  @objc var scalingMode: BitmovinPlayer.ScalingMode { get set }
  @objc var rootView: UIKit.UIView? { get }
  @objc @available(iOS 14.0, *)
  @available(tvOS, unavailable)
  var showSkipControlsInPictureInPicture: Swift.Bool { get set }
  @objc func enterPictureInPicture()
  @objc func exitPictureInPicture()
  @objc func destroy()
  @objc optional func willRotate()
  @objc optional func didRotate()
}
@objc(BMPSystemUiApi) public protocol SystemUiApi {
  @objc @available(tvOS 15.0, iOS 13.0, *)
  @available(iOS, unavailable)
  var transportBarCustomMenuItems: [UIKit.UIMenuElement] { get set }
  @objc @available(tvOS 15.0, iOS 13.0, *)
  @available(iOS, unavailable)
  var infoViewActions: [UIKit.UIAction] { get set }
  @objc @available(tvOS 15.0, *)
  @available(iOS, unavailable)
  var customInfoViewControllers: [UIKit.UIViewController] { get set }
}
@_inheritsConvenienceInitializers @objc(BMPSharePlayApi) public class SharePlayApi : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 15.0, tvOS 15.0, *)
extension BitmovinPlayer.SharePlayApi {
  public var suspensionReasons: [AVFoundation.AVCoordinatedPlaybackSuspension.Reason] {
    get
  }
  public var isInGroupSession: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public func coordinate<T>(with groupSession: GroupActivities.GroupSession<T>) where T : GroupActivities.GroupActivity
  public func beginSuspension(for suspensionReason: AVFoundation.AVCoordinatedPlaybackSuspension.Reason) -> BitmovinPlayer.SharePlaySuspension
  public func endSuspension(_ suspension: BitmovinPlayer.SharePlaySuspension)
  public func endSuspension(_ suspension: BitmovinPlayer.SharePlaySuspension, proposingNewTime newTime: Foundation.TimeInterval)
}
extension BitmovinPlayer._LogLevel : Swift.Equatable {}
extension BitmovinPlayer._LogLevel : Swift.Hashable {}
extension BitmovinPlayer._LogLevel : Swift.RawRepresentable {}
extension BitmovinPlayer.MetadataType : Swift.Equatable {}
extension BitmovinPlayer.MetadataType : Swift.Hashable {}
extension BitmovinPlayer.MetadataType : Swift.RawRepresentable {}
@available(iOS 15.0, tvOS 15.0, *)
extension AVFoundation.AVCoordinatedPlaybackSuspension : BitmovinPlayer.SharePlaySuspension {}
extension BitmovinPlayer.UnstallingBehaviour : Swift.Equatable {}
extension BitmovinPlayer.UnstallingBehaviour : Swift.Hashable {}
extension BitmovinPlayer.UnstallingBehaviour : Swift.RawRepresentable {}
extension BitmovinPlayer.TrackType : Swift.Equatable {}
extension BitmovinPlayer.TrackType : Swift.Hashable {}
extension BitmovinPlayer.TrackType : Swift.RawRepresentable {}
extension BitmovinPlayer.UserInterfaceType : Swift.Equatable {}
extension BitmovinPlayer.UserInterfaceType : Swift.Hashable {}
extension BitmovinPlayer.UserInterfaceType : Swift.RawRepresentable {}
extension BitmovinPlayer.RemoteControlType : Swift.Equatable {}
extension BitmovinPlayer.RemoteControlType : Swift.Hashable {}
extension BitmovinPlayer.RemoteControlType : Swift.RawRepresentable {}
extension BitmovinPlayer.PlaybackStartBehaviour : Swift.Equatable {}
extension BitmovinPlayer.PlaybackStartBehaviour : Swift.Hashable {}
extension BitmovinPlayer.PlaybackStartBehaviour : Swift.RawRepresentable {}
extension BitmovinPlayer.SourceType : Swift.Equatable {}
extension BitmovinPlayer.SourceType : Swift.Hashable {}
extension BitmovinPlayer.SourceType : Swift.RawRepresentable {}
extension BitmovinPlayer.AdSourceType : Swift.Equatable {}
extension BitmovinPlayer.AdSourceType : Swift.Hashable {}
extension BitmovinPlayer.AdSourceType : Swift.RawRepresentable {}
extension BitmovinPlayer.OfflineTrackAction : Swift.Equatable {}
extension BitmovinPlayer.OfflineTrackAction : Swift.Hashable {}
extension BitmovinPlayer.OfflineTrackAction : Swift.RawRepresentable {}
extension BitmovinPlayer.LoadingState : Swift.Equatable {}
extension BitmovinPlayer.LoadingState : Swift.Hashable {}
extension BitmovinPlayer.LoadingState : Swift.RawRepresentable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.Equatable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.Hashable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.RawRepresentable {}
extension BitmovinPlayer.CastDeviceDiscoveryMode : Swift.Equatable {}
extension BitmovinPlayer.CastDeviceDiscoveryMode : Swift.Hashable {}
extension BitmovinPlayer.CastDeviceDiscoveryMode : Swift.RawRepresentable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.Equatable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.Hashable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.RawRepresentable {}
extension BitmovinPlayer.ReplayMode : Swift.Equatable {}
extension BitmovinPlayer.ReplayMode : Swift.Hashable {}
extension BitmovinPlayer.ReplayMode : Swift.RawRepresentable {}
extension BitmovinPlayer.SubtitleFormat : Swift.Equatable {}
extension BitmovinPlayer.SubtitleFormat : Swift.Hashable {}
extension BitmovinPlayer.SubtitleFormat : Swift.RawRepresentable {}
